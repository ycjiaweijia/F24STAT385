[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "STAT 385 Statistical Programming Methods",
    "section": "",
    "text": "Preface\nThe website contains lecture notes, quizzes, and lab materials for STAT 385: Statistical Programming Methods, offered in Fall 2024 at the University of Illinois Urbana-Champaign (UIUC). For any comments, suggestions, or concerns regarding the notes, please feel free to contact me at wjia@illinois.edu.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#class-material",
    "href": "index.html#class-material",
    "title": "STAT 385 Statistical Programming Methods",
    "section": "Class Material:",
    "text": "Class Material:\nAll the textbooks listed here are open-source and freely available for anyone to access electronically:\n\nR Coding Basics (by Gaston Sanchez)\nDeep R Programming (by Marek Gagolewski)\nAdvanced R (by Hadley Wickham)\nHands-On Programming with R (Garrett Grolemund)\nAtomic R (by David Dalpiaz)\nR for Data Science (by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund)\nR Markdown: The Definitive Guide (by Yihui Xie, J. J. Allaire, Garrett Grolemund)\nMastering Shiny (by Hadley Wickham)\nPosit Cheatsheets",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "1-Intro/1-Intro.html",
    "href": "1-Intro/1-Intro.html",
    "title": "1  R, RStudio, and R Packages",
    "section": "",
    "text": "1.1 Download and Install R and RStudio\nhttps://posit.co/download/rstudio-desktop/",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R, RStudio, and R Packages</span>"
    ]
  },
  {
    "objectID": "1-Intro/1-Intro.html#download-and-install-r-and-rstudio",
    "href": "1-Intro/1-Intro.html#download-and-install-r-and-rstudio",
    "title": "1  R, RStudio, and R Packages",
    "section": "",
    "text": "Visit the website, download and install R and RStudio (selecting the appropriate version for your OS)\n\n\n\nAlternatively, you may use Posit Cloud: https://posit.cloud/ to try all the functions introduced below.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R, RStudio, and R Packages</span>"
    ]
  },
  {
    "objectID": "1-Intro/1-Intro.html#r-vs-rstudio",
    "href": "1-Intro/1-Intro.html#r-vs-rstudio",
    "title": "1  R, RStudio, and R Packages",
    "section": "1.2 R vs RStudio",
    "text": "1.2 R vs RStudio\n\nR is a programming language and open source software environment for predictive analytics and data visualization.\nRStudio is the premier IDE for R.\nR may be used without RStudio, but Rstudio may not be used with R.\nLaunch RStudio program, just as you would open any program, by clicking on its icon or by typing ``RStudio’’ at the Windows Run prompt.\n\n\nFour primary panes of RStudio User interface - from https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R, RStudio, and R Packages</span>"
    ]
  },
  {
    "objectID": "1-Intro/1-Intro.html#popular-r-packages-for-data-science",
    "href": "1-Intro/1-Intro.html#popular-r-packages-for-data-science",
    "title": "1  R, RStudio, and R Packages",
    "section": "1.3 Popular R packages for data science",
    "text": "1.3 Popular R packages for data science\n\nR is a powerful tools because tons of R packages are used to extend the capabilities of base R.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R, RStudio, and R Packages</span>"
    ]
  },
  {
    "objectID": "1-Intro/1-Intro.html#r-packages",
    "href": "1-Intro/1-Intro.html#r-packages",
    "title": "1  R, RStudio, and R Packages",
    "section": "1.4 R Packages",
    "text": "1.4 R Packages\n\nExtensive collection of packages designed for statistical analysis.\nDynamic and reproducible documents with R Markdown.\nTidyverse \\(\\leftarrow\\) A collection of R packages designed for data science\n\nData visualization with ggplot2\nData transformation with dplyr\nData tidying with tidyr\nData import with readr, readxl\nManipulate lists with purr\nString manipulation with stringr\n\nInteractive web apps with Shiny\n\\(\\cdots\\)",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R, RStudio, and R Packages</span>"
    ]
  },
  {
    "objectID": "1-Intro/1-Intro.html#install-and-preload-packages-in-r-example",
    "href": "1-Intro/1-Intro.html#install-and-preload-packages-in-r-example",
    "title": "1  R, RStudio, and R Packages",
    "section": "1.5 Install and Preload Packages in R – Example",
    "text": "1.5 Install and Preload Packages in R – Example\n\n1.5.1 Install Packages\n\nRun Install.packages(\"the-package-name\")\n\nExample Install package tidyverse.\n\ninstall.packages(\"tidyverse\")\n\nNote that, R Markdown is automatically installed and loaded in RStudio IDE. So you don’t need to explicitly install rmarkdown package if using R Studio.\n\nClick Tools \\(\\rightarrow\\) Install Packages \\(\\rightarrow\\) Type in package name and install.\nRefer to the pane that has the tabs Files, Plots, Packages. Click on the tab Packages, and then click on the button Install to install the package needed.\n\n\n\n1.5.2 Load Packages\nExample After installation, load package tidyverse.\n\nlibrary(tidyverse)\n\nYou only need to install a package once (like buying a tool from the hardware store and adding it to your toolbox), but you need to reload it every time you start a new session (like grabbing the specific tool you need for the task at hand).\n\n\n1.5.3 Example\nTry the following codes in the R console.\n\ncheddar # The data set cannot be found, as the package \"faraway\" is not installed and/or loaded.\n# install.packages(\"faraway\") # Install the package\nlibrary(faraway) # Load the package\ncheddar # Now you can use the dataset\n\n### You may specify a dataset from a package by using\nfaraway::cheddar",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R, RStudio, and R Packages</span>"
    ]
  },
  {
    "objectID": "1-Intro/1-Intro.html#creat-.r-and-.rmd-file",
    "href": "1-Intro/1-Intro.html#creat-.r-and-.rmd-file",
    "title": "1  R, RStudio, and R Packages",
    "section": "1.6 Creat .R and .Rmd file",
    "text": "1.6 Creat .R and .Rmd file\n\nCreate an R script file (with extension .R) by clicking File \\(\\rightarrow\\) New File \\(\\rightarrow\\) R Script. (Shortcut is Ctrl + Shift + C (windows), command + shift + N (Mac))\nCreate an R Markdown file (with extension .Rmd) by clicking File \\(\\rightarrow\\) New File \\(\\rightarrow\\) R Markdown.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R, RStudio, and R Packages</span>"
    ]
  },
  {
    "objectID": "1-Intro/1-Intro.html#r-markdown-file",
    "href": "1-Intro/1-Intro.html#r-markdown-file",
    "title": "1  R, RStudio, and R Packages",
    "section": "1.7 R Markdown File",
    "text": "1.7 R Markdown File\nThe following workflow is from R Markdown Cheat Sheet\n\n\n1.7.1 Install TinyTex for PDF output\nIf you want to generate PDF output, you will need to install TinyTex. Please run the following codes in the R Console.\n\ninstall.packages('tinytex')\ntinytex::install_tinytex()  # install TinyTeX",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R, RStudio, and R Packages</span>"
    ]
  },
  {
    "objectID": "1-Intro/1-Intro.html#some-useful-tips",
    "href": "1-Intro/1-Intro.html#some-useful-tips",
    "title": "1  R, RStudio, and R Packages",
    "section": "1.8 Some Useful Tips",
    "text": "1.8 Some Useful Tips\n\nUse Ctrl + L to clear Console (windows), Cmd + L (Mac)\nDefault comment/uncomment codes selection is Ctrl + Shift + C (windows), Command + Shift + C (Mac). You may change the shortcut to Ctrl + /.\n\n(You can do so by clicking Tools \\(\\rightarrow\\) Modify Keyboard Shortcuts \\(\\rightarrow\\) Search “comment” \\(\\rightarrow\\) Change the shortcut \\(\\rightarrow\\) Apply.)",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R, RStudio, and R Packages</span>"
    ]
  },
  {
    "objectID": "Lab0/Lab0.html",
    "href": "Lab0/Lab0.html",
    "title": "2  Lab 0 Instructions",
    "section": "",
    "text": "2.1 Question 1\nSuppose vec &lt;- c(10, 8, 10, 8, 8, 4).\n\\[ s = \\sqrt{\\frac{\\sum_i^n(x_i - \\bar x)^2}{n-1}},\\]\nwhere \\(\\bar x = \\frac{\\sum_i^n x_i}{n}\\) and \\(n\\) is the length of the vector \\(x\\). Please compute the sample standard deviation for vec = c(10, 8, 10, 8, 8, 4) using the formula. You may use the vectorised functions like mean(), sum() and the operators.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Lab 0 Instructions</span>"
    ]
  },
  {
    "objectID": "Lab0/Lab0.html#question-1",
    "href": "Lab0/Lab0.html#question-1",
    "title": "2  Lab 0 Instructions",
    "section": "",
    "text": "What is wrong with a call to c(sqrt(10), sqrt(8), sqrt(10), sqrt(8), sqrt(8), sqrt(4))?\nFor vector \\(x = c(x_1, \\cdots, x_n)\\), the formula for calculating sample standard deviation is\n\n\n\n\nCompare the result with sd(vec). Are they the same?",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Lab 0 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz1/Quiz1.html",
    "href": "Quiz1/Quiz1.html",
    "title": "3  Quiz 1 Instructions",
    "section": "",
    "text": "3.1 Question 1.\nMake a vector called myVector and have it store the integers \\(1,2,3\\)",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Quiz 1 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz1/Quiz1.html#question-2.",
    "href": "Quiz1/Quiz1.html#question-2.",
    "title": "3  Quiz 1 Instructions",
    "section": "3.2 Question 2.",
    "text": "3.2 Question 2.\nMake a string called myString and have it store “Hello STAT 385!”.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Quiz 1 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz1/Quiz1.html#question-3.",
    "href": "Quiz1/Quiz1.html#question-3.",
    "title": "3  Quiz 1 Instructions",
    "section": "3.3 Question 3.",
    "text": "3.3 Question 3.\nRead in the data set called data.csv and store the data frame as myDataFrame.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Quiz 1 Instructions</span>"
    ]
  },
  {
    "objectID": "2-Vector/2-Vector.html",
    "href": "2-Vector/2-Vector.html",
    "title": "4  Vector Basics",
    "section": "",
    "text": "4.1 Reading Assignments",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Vector Basics</span>"
    ]
  },
  {
    "objectID": "2-Vector/2-Vector.html#reading-assignments",
    "href": "2-Vector/2-Vector.html#reading-assignments",
    "title": "4  Vector Basics",
    "section": "",
    "text": "Please make sue you’ve read the following sections in the textbook: R Coding Basics, https://www.gastonsanchez.com/R-coding-basics/\n\nFirst Contact with Vectors\nProperties of Vectors",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Vector Basics</span>"
    ]
  },
  {
    "objectID": "2-Vector/2-Vector.html#vector-types-logical-integer-double-character",
    "href": "2-Vector/2-Vector.html#vector-types-logical-integer-double-character",
    "title": "4  Vector Basics",
    "section": "4.2 Vector Types: logical, integer, double, character",
    "text": "4.2 Vector Types: logical, integer, double, character\n\n4.2.1 v1 is a logical vector\n\nv1 &lt;- c(FALSE, TRUE)\nv1 = c(FALSE, TRUE)\nv1 &lt;- c(F, T)\n\n\n\n4.2.2 v2 is an integer vector\n\nv2 &lt;- c(0L, 1L)\nv2 = c(0L, 1L)\n\n\n\n4.2.3 v3 is a double vector\n\nv3 &lt;- c(0, 1)\n\n\n\n4.2.4 v4 is a character vector\n\nv4 &lt;- c('0', '1') # Equivalently, v4 &lt;- c(\"0\", \"1\")",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Vector Basics</span>"
    ]
  },
  {
    "objectID": "2-Vector/2-Vector.html#use-typeof-function-to-identify-the-type",
    "href": "2-Vector/2-Vector.html#use-typeof-function-to-identify-the-type",
    "title": "4  Vector Basics",
    "section": "4.3 Use typeof() function to identify the type",
    "text": "4.3 Use typeof() function to identify the type\n\ntypeof(v1)\n#&gt; [1] \"logical\"\ntypeof(v2)\n#&gt; [1] \"integer\"\ntypeof(v3)\n#&gt; [1] \"double\"\ntypeof(v4)\n#&gt; [1] \"character\"\n\n\n4.3.1 Use mode() function to identify the type\n\nmode(v1)\n#&gt; [1] \"logical\"\nmode(v2) # integer is numeric type\n#&gt; [1] \"numeric\"\nmode(v3) # double is numeric type\n#&gt; [1] \"numeric\"\nmode(v4)\n#&gt; [1] \"character\"\n\n\n\n4.3.2 Recall v2 is an integer vector\n\nis.logical(v2)\n#&gt; [1] FALSE\nis.character(v2)\n#&gt; [1] FALSE\n\nis.integer(v2) \n#&gt; [1] TRUE\nis.double(v2)\n#&gt; [1] FALSE\nis.numeric(v2)\n#&gt; [1] TRUE",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Vector Basics</span>"
    ]
  },
  {
    "objectID": "Quiz2/Quiz2.html",
    "href": "Quiz2/Quiz2.html",
    "title": "5  Quiz 2 Instructions",
    "section": "",
    "text": "5.1 Question 1.\n[2 pts] Area of trapezoid\nAs you know, the formula for the area of a trapezoid is (base 1 + base 2) /2 \\(\\times\\) height, as seen in the figure below:\nWrite R code to compute the area of a trapezoid of base1 = 10, base2 = 7, and height = 5. The computed area should be stored in an object area.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Quiz 2 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz2/Quiz2.html#question-2.",
    "href": "Quiz2/Quiz2.html#question-2.",
    "title": "5  Quiz 2 Instructions",
    "section": "5.2 Question 2.",
    "text": "5.2 Question 2.\nConsider the scores of a high school student:\n\nMaths – 95\nPhysics – 88.5\nPhysics lab – 79\nEnglish – 92\n\n(a). [1 pt] Use assignments to create variables maths, physics, physicslab, and english with their corresponding amounts.\n(b). [2 pts] Combine the four scores from part (a) into a vector named scores. Use the names() function to label the elements of the scores vector with the names: maths, physics, physicslab, and english.\n(c). [2 pts] Calculate the average of the scores and store the result in an object called avg.\n(d). [4 pts] Based on the scores vector in part (b) and policy table below, create a vector named grades containing the four corresponding grades. Additionally, create an integer vector grade_values with the four grade values. Recall that integer values are of the form 1L.\n\n\n\nRange\nGrade\nGrade Value\n\n\n\n\n[90, 100]\nA\n4\n\n\n[80, 90)\nB\n3\n\n\n[70, 80)\nC\n2\n\n\n[60, 70)\nD\n1\n\n\n&lt;60\nF\n0\n\n\n\n(e). [2 pts] Suppose the credits for Maths, Physics, Physics lab, English are 0.5, 1, 0.5, 1, respectively. Create a credits object.\n(f). [2 pts] Calculate the weighted GPA with\n\\[\\text{High School GPA} = \\sum (\\text{grade value}*\\text{credits})/ \\sum \\text{credits}\\] Save the value to object GPA.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Quiz 2 Instructions</span>"
    ]
  },
  {
    "objectID": "3-MoreVectors/3-MoreVectors.html",
    "href": "3-MoreVectors/3-MoreVectors.html",
    "title": "6  More About Vectors",
    "section": "",
    "text": "6.1 Reading Assignments",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>More About Vectors</span>"
    ]
  },
  {
    "objectID": "3-MoreVectors/3-MoreVectors.html#reading-assignments",
    "href": "3-MoreVectors/3-MoreVectors.html#reading-assignments",
    "title": "6  More About Vectors",
    "section": "",
    "text": "Please make sue you’ve read the following sections in the textbook: R Coding Basics, https://www.gastonsanchez.com/R-coding-basics/\n\nSection 3. Creating Vectors\nSection 4. More About Vectors",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>More About Vectors</span>"
    ]
  },
  {
    "objectID": "3-MoreVectors/3-MoreVectors.html#the-colon-operator-seq-rep",
    "href": "3-MoreVectors/3-MoreVectors.html#the-colon-operator-seq-rep",
    "title": "6  More About Vectors",
    "section": "6.2 The colon operator “:”, seq(), rep()",
    "text": "6.2 The colon operator “:”, seq(), rep()\n\n6.2.1 Colon operator “:”\n\nGenerate integer vector, if starting and ending values are whole numbers\n\n\nints = 1:5 # integer vector\nints\n#&gt; [1] 1 2 3 4 5\ntypeof(ints)\n#&gt; [1] \"integer\"\n\n\n\n\n\n\n\nGenerate double vector, if starting value is not whole number\n\n\ndbls = 5.2:1.2 # descending order; double vector\ndbls\n#&gt; [1] 5.2 4.2 3.2 2.2 1.2\ntypeof(dbls)\n#&gt; [1] \"double\"\n\n\none-unit step\n\n\n1.1:5\n#&gt; [1] 1.1 2.1 3.1 4.1\n\n\n\n6.2.2 seq() function\n\nBelow are equivalent\n\nseq(from = 1, to = 5)\nseq(from = 1, to = 5, by = 1)\nseq(1, 5)\nseq(1, 5, 1)\n1:5\n\nOdd numbers between 1 to 10\n\n\nseq(from = 1, to = 10, by = 2) \n#&gt; [1] 1 3 5 7 9\n\n\nThe first 10 odd numbers\n\n\nseq(from = 1, by = 2, length.out = 10) # Total length of the vector is 10\n#&gt;  [1]  1  3  5  7  9 11 13 15 17 19\n\n\n\n6.2.3 rep() function\n\ntimes vs each\n\n\nrep(c(1,2), times = 3) # Repeat the entire vector 3 times\n#&gt; [1] 1 2 1 2 1 2\n\nrep(c(1,2), each = 2) # Each element repeated twice\n#&gt; [1] 1 1 2 2\n\n\nlength.out – set the total length\n\n\nrep(c(1,2), length.out = 5) # Repeat the vector until reaching the total length\n#&gt; [1] 1 2 1 2 1\n\n\nIf times & each are both specified\n\n\nrep(c(3,2,1), times = 3, each = 2) # \"each\" is performed first.\n#&gt;  [1] 3 3 2 2 1 1 3 3 2 2 1 1 3 3 2 2 1 1\n\n\ntimes equals a vector\n\n\nrep(1:3, times = c(4, 5, 6)) \n#&gt;  [1] 1 1 1 1 2 2 2 2 2 3 3 3 3 3 3\n\n\n# Note that, using each doesn't work\nrep(1:3, each = c(4, 5, 6))",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>More About Vectors</span>"
    ]
  },
  {
    "objectID": "3-MoreVectors/3-MoreVectors.html#vector-coercion",
    "href": "3-MoreVectors/3-MoreVectors.html#vector-coercion",
    "title": "6  More About Vectors",
    "section": "6.3 Vector Coercion",
    "text": "6.3 Vector Coercion\nHierarchy Rule: \ncharacter &gt; double &gt; integer &gt; logical\n\ncharacters have priority over other data types: as long as one element is a character, all other elements are coerced into characters\n\n\nmixed &lt;- c(TRUE, 1L, 2.0, \"three\")\nmixed\n#&gt; [1] \"TRUE\"  \"1\"     \"2\"     \"three\"\n\n\n6.3.1 Recall v1 – v4 from Lecture 2\n\n# v1 is a logical vector\nv1 &lt;- c(FALSE, TRUE)\ntypeof(v1)\n#&gt; [1] \"logical\"\n# v2 is an integer vector\nv2 &lt;- c(0L, 1L)\ntypeof(v2)\n#&gt; [1] \"integer\"\n# v3 is a double vector\nv3 &lt;- c(0, 1)\ntypeof(v3)\n#&gt; [1] \"double\"\n# v4 is a character vector\nv4 &lt;- c('0', '1') # Equivalently, v4 &lt;- c(\"0\", \"1\")\ntypeof(v4)\n#&gt; [1] \"character\"\n\n\n\n6.3.2 Coercion Examples\n\nv5 &lt;- c(v1, v2)\ntypeof(v5)\n#&gt; [1] \"integer\"\n\nv6 &lt;- c(v5, v3)\ntypeof(v6)\n#&gt; [1] \"double\"\n\nv7 &lt;- c(v6, v4)\ntypeof(v7)\n#&gt; [1] \"character\"",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>More About Vectors</span>"
    ]
  },
  {
    "objectID": "3-MoreVectors/3-MoreVectors.html#vectorization",
    "href": "3-MoreVectors/3-MoreVectors.html#vectorization",
    "title": "6  More About Vectors",
    "section": "6.4 Vectorization",
    "text": "6.4 Vectorization\n\nVectorization is essential in R. Many operations in R are vectorized.\nVectorized operations are essentially operations that are performed in an element by element fashion.\n\n\nx = c(1, 2, 3, 4, 5)\ny = c(5, 4, 3, 2, 1)\nx + y\n#&gt; [1] 6 6 6 6 6\n\n\nc(1 + 5, 2 + 4, 3 + 3, 4 + 2, 5 + 1)\n\n\nVectorization vs for loop\nIn other languages (e.g. C, python), vectorization is not typically a native feature.\n\n\n6.4.1 Example 4.2\n\ndeposit &lt;- 1000\nrate &lt;- 0.02\nyears &lt;- 1:10  # vector of years\namounts &lt;- deposit * (1 + rate)^years\n\nInput: years Output: amounts Function: deposit * (1 + rate)^years \\(\\leftarrow\\) the code is vectorized\n\nyears\n#&gt;  [1]  1  2  3  4  5  6  7  8  9 10\namounts \n#&gt;  [1] 1020.000 1040.400 1061.208 1082.432 1104.081 1126.162 1148.686 1171.659\n#&gt;  [9] 1195.093 1218.994\n\n\n\n6.4.2 Other examples of vectorized operator\n\nsqrt(amounts)\n#&gt;  [1] 31.93744 32.25523 32.57619 32.90034 33.22771 33.55834 33.89227 34.22951\n#&gt;  [9] 34.57011 34.91410\nlog(amounts)\n#&gt;  [1] 6.927558 6.947361 6.967163 6.986966 7.006768 7.026571 7.046374 7.066176\n#&gt;  [9] 7.085979 7.105782\n\n\n\n6.4.3 Examples of not-vectorized operator\n\nmax(amounts)\n#&gt; [1] 1218.994\nmean(amounts)\n#&gt; [1] 1116.872\nlength(amounts)\n#&gt; [1] 10",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>More About Vectors</span>"
    ]
  },
  {
    "objectID": "3-MoreVectors/3-MoreVectors.html#recycling",
    "href": "3-MoreVectors/3-MoreVectors.html#recycling",
    "title": "6  More About Vectors",
    "section": "6.5 Recycling",
    "text": "6.5 Recycling\nTakes the short vector, recycles its content to matches the longer vector.\n\nc(1, 1, 2, 2, 3, 3) + c(0.5, 0.1)\n#&gt; [1] 1.5 1.1 2.5 2.1 3.5 3.1\n\nc(1, 2, 3) + c(0.5, 0.1) # Warning Message!\n#&gt; [1] 1.5 2.1 3.5",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>More About Vectors</span>"
    ]
  },
  {
    "objectID": "3-MoreVectors/3-MoreVectors.html#subsetting",
    "href": "3-MoreVectors/3-MoreVectors.html#subsetting",
    "title": "6  More About Vectors",
    "section": "6.6 Subsetting",
    "text": "6.6 Subsetting\n\n6.6.1 Creating the vector\n\n# Example from Exercise 2.7\nrates &lt;- c(0.02, 0.03, 0.04)\nnames(rates) &lt;- c(\"savings\", \"market\", \"certif\")\n\n# Equivalently\nrates &lt;- c(\n  \"savings\" = 0.02,\n  \"market\" = 0.03,\n  \"certif\" = 0.04\n)\n\n\n\n6.6.2 Subsetting\nBracket Notation: []\nUse (square) brackets [ ] to get access to the elements of a vector.\n\nrates[2] # The second element\n#&gt; market \n#&gt;   0.03\nrates[2:3] # The second to third elements\n#&gt; market certif \n#&gt;   0.03   0.04\nrates[-3] # All elements except the 3rd element\n#&gt; savings  market \n#&gt;    0.02    0.03\nrates[c(1,2)] # The 1st and 2nd elements\n#&gt; savings  market \n#&gt;    0.02    0.03\nrates[\"certif\"] # The element with name \"certif\"\n#&gt; certif \n#&gt;   0.04\nrates[c(\"savings\", \"certif\")]\n#&gt; savings  certif \n#&gt;    0.02    0.04\nrates[rates &gt; 0.02] # All elements greater than 0.02\n#&gt; market certif \n#&gt;   0.03   0.04\nrates[rates &lt;= 0.03] # All elements less than or equal to 0.03\n#&gt; savings  market \n#&gt;    0.02    0.03\nrates[rates != 0.04] # All elements not equal to 0.04\n#&gt; savings  market \n#&gt;    0.02    0.03",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>More About Vectors</span>"
    ]
  },
  {
    "objectID": "Quiz3/Quiz3.html",
    "href": "Quiz3/Quiz3.html",
    "title": "7  Quiz 3 Instructions",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz3.R.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz3.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs.\n\n\n\n\n7.0.1 Question 1 [2pt]\nCreate the vector vec1 with the values shown below, using the function seq().\n\n#&gt;   [1]  1.1  1.3  1.5  1.7  1.9  2.1  2.3  2.5  2.7  2.9  3.1  3.3  3.5  3.7  3.9\n#&gt;  [16]  4.1  4.3  4.5  4.7  4.9  5.1  5.3  5.5  5.7  5.9  6.1  6.3  6.5  6.7  6.9\n#&gt;  [31]  7.1  7.3  7.5  7.7  7.9  8.1  8.3  8.5  8.7  8.9  9.1  9.3  9.5  9.7  9.9\n#&gt;  [46] 10.1 10.3 10.5 10.7 10.9 11.1 11.3 11.5 11.7 11.9 12.1 12.3 12.5 12.7 12.9\n#&gt;  [61] 13.1 13.3 13.5 13.7 13.9 14.1 14.3 14.5 14.7 14.9 15.1 15.3 15.5 15.7 15.9\n#&gt;  [76] 16.1 16.3 16.5 16.7 16.9 17.1 17.3 17.5 17.7 17.9 18.1 18.3 18.5 18.7 18.9\n#&gt;  [91] 19.1 19.3 19.5 19.7 19.9 20.1 20.3 20.5 20.7 20.9\n\n\n\n\n\n\n7.0.2 Question 2 [2pt]\nFind out how to use the colon operator : to create the vector vec2 with values below.\n\n#&gt;  [1]  8.5  7.5  6.5  5.5  4.5  3.5  2.5  1.5  0.5 -0.5 -1.5 -2.5 -3.5 -4.5 -5.5\n#&gt; [16] -6.5 -7.5 -8.5\n\n\n\n\n\n\n7.0.3 Question 3 [2pt]\nFind out how to use the function rep() and the input vector 1:3 to create the vector vec3 with the values below, which has twenty 1, ten 2, and forty 3.\n\n#&gt;  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3\n#&gt; [39] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n\n\n\n\n\n\n7.0.4 Question 4 [2pt]\nUse the function sum() to show that \\(1 + 2 + \\cdots + 1000 = 500500.\\) That is, create vector vec4 with values \\(1, 2, \\cdots, 1000\\). Then calculate the sum.\n\n\n\n\n\n7.0.5 Question 5 [2pt]\nLoad the R package MASS and use the data frame cats. Obtain vectors sex and bwt from the data frame with sex &lt;- cats$Sex, bwt &lt;- cats$Bwt. Show the body weights of female cats by creating vector bwtF. How many female cats are there in the data set? Please save the length value in object len.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Quiz 3 Instructions</span>"
    ]
  },
  {
    "objectID": "Lab1/Lab1.html",
    "href": "Lab1/Lab1.html",
    "title": "8  Lab 1",
    "section": "",
    "text": "8.1 Question 1\nThe expression:\n\\[4 \\sum_{i=1}^n \\frac{(-1)^{i+1}}{2i-1} = 4 \\left(\\frac{1}{1} - \\frac{1}{3}+\\frac{1}{5}-\\frac{1}{7}+\\cdots\\right)\\] slowly converges to \\(\\pi\\) as \\(n\\) approaches \\(\\infty\\).\n(a). Calculate it for \\(n=100\\) using the vectorized functions and operators, making use of the recycling rule as much as possible. [Hint: Please avoid using for loop and instead utilize vectorized calculations. Please make sure to use the c(1, -1) vector.]\n(b). In your code from part (a), identify which functions or operators are vectorized. And explain how the recycling rule is applied (specify which is the shorter vector and which is the longer vector).\n(c). Calculate the value when \\(n=1,000, n = 1,000,000,\\) and \\(n = 10,000,000\\) 1,000,000,000 , respectively. Are the results converges to \\(\\pi\\) as \\(n\\) approaches \\(\\infty\\)? Please state your conclusion. [Hint: This calculation might take some time to complete.]",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lab 1</span>"
    ]
  },
  {
    "objectID": "Lab1/Lab1.html#question-2",
    "href": "Lab1/Lab1.html#question-2",
    "title": "8  Lab 1",
    "section": "8.2 Question 2",
    "text": "8.2 Question 2\nLet \\(x\\) and \\(y\\) be two vectors of identical lengths \\(n\\), say\n\nset.seed(1) \nx &lt;- rnorm(100) # rnorm(100) generate 100 random numbers independently from N(0, 1)\ny &lt;- 2 * x + 10 + rnorm(100, 0, 0.5) \n# similarly, rnorm(100, 0, 0.5) generates 100 random numbers independently\n# from normal distribution with mean 0 and standard deviation 0.5\n\n\nPlease refer to Section 2.1.5 in Deep R Programming for more information about set.seed() and rnorm(). Please feel free to use help(set.seed) and help(rnorm) as well.\n\n(a). Compute the Pearson linear correlation coefficient given by the formula below. Please perform the calculation using the vectorised functions like mean(), sum() and the operators.\n\\[r = \\frac{\\sum_{i=1}^n\\left(x_i - \\frac{1}{n}\\sum_{j=1}^nx_j\\right)\\left(y_i - \\frac{1}{n}\\sum_{j=1}^n y_j\\right)}{\\sqrt{\\sum_{i=1}^n\\left(x_i - \\frac{1}{n}\\sum_{j=1}^nx_j\\right)^2} \\sqrt{\\sum_{i=1}^n\\left(y_i - \\frac{1}{n}\\sum_{j=1}^ny_j\\right)^2}}\\]\n(b). To verify that your implementation in part (a) is correct, compare your result with the output of cor(x, y). Are the two values the same, up to a small decimal difference? State your conclusion.\n[Note that, the identical() function may not work as expected, as the two values could differ by a very small decimal.]",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lab 1</span>"
    ]
  },
  {
    "objectID": "Lab1/Lab1.html#question-3",
    "href": "Lab1/Lab1.html#question-3",
    "title": "8  Lab 1",
    "section": "8.3 Question 3",
    "text": "8.3 Question 3\n(a). Create an atomic vector named suits that stores the four suits in cards (Diamonds, Spades, Clubs, and Hearts). Which type of vector is it (logical, integer, double, or character)?\n(b). For the 13 Spades cards (Ace, 2, …, 10, Jack, Queen, King), create an atomic vector named facename that stores just the face names. Recall that, for the “Ace of Spades”, the face name is “Ace” and the suit name is “Spades”. What type of vector is facename?\n(c). Using the vectors in (a) and (b), create an atomic vector named deck that represents a standard 52-card deck (as shown below).\n\n#&gt;  [1] \"Ace of Diamonds\"   \"2 of Diamonds\"     \"3 of Diamonds\"    \n#&gt;  [4] \"4 of Diamonds\"     \"5 of Diamonds\"     \"6 of Diamonds\"    \n#&gt;  [7] \"7 of Diamonds\"     \"8 of Diamonds\"     \"9 of Diamonds\"    \n#&gt; [10] \"10 of Diamonds\"    \"Jack of Diamonds\"  \"Queen of Diamonds\"\n#&gt; [13] \"King of Diamonds\"  \"Ace of Spades\"     \"2 of Spades\"      \n#&gt; [16] \"3 of Spades\"       \"4 of Spades\"       \"5 of Spades\"      \n#&gt; [19] \"6 of Spades\"       \"7 of Spades\"       \"8 of Spades\"      \n#&gt; [22] \"9 of Spades\"       \"10 of Spades\"      \"Jack of Spades\"   \n#&gt; [25] \"Queen of Spades\"   \"King of Spades\"    \"Ace of Clubs\"     \n#&gt; [28] \"2 of Clubs\"        \"3 of Clubs\"        \"4 of Clubs\"       \n#&gt; [31] \"5 of Clubs\"        \"6 of Clubs\"        \"7 of Clubs\"       \n#&gt; [34] \"8 of Clubs\"        \"9 of Clubs\"        \"10 of Clubs\"      \n#&gt; [37] \"Jack of Clubs\"     \"Queen of Clubs\"    \"King of Clubs\"    \n#&gt; [40] \"Ace of Hearts\"     \"2 of Hearts\"       \"3 of Hearts\"      \n#&gt; [43] \"4 of Hearts\"       \"5 of Hearts\"       \"6 of Hearts\"      \n#&gt; [46] \"7 of Hearts\"       \"8 of Hearts\"       \"9 of Hearts\"      \n#&gt; [49] \"10 of Hearts\"      \"Jack of Hearts\"    \"Queen of Hearts\"  \n#&gt; [52] \"King of Hearts\"\n\n(Hints:\n\nYou many need to use rep().\nYou may need to use paste() function. Please refer to section 6.1.3 of Deep R Programming. Feel free to use help(paste) as well. Example: paste(5:7, \"of\", c(\"Spades\", \"Spades\", \"Hearts\"))\n\n)",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lab 1</span>"
    ]
  },
  {
    "objectID": "4-Factors/4-Factors.html",
    "href": "4-Factors/4-Factors.html",
    "title": "9  Factors",
    "section": "",
    "text": "9.1 Reading Assignments",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Factors</span>"
    ]
  },
  {
    "objectID": "4-Factors/4-Factors.html#reading-assignments",
    "href": "4-Factors/4-Factors.html#reading-assignments",
    "title": "9  Factors",
    "section": "",
    "text": "Please make sue you’ve read the following sections in the textbook: R Coding Basics, https://www.gastonsanchez.com/R-coding-basics/\n\nSection 5 Factors",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Factors</span>"
    ]
  },
  {
    "objectID": "4-Factors/4-Factors.html#creating-factors",
    "href": "4-Factors/4-Factors.html#creating-factors",
    "title": "9  Factors",
    "section": "9.2 Creating Factors",
    "text": "9.2 Creating Factors\nfactor() can convert a vector (numerical, character, or logical) to a factor\nExamples:\n\nnum_vector &lt;- c(1, 2, 3, 1, 2, 3, 2)\nfactor(num_vector)\n#&gt; [1] 1 2 3 1 2 3 2\n#&gt; Levels: 1 2 3\n\nstr_vector &lt;- c('a', 'b', 'c', 'b', 'c', 'a', 'c', 'b')\nfactor(str_vector)\n#&gt; [1] a b c b c a c b\n#&gt; Levels: a b c\n\nlog_vector &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE)\nfactor(log_vector)\n#&gt; [1] TRUE  FALSE TRUE  TRUE  FALSE\n#&gt; Levels: FALSE TRUE",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Factors</span>"
    ]
  },
  {
    "objectID": "4-Factors/4-Factors.html#why-factors",
    "href": "4-Factors/4-Factors.html#why-factors",
    "title": "9  Factors",
    "section": "9.3 Why factors?",
    "text": "9.3 Why factors?\nFactors are used to handle categorical data\nFactors vs Character\n\nFactors have levels; Character doesn’t have levels\n\nUse factors when your data represents categories or groups with a limited set of values (e.g., “red,” “green,” “blue” for colors).\nUse character vectors if your data consists of plain strings without specific meaning (e.g., names, labels, or arbitrary text).\n\nAs factors have predefined levels, factors are particularly useful in the following cases.\nCase 1: You get error message (and NA generated) when adding a new value not in the predefined levels (help prevent typos)\n\n\nfirst_factor &lt;- factor(num_vector)\nfirst_factor\n#&gt; [1] 1 2 3 1 2 3 2\n#&gt; Levels: 1 2 3\nfirst_factor[1] &lt;- 6\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, 1, value = 6): invalid factor level, NA\n#&gt; generated\nfirst_factor\n#&gt; [1] &lt;NA&gt; 2    3    1    2    3    2   \n#&gt; Levels: 1 2 3\n\nCase 2: when you tabulate a factor you’ll get counts of all categories, even unobserved ones.\n\nsex_char &lt;- c(\"m\", \"m\", \"m\")\nsex_factor &lt;- factor(sex_char, levels = c(\"m\", \"f\"))\n\ntable(sex_char)\n#&gt; sex_char\n#&gt; m \n#&gt; 3\ntable(sex_factor)\n#&gt; sex_factor\n#&gt; m f \n#&gt; 3 0\n\nCase 3: Compare to character, factors allow for efficient memory storage\nWhy? The way R stores factors is as vectors of integer values.\n\nsecond_factor &lt;- factor(str_vector)\nsecond_factor\n#&gt; [1] a b c b c a c b\n#&gt; Levels: a b c\ntypeof(second_factor)\n#&gt; [1] \"integer\"\nunclass(second_factor)\n#&gt; [1] 1 2 3 2 3 1 3 2\n#&gt; attr(,\"levels\")\n#&gt; [1] \"a\" \"b\" \"c\"\n\nunclass() is equivalent to as.numeric() or as.integer().",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Factors</span>"
    ]
  },
  {
    "objectID": "4-Factors/4-Factors.html#how-r-treats-factors",
    "href": "4-Factors/4-Factors.html#how-r-treats-factors",
    "title": "9  Factors",
    "section": "9.4 How R treats factors",
    "text": "9.4 How R treats factors\nFactors are built on top of an integer vector with two attributes:\n\nclass, “factor”, which makes it behave differently from regular integer vectors\nlevels, which defines the set of allowed values.\n\n\n# Recall second_factor defined above\nsecond_factor\n#&gt; [1] a b c b c a c b\n#&gt; Levels: a b c\nattributes(second_factor)\n#&gt; $levels\n#&gt; [1] \"a\" \"b\" \"c\"\n#&gt; \n#&gt; $class\n#&gt; [1] \"factor\"\ntypeof(second_factor)\n#&gt; [1] \"integer\"",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Factors</span>"
    ]
  },
  {
    "objectID": "4-Factors/4-Factors.html#ordinal-factor",
    "href": "4-Factors/4-Factors.html#ordinal-factor",
    "title": "9  Factors",
    "section": "9.5 Ordinal Factor",
    "text": "9.5 Ordinal Factor\n\nOrdinal factors are a minor variation of factors.\nOrdinal factors behave like regular factors, but the order of the levels is meaningful (low, medium, high) (a property that is automatically leveraged by some modelling and visualization functions)\n\n\n\n9.5.1 Convert to Ordinal Factor\nTwo equivalent ways below to convert vectors (numerical, character, logical) or unordered factors to ordinal factors\n\n# Two equivalent ways to get Ordinal factors\nfactor(num_vector, ordered = TRUE)\n#&gt; [1] 1 2 3 1 2 3 2\n#&gt; Levels: 1 &lt; 2 &lt; 3\nordered(num_vector)\n#&gt; [1] 1 2 3 1 2 3 2\n#&gt; Levels: 1 &lt; 2 &lt; 3\n\n\n\n9.5.2 Nominal Factor vs Ordinal Factor\n\n# Nominal factor or Unordered factor\nfirst_factor &lt;- factor(num_vector)\nfirst_factor\n#&gt; [1] 1 2 3 1 2 3 2\n#&gt; Levels: 1 2 3\n\n# Ordinal factor\nfirst_factor_o &lt;- factor(num_vector, ordered = TRUE)\nfirst_factor_o\n#&gt; [1] 1 2 3 1 2 3 2\n#&gt; Levels: 1 &lt; 2 &lt; 3\n\n\n\n9.5.3 Ordinal Factor or not? – is.ordered()\n\nis.ordered(num_vector) # Recall num_vector is a numerical vector\n#&gt; [1] FALSE\nis.ordered(first_factor) # first_factor is an unordered factor\n#&gt; [1] FALSE\nis.ordered(first_factor_o) # first_factor_o is an ordinal factor\n#&gt; [1] TRUE",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Factors</span>"
    ]
  },
  {
    "objectID": "Quiz4/Quiz4.html",
    "href": "Quiz4/Quiz4.html",
    "title": "10  Quiz 4 Instructions",
    "section": "",
    "text": "10.1 Question 1",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Quiz 4 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz4/Quiz4.html#question-1",
    "href": "Quiz4/Quiz4.html#question-1",
    "title": "10  Quiz 4 Instructions",
    "section": "",
    "text": "[1pts] Let vec1 &lt;- seq(1, 10, 2). Generate a factor vec1_factor using vec1.\n\n\n\n\n\n\n[1pts] Check if vec1 is a vector? A factor? (Hint: You may use is.factor() and is.vector() for this purpose.) In addition, use class() function to check the type of vec1.\n\n\n\n\n\n\n[1pts] Check if vec1_factor is a vector? A factor? In addition, use class() function to check the type of vec1_factor.\n\n\n\n\n\n\n[1pts] Generate another factor vec1_factor10 using vec1, but levels = 1:10. Use identical(vec1_factor, vec1_factor10) to compare if the two factors are the same.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Quiz 4 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz4/Quiz4.html#question-2",
    "href": "Quiz4/Quiz4.html#question-2",
    "title": "10  Quiz 4 Instructions",
    "section": "10.2 Question 2",
    "text": "10.2 Question 2\n[2pts] The typical 5-point Likert scale includes the following levels:\n\nStrongly Disagree\nDisagree\nNeutral\nAgree\nStrongly Agree\n\n\ny &lt;- c(\n  \"Disagree\", \"Disagree\", \"Agree\", \"Agree\", \"Strongly Agree\",           \n  \"Strongly Agree\", \"Strongly Disagree\", \"Strongly Disagree\", \n  \"Agree\", \"Agree\", \"Neutral\", \"Disagree\",         \n  \"Strongly Disagree\", \"Neutral\", \"Strongly Agree\", \"Agree\",           \n  \"Disagree\", \"Strongly Agree\", \"Strongly Agree\", \"Agree\",            \n  \"Neutral\", \"Agree\", \"Disagree\", \"Agree\", \"Agree\"  \n)\n\nBased on the vector y above, please generate a ordinal factor y_factor, which has the ordered levels as shown above (that is, ‘Strongly Disagree’ &lt; ‘Disagree’ &lt; ‘Neutral’ &lt; ‘Agree’ &lt; ‘Strongly Agree’).",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Quiz 4 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz4/Quiz4.html#question-3",
    "href": "Quiz4/Quiz4.html#question-3",
    "title": "10  Quiz 4 Instructions",
    "section": "10.3 Question 3",
    "text": "10.3 Question 3\n\n\ndays_of_week &lt;- c(\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\")\n\nDAYS &lt;- c(\"Saturday\", \"Wednesday\", \"Sunday\", \"Friday\")\n\n\n[1pt] Sort the DAYS vector using sort() function. (Please note that the results are in alphabetical order rather than the order of the weekdays.)\n\n\n\n\n\n[1pt] Encode the vector DAYS into a factor DAYS_f, by using days_of_week above as the levels for the factor.\n\n\n\n\n\n[1pt] Sort DAYS_f using sort() function. (Please note that the results now is in the order of the weekdays.)\n\n\n\n\n\n[1pt] Use the function unclass() to obtain the integer vector associated to DAYS_f.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Quiz 4 Instructions</span>"
    ]
  },
  {
    "objectID": "5-Matrix/5-Matrix.html",
    "href": "5-Matrix/5-Matrix.html",
    "title": "11  Matrices and Arrays",
    "section": "",
    "text": "11.1 Reading Assignments",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Matrices and Arrays</span>"
    ]
  },
  {
    "objectID": "5-Matrix/5-Matrix.html#reading-assignments",
    "href": "5-Matrix/5-Matrix.html#reading-assignments",
    "title": "11  Matrices and Arrays",
    "section": "",
    "text": "Please make sure you’ve read the following sections in the textbook: R Coding Basics, https://www.gastonsanchez.com/R-coding-basics/\n\nSection 6. Matrices and Arrays\nSection 7. More About Matrices",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Matrices and Arrays</span>"
    ]
  },
  {
    "objectID": "5-Matrix/5-Matrix.html#why-we-need-matrix",
    "href": "5-Matrix/5-Matrix.html#why-we-need-matrix",
    "title": "11  Matrices and Arrays",
    "section": "11.2 Why we need matrix?",
    "text": "11.2 Why we need matrix?\n\n11.2.1 Let’s discuss Vector vs Matrix vs Array\n\nDimensions\n\nVector is one-dim\n\nc(1,2,3,4,5,6)\n#&gt; [1] 1 2 3 4 5 6\n\nMatrix is two-dim\n\nmatrix(1:12, nrow = 3)\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1    4    7   10\n#&gt; [2,]    2    5    8   11\n#&gt; [3,]    3    6    9   12\n\nArray is \\(n\\)-dim\n\nThe vector, matrix, and array are all atomic objects, i.e., only single data type can be stored in a vector, or a matrix, or an array.\n\nHierarchy Rule is the same as before:\ncharacter &gt; double &gt; integer &gt; logical\n\n\nExample: \n\nv1 &lt;- c(\"A\", \"B\", \"C\") # character\nv2 &lt;- c(1, 2, 3) # double\nv3 &lt;- c(TRUE, FALSE, FALSE) # logical\ncbind(v1, v2, v3)\n#&gt;      v1  v2  v3     \n#&gt; [1,] \"A\" \"1\" \"TRUE\" \n#&gt; [2,] \"B\" \"2\" \"FALSE\"\n#&gt; [3,] \"C\" \"3\" \"FALSE\"",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Matrices and Arrays</span>"
    ]
  },
  {
    "objectID": "5-Matrix/5-Matrix.html#create-a-matrix",
    "href": "5-Matrix/5-Matrix.html#create-a-matrix",
    "title": "11  Matrices and Arrays",
    "section": "11.3 Create a Matrix",
    "text": "11.3 Create a Matrix\n\ncbind()\n\nExample from the previous page\n\nv1 &lt;- c(\"A\", \"B\", \"C\") # character\nv2 &lt;- c(1, 2, 3) # double\nv3 &lt;- c(TRUE, FALSE, FALSE) # logical\ncbind(v1, v2, v3)\n#&gt;      v1  v2  v3     \n#&gt; [1,] \"A\" \"1\" \"TRUE\" \n#&gt; [2,] \"B\" \"2\" \"FALSE\"\n#&gt; [3,] \"C\" \"3\" \"FALSE\"\n\n\nrbind()\n\n\nr1 &lt;- c(1, 2, 3)\nr2 &lt;- c(4, 5, 6)\nrbind(r1, r2)\n#&gt;    [,1] [,2] [,3]\n#&gt; r1    1    2    3\n#&gt; r2    4    5    6\n\n\nmatrix()\n\n\nmatrix(1:12, nrow = 3, ncol = 4, byrow=FALSE)\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1    4    7   10\n#&gt; [2,]    2    5    8   11\n#&gt; [3,]    3    6    9   12\n\n\n11.3.0.1 Equivalently,\n\nmatrix(1:12, nrow = 3)\nmatrix(1:12, ncol = 4)\nmatrix(1:12, nrow = 3, ncol = 4)\n\n\nWhat happens if byrow = TRUE\n\n\nmatrix(1:12, nrow = 3, byrow = TRUE) # Matrix is filled by row.\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1    2    3    4\n#&gt; [2,]    5    6    7    8\n#&gt; [3,]    9   10   11   12",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Matrices and Arrays</span>"
    ]
  },
  {
    "objectID": "5-Matrix/5-Matrix.html#working-with-dim",
    "href": "5-Matrix/5-Matrix.html#working-with-dim",
    "title": "11  Matrices and Arrays",
    "section": "11.4 Working with dim()",
    "text": "11.4 Working with dim()\n\n11.4.0.1 dim() – get the dimension of the matrix\n\nM &lt;- matrix(1:12, nrow = 3)\ndim(M)\n#&gt; [1] 3 4\n\n\n\n11.4.0.2 Get the row- or col- dimension only\n\ndim(M)[1] # row dimension\n#&gt; [1] 3\ndim(M)[2] # col dimension\n#&gt; [1] 4\n\n\n\n11.4.0.3 Use dim() to create a matrix\n\nA = 1:12 # vector; one-dim\ndim(A) &lt;- c(3, 4)\nA\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1    4    7   10\n#&gt; [2,]    2    5    8   11\n#&gt; [3,]    3    6    9   12",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Matrices and Arrays</span>"
    ]
  },
  {
    "objectID": "5-Matrix/5-Matrix.html#give-names-to-rows-and-columns",
    "href": "5-Matrix/5-Matrix.html#give-names-to-rows-and-columns",
    "title": "11  Matrices and Arrays",
    "section": "11.5 Give Names to Rows and Columns",
    "text": "11.5 Give Names to Rows and Columns\n\nMethod 1\n\n\nM &lt;- matrix(1:12, nrow = 3)\nrownames(M) &lt;- c(\"Row1\", \"Row2\", \"Row3\")\ncolnames(M) &lt;- c(\"Col1\", \"Col2\", \"Col3\", \"Col4\")\nM\n#&gt;      Col1 Col2 Col3 Col4\n#&gt; Row1    1    4    7   10\n#&gt; Row2    2    5    8   11\n#&gt; Row3    3    6    9   12\n\n\nMethod 2\n\n\nmatrix(1:12, nrow = 3,\n            dimnames = list(c(\"Row1\", \"Row2\", \"Row3\"), \n                            c(\"Col1\", \"Col2\", \"Col3\", \"Col4\")))\n#&gt;      Col1 Col2 Col3 Col4\n#&gt; Row1    1    4    7   10\n#&gt; Row2    2    5    8   11\n#&gt; Row3    3    6    9   12",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Matrices and Arrays</span>"
    ]
  },
  {
    "objectID": "5-Matrix/5-Matrix.html#basic-operations-with-matrices",
    "href": "5-Matrix/5-Matrix.html#basic-operations-with-matrices",
    "title": "11  Matrices and Arrays",
    "section": "11.6 Basic Operations with Matrices",
    "text": "11.6 Basic Operations with Matrices\nWe use Example 7.1 as follows\n\n# inputs\ndeposit = 1000\nrate_savings = 0.02\nrate_moneymkt = 0.025\nrate_certificate = 0.03\nyears = 0:5\n\n# future values\nsavings = deposit * (1 + rate_savings)^years\nmoneymkt = deposit * (1 + rate_moneymkt)^years\ncertificate = deposit * (1 + rate_certificate)^years\n\n# matrix\nmat = matrix(c(years, savings, moneymkt, certificate), nrow = 6, ncol = 4)\n\n# row and columns names\nrownames(mat) = 1:6\ncolnames(mat) = c(\"year\", \"savings\", \"moneymkt\", \"certificate\")\n\nmat\n#&gt;   year  savings moneymkt certificate\n#&gt; 1    0 1000.000 1000.000    1000.000\n#&gt; 2    1 1020.000 1025.000    1030.000\n#&gt; 3    2 1040.400 1050.625    1060.900\n#&gt; 4    3 1061.208 1076.891    1092.727\n#&gt; 5    4 1082.432 1103.813    1125.509\n#&gt; 6    5 1104.081 1131.408    1159.274\n\n\n11.6.1 Selecting elements\nmat[RowIndex, ColIndex]\nExamples:\n\nmat[2, 3] # select value in row 2 and col 3\n#&gt; [1] 1025\nmat[1:2, 3:4] # select row 1 to 2 and col 3 to 4\n#&gt;   moneymkt certificate\n#&gt; 1     1000        1000\n#&gt; 2     1025        1030\nmat[-1, -2] # select all other elements except row 1 and col 2\n#&gt;   year moneymkt certificate\n#&gt; 2    1 1025.000    1030.000\n#&gt; 3    2 1050.625    1060.900\n#&gt; 4    3 1076.891    1092.727\n#&gt; 5    4 1103.813    1125.509\n#&gt; 6    5 1131.408    1159.274\n\nmat[RowIndex, ]\nExamples:\n\nmat[3, ] # select row 3\n#&gt;        year     savings    moneymkt certificate \n#&gt;       2.000    1040.400    1050.625    1060.900\nmat[1:3, ] # select row 1 to 3\n#&gt;   year savings moneymkt certificate\n#&gt; 1    0  1000.0 1000.000      1000.0\n#&gt; 2    1  1020.0 1025.000      1030.0\n#&gt; 3    2  1040.4 1050.625      1060.9\nmat[-1, ] # select all elements except row 1\n#&gt;   year  savings moneymkt certificate\n#&gt; 2    1 1020.000 1025.000    1030.000\n#&gt; 3    2 1040.400 1050.625    1060.900\n#&gt; 4    3 1061.208 1076.891    1092.727\n#&gt; 5    4 1082.432 1103.813    1125.509\n#&gt; 6    5 1104.081 1131.408    1159.274\n\nmat[,ColIndex]\nExamples:\n\nmat[, 2] # select col 2\n#&gt;        1        2        3        4        5        6 \n#&gt; 1000.000 1020.000 1040.400 1061.208 1082.432 1104.081\nmat[, 2:4] # select col 2 to 4\n#&gt;    savings moneymkt certificate\n#&gt; 1 1000.000 1000.000    1000.000\n#&gt; 2 1020.000 1025.000    1030.000\n#&gt; 3 1040.400 1050.625    1060.900\n#&gt; 4 1061.208 1076.891    1092.727\n#&gt; 5 1082.432 1103.813    1125.509\n#&gt; 6 1104.081 1131.408    1159.274\nmat[, -3] # select all elements except col 3\n#&gt;   year  savings certificate\n#&gt; 1    0 1000.000    1000.000\n#&gt; 2    1 1020.000    1030.000\n#&gt; 3    2 1040.400    1060.900\n#&gt; 4    3 1061.208    1092.727\n#&gt; 5    4 1082.432    1125.509\n#&gt; 6    5 1104.081    1159.274\n\n\n\n11.6.2 Adding a new column using cbind() or row using rbind()\nExamples:\n\n# new column\nvec &lt;- c(2, 4, 6, 8, 10, 12)\n\n# adding new column\nmat &lt;- cbind(mat, vec)\nmat\n#&gt;   year  savings moneymkt certificate vec\n#&gt; 1    0 1000.000 1000.000    1000.000   2\n#&gt; 2    1 1020.000 1025.000    1030.000   4\n#&gt; 3    2 1040.400 1050.625    1060.900   6\n#&gt; 4    3 1061.208 1076.891    1092.727   8\n#&gt; 5    4 1082.432 1103.813    1125.509  10\n#&gt; 6    5 1104.081 1131.408    1159.274  12\n\nNote that, in order to add new column to mat, you need to specify mat &lt;- cbind(mat, vec), i.e. store the new matrix to mat.\nExamples:\n\n# new row\nrow_vec &lt;- c(2.5, 1051.353, 1064.623, 1078.068, 7)\nmat &lt;- rbind(mat, row_vec)\nmat\n#&gt;         year  savings moneymkt certificate vec\n#&gt; 1        0.0 1000.000 1000.000    1000.000   2\n#&gt; 2        1.0 1020.000 1025.000    1030.000   4\n#&gt; 3        2.0 1040.400 1050.625    1060.900   6\n#&gt; 4        3.0 1061.208 1076.891    1092.727   8\n#&gt; 5        4.0 1082.432 1103.813    1125.509  10\n#&gt; 6        5.0 1104.081 1131.408    1159.274  12\n#&gt; row_vec  2.5 1051.353 1064.623    1078.068   7\n\n\n\n11.6.3 Deleting a column and/or row\nExamples:\n\nmat &lt;- mat[, -5] # Remove column\nmat\n#&gt;         year  savings moneymkt certificate\n#&gt; 1        0.0 1000.000 1000.000    1000.000\n#&gt; 2        1.0 1020.000 1025.000    1030.000\n#&gt; 3        2.0 1040.400 1050.625    1060.900\n#&gt; 4        3.0 1061.208 1076.891    1092.727\n#&gt; 5        4.0 1082.432 1103.813    1125.509\n#&gt; 6        5.0 1104.081 1131.408    1159.274\n#&gt; row_vec  2.5 1051.353 1064.623    1078.068\nmat &lt;- mat[-7, ] # Remove row\nmat\n#&gt;   year  savings moneymkt certificate\n#&gt; 1    0 1000.000 1000.000    1000.000\n#&gt; 2    1 1020.000 1025.000    1030.000\n#&gt; 3    2 1040.400 1050.625    1060.900\n#&gt; 4    3 1061.208 1076.891    1092.727\n#&gt; 5    4 1082.432 1103.813    1125.509\n#&gt; 6    5 1104.081 1131.408    1159.274\n\n\n\n11.6.4 Moving a column and/or row\nExamples:\n\nmat &lt;- mat[, c(2:4, 1)] # moving columns\nmat\n#&gt;    savings moneymkt certificate year\n#&gt; 1 1000.000 1000.000    1000.000    0\n#&gt; 2 1020.000 1025.000    1030.000    1\n#&gt; 3 1040.400 1050.625    1060.900    2\n#&gt; 4 1061.208 1076.891    1092.727    3\n#&gt; 5 1082.432 1103.813    1125.509    4\n#&gt; 6 1104.081 1131.408    1159.274    5\n\nmat &lt;- mat[6:1, ] # moving rows\nmat\n#&gt;    savings moneymkt certificate year\n#&gt; 6 1104.081 1131.408    1159.274    5\n#&gt; 5 1082.432 1103.813    1125.509    4\n#&gt; 4 1061.208 1076.891    1092.727    3\n#&gt; 3 1040.400 1050.625    1060.900    2\n#&gt; 2 1020.000 1025.000    1030.000    1\n#&gt; 1 1000.000 1000.000    1000.000    0",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Matrices and Arrays</span>"
    ]
  },
  {
    "objectID": "5-Matrix/5-Matrix.html#matrix-calculation",
    "href": "5-Matrix/5-Matrix.html#matrix-calculation",
    "title": "11  Matrices and Arrays",
    "section": "11.7 Matrix Calculation",
    "text": "11.7 Matrix Calculation\n\n11.7.0.1 Matrix Addition\nExamples:\n\n(A = matrix(1:16, nrow = 4))\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1    5    9   13\n#&gt; [2,]    2    6   10   14\n#&gt; [3,]    3    7   11   15\n#&gt; [4,]    4    8   12   16\n(B = matrix(1:16, nrow = 4, byrow = T))\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1    2    3    4\n#&gt; [2,]    5    6    7    8\n#&gt; [3,]    9   10   11   12\n#&gt; [4,]   13   14   15   16\n\nC = A + B\nC\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    2    7   12   17\n#&gt; [2,]    7   12   17   22\n#&gt; [3,]   12   17   22   27\n#&gt; [4,]   17   22   27   32\n\n\n\n11.7.0.2 Matrix Multiplication\nExamples:\n\n(D = A %*% B)\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]  276  304  332  360\n#&gt; [2,]  304  336  368  400\n#&gt; [3,]  332  368  404  440\n#&gt; [4,]  360  400  440  480\n\n\n\n11.7.0.3 Element-wise Multiplication\nExamples:\n\n(E = A * B)\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1   10   27   52\n#&gt; [2,]   10   36   70  112\n#&gt; [3,]   27   70  121  180\n#&gt; [4,]   52  112  180  256\n\n\n\n11.7.0.4 Outper Product\nExamples:\n\nouter(A, B)\n#&gt; , , 1, 1\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1    5    9   13\n#&gt; [2,]    2    6   10   14\n#&gt; [3,]    3    7   11   15\n#&gt; [4,]    4    8   12   16\n#&gt; \n#&gt; , , 2, 1\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    5   25   45   65\n#&gt; [2,]   10   30   50   70\n#&gt; [3,]   15   35   55   75\n#&gt; [4,]   20   40   60   80\n#&gt; \n#&gt; , , 3, 1\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    9   45   81  117\n#&gt; [2,]   18   54   90  126\n#&gt; [3,]   27   63   99  135\n#&gt; [4,]   36   72  108  144\n#&gt; \n#&gt; , , 4, 1\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   13   65  117  169\n#&gt; [2,]   26   78  130  182\n#&gt; [3,]   39   91  143  195\n#&gt; [4,]   52  104  156  208\n#&gt; \n#&gt; , , 1, 2\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    2   10   18   26\n#&gt; [2,]    4   12   20   28\n#&gt; [3,]    6   14   22   30\n#&gt; [4,]    8   16   24   32\n#&gt; \n#&gt; , , 2, 2\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    6   30   54   78\n#&gt; [2,]   12   36   60   84\n#&gt; [3,]   18   42   66   90\n#&gt; [4,]   24   48   72   96\n#&gt; \n#&gt; , , 3, 2\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   10   50   90  130\n#&gt; [2,]   20   60  100  140\n#&gt; [3,]   30   70  110  150\n#&gt; [4,]   40   80  120  160\n#&gt; \n#&gt; , , 4, 2\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   14   70  126  182\n#&gt; [2,]   28   84  140  196\n#&gt; [3,]   42   98  154  210\n#&gt; [4,]   56  112  168  224\n#&gt; \n#&gt; , , 1, 3\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    3   15   27   39\n#&gt; [2,]    6   18   30   42\n#&gt; [3,]    9   21   33   45\n#&gt; [4,]   12   24   36   48\n#&gt; \n#&gt; , , 2, 3\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    7   35   63   91\n#&gt; [2,]   14   42   70   98\n#&gt; [3,]   21   49   77  105\n#&gt; [4,]   28   56   84  112\n#&gt; \n#&gt; , , 3, 3\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   11   55   99  143\n#&gt; [2,]   22   66  110  154\n#&gt; [3,]   33   77  121  165\n#&gt; [4,]   44   88  132  176\n#&gt; \n#&gt; , , 4, 3\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   15   75  135  195\n#&gt; [2,]   30   90  150  210\n#&gt; [3,]   45  105  165  225\n#&gt; [4,]   60  120  180  240\n#&gt; \n#&gt; , , 1, 4\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    4   20   36   52\n#&gt; [2,]    8   24   40   56\n#&gt; [3,]   12   28   44   60\n#&gt; [4,]   16   32   48   64\n#&gt; \n#&gt; , , 2, 4\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    8   40   72  104\n#&gt; [2,]   16   48   80  112\n#&gt; [3,]   24   56   88  120\n#&gt; [4,]   32   64   96  128\n#&gt; \n#&gt; , , 3, 4\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   12   60  108  156\n#&gt; [2,]   24   72  120  168\n#&gt; [3,]   36   84  132  180\n#&gt; [4,]   48   96  144  192\n#&gt; \n#&gt; , , 4, 4\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   16   80  144  208\n#&gt; [2,]   32   96  160  224\n#&gt; [3,]   48  112  176  240\n#&gt; [4,]   64  128  192  256\n\n\nLet \\(x\\) and \\(y\\) be \\(n\\)-dim vectors, we can use x %*% y or corssprod(x, y) to calculate the inner product; we can use %o% or outer(x, y) to calculate outer product.\n\nExample:\n\n(x = 1:5)\n#&gt; [1] 1 2 3 4 5\n(y = seq(2, 10, by = 2))\n#&gt; [1]  2  4  6  8 10\n\n# inner product\nx %*% y\n#&gt;      [,1]\n#&gt; [1,]  110\n\nt(x) %*% y\n#&gt;      [,1]\n#&gt; [1,]  110\n\ncrossprod(x, y)\n#&gt;      [,1]\n#&gt; [1,]  110\n\n# outer product\n\nx %o% y\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]    2    4    6    8   10\n#&gt; [2,]    4    8   12   16   20\n#&gt; [3,]    6   12   18   24   30\n#&gt; [4,]    8   16   24   32   40\n#&gt; [5,]   10   20   30   40   50\n\nx %*% t(y)\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]    2    4    6    8   10\n#&gt; [2,]    4    8   12   16   20\n#&gt; [3,]    6   12   18   24   30\n#&gt; [4,]    8   16   24   32   40\n#&gt; [5,]   10   20   30   40   50\n\nouter(x, y)\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]    2    4    6    8   10\n#&gt; [2,]    4    8   12   16   20\n#&gt; [3,]    6   12   18   24   30\n#&gt; [4,]    8   16   24   32   40\n#&gt; [5,]   10   20   30   40   50\n\n\n\n11.7.1 Matrix Calculation\n\n11.7.1.1 Matrix Addition\nExamples:\n\n(A = matrix(1:16, nrow = 4))\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1    5    9   13\n#&gt; [2,]    2    6   10   14\n#&gt; [3,]    3    7   11   15\n#&gt; [4,]    4    8   12   16\n(B = matrix(1:16, nrow = 4, byrow = T))\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1    2    3    4\n#&gt; [2,]    5    6    7    8\n#&gt; [3,]    9   10   11   12\n#&gt; [4,]   13   14   15   16\n\nC = A + B\nC\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    2    7   12   17\n#&gt; [2,]    7   12   17   22\n#&gt; [3,]   12   17   22   27\n#&gt; [4,]   17   22   27   32\n\n\n\n11.7.1.2 Matrix Multiplication\nExamples:\n\n(D = A %*% B)\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]  276  304  332  360\n#&gt; [2,]  304  336  368  400\n#&gt; [3,]  332  368  404  440\n#&gt; [4,]  360  400  440  480\n\n\n\n11.7.1.3 Element-wise Multiplication\nExamples:\n\n(E = A * B)\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1   10   27   52\n#&gt; [2,]   10   36   70  112\n#&gt; [3,]   27   70  121  180\n#&gt; [4,]   52  112  180  256\n\n\n\n11.7.1.4 Outper Product\nExamples:\n\nouter(A, B)\n#&gt; , , 1, 1\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1    5    9   13\n#&gt; [2,]    2    6   10   14\n#&gt; [3,]    3    7   11   15\n#&gt; [4,]    4    8   12   16\n#&gt; \n#&gt; , , 2, 1\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    5   25   45   65\n#&gt; [2,]   10   30   50   70\n#&gt; [3,]   15   35   55   75\n#&gt; [4,]   20   40   60   80\n#&gt; \n#&gt; , , 3, 1\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    9   45   81  117\n#&gt; [2,]   18   54   90  126\n#&gt; [3,]   27   63   99  135\n#&gt; [4,]   36   72  108  144\n#&gt; \n#&gt; , , 4, 1\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   13   65  117  169\n#&gt; [2,]   26   78  130  182\n#&gt; [3,]   39   91  143  195\n#&gt; [4,]   52  104  156  208\n#&gt; \n#&gt; , , 1, 2\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    2   10   18   26\n#&gt; [2,]    4   12   20   28\n#&gt; [3,]    6   14   22   30\n#&gt; [4,]    8   16   24   32\n#&gt; \n#&gt; , , 2, 2\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    6   30   54   78\n#&gt; [2,]   12   36   60   84\n#&gt; [3,]   18   42   66   90\n#&gt; [4,]   24   48   72   96\n#&gt; \n#&gt; , , 3, 2\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   10   50   90  130\n#&gt; [2,]   20   60  100  140\n#&gt; [3,]   30   70  110  150\n#&gt; [4,]   40   80  120  160\n#&gt; \n#&gt; , , 4, 2\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   14   70  126  182\n#&gt; [2,]   28   84  140  196\n#&gt; [3,]   42   98  154  210\n#&gt; [4,]   56  112  168  224\n#&gt; \n#&gt; , , 1, 3\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    3   15   27   39\n#&gt; [2,]    6   18   30   42\n#&gt; [3,]    9   21   33   45\n#&gt; [4,]   12   24   36   48\n#&gt; \n#&gt; , , 2, 3\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    7   35   63   91\n#&gt; [2,]   14   42   70   98\n#&gt; [3,]   21   49   77  105\n#&gt; [4,]   28   56   84  112\n#&gt; \n#&gt; , , 3, 3\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   11   55   99  143\n#&gt; [2,]   22   66  110  154\n#&gt; [3,]   33   77  121  165\n#&gt; [4,]   44   88  132  176\n#&gt; \n#&gt; , , 4, 3\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   15   75  135  195\n#&gt; [2,]   30   90  150  210\n#&gt; [3,]   45  105  165  225\n#&gt; [4,]   60  120  180  240\n#&gt; \n#&gt; , , 1, 4\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    4   20   36   52\n#&gt; [2,]    8   24   40   56\n#&gt; [3,]   12   28   44   60\n#&gt; [4,]   16   32   48   64\n#&gt; \n#&gt; , , 2, 4\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    8   40   72  104\n#&gt; [2,]   16   48   80  112\n#&gt; [3,]   24   56   88  120\n#&gt; [4,]   32   64   96  128\n#&gt; \n#&gt; , , 3, 4\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   12   60  108  156\n#&gt; [2,]   24   72  120  168\n#&gt; [3,]   36   84  132  180\n#&gt; [4,]   48   96  144  192\n#&gt; \n#&gt; , , 4, 4\n#&gt; \n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]   16   80  144  208\n#&gt; [2,]   32   96  160  224\n#&gt; [3,]   48  112  176  240\n#&gt; [4,]   64  128  192  256\n\n\nLet \\(x\\) and \\(y\\) be \\(n\\)-dim vectors, we can use x %*% y or corssprod(x, y) to calculate the inner product; we can use %o% or outer(x, y) to calculate outer product.\n\nExample:\n\n(x = 1:5)\n#&gt; [1] 1 2 3 4 5\n(y = seq(2, 10, by = 2))\n#&gt; [1]  2  4  6  8 10\n\n# inner product\nx %*% y\n#&gt;      [,1]\n#&gt; [1,]  110\n\nt(x) %*% y\n#&gt;      [,1]\n#&gt; [1,]  110\n\ncrossprod(x, y)\n#&gt;      [,1]\n#&gt; [1,]  110\n\n# outer product\n\nx %o% y\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]    2    4    6    8   10\n#&gt; [2,]    4    8   12   16   20\n#&gt; [3,]    6   12   18   24   30\n#&gt; [4,]    8   16   24   32   40\n#&gt; [5,]   10   20   30   40   50\n\nx %*% t(y)\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]    2    4    6    8   10\n#&gt; [2,]    4    8   12   16   20\n#&gt; [3,]    6   12   18   24   30\n#&gt; [4,]    8   16   24   32   40\n#&gt; [5,]   10   20   30   40   50\n\nouter(x, y)\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]    2    4    6    8   10\n#&gt; [2,]    4    8   12   16   20\n#&gt; [3,]    6   12   18   24   30\n#&gt; [4,]    8   16   24   32   40\n#&gt; [5,]   10   20   30   40   50\n\n\n\n11.7.1.5 Inverse of Matrix\nExample:\n\nM &lt;- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 10), nrow = 3, byrow = T)\n\nsolve(M)\n#&gt;            [,1]      [,2] [,3]\n#&gt; [1,] -0.6666667 -1.333333    1\n#&gt; [2,] -0.6666667  3.666667   -2\n#&gt; [3,]  1.0000000 -2.000000    1",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Matrices and Arrays</span>"
    ]
  },
  {
    "objectID": "Quiz5/Quiz5.html",
    "href": "Quiz5/Quiz5.html",
    "title": "12  Quiz 5 Instructions",
    "section": "",
    "text": "12.1 Question 1\n[4pts] Use matrix() to create a matrix mat1 (see below) from the R built-in constant vector month.abb. Use the function colnames() to add the standard calendar quarters that make up the year, that is, add the column names Q1, Q2, Q3, Q4. Add 1st, 2nd, 3rd as row names.\n#&gt;     Q1    Q2    Q3    Q4   \n#&gt; 1st \"Jan\" \"Apr\" \"Jul\" \"Oct\"\n#&gt; 2nd \"Feb\" \"May\" \"Aug\" \"Nov\"\n#&gt; 3rd \"Mar\" \"Jun\" \"Sep\" \"Dec\"",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Quiz 5 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz5/Quiz5.html#question-2",
    "href": "Quiz5/Quiz5.html#question-2",
    "title": "12  Quiz 5 Instructions",
    "section": "12.2 Question 2",
    "text": "12.2 Question 2\n[3pts] Create a matrix as below and denote it as mat2.\n\n#&gt;      [,1] [,2]\n#&gt; [1,]    1    1\n#&gt; [2,]    1    2\n#&gt; [3,]    1    3\n#&gt; [4,]    2    1\n#&gt; [5,]    2    2\n#&gt; [6,]    2    3",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Quiz 5 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz5/Quiz5.html#question-3",
    "href": "Quiz5/Quiz5.html#question-3",
    "title": "12  Quiz 5 Instructions",
    "section": "12.3 Question 3",
    "text": "12.3 Question 3\nAssume the matrix m is defined as follows. We find that m is a matrix, not a vector, as shown below.\n\nm &lt;- matrix(c(1,2,3,4,5,6), nrow=2)\nis.matrix(m) # is.matrix() tests if the object is a matrix\n#&gt; [1] TRUE\nis.vector(m) # is.vector() tests if the object is a vector\n#&gt; [1] FALSE\n\n\n[1pt] Check the dimension of m using dim() function. Save the result to object d.\n\n\n\n\n\n\n[1pt] Define m1 the same as m above. Then Remove the dimension attribute of m1 by using dim(m1) &lt;- NULL. Then check if m1 is a matrix? a vector?\n\n\n\n\n\n\n\n\n[1pt] Let m2 &lt;- c(1,2,3,4,5,6). Add the dimension attribute to m2 by using dim(m2) &lt;- c(2, 3). Then check if m2 is a matrix? a vector?",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Quiz 5 Instructions</span>"
    ]
  },
  {
    "objectID": "Lab2/Lab2.html",
    "href": "Lab2/Lab2.html",
    "title": "13  Lab 2",
    "section": "",
    "text": "13.1 Question 1\nLet \\(X\\) be a matrix with column names. For instance:\nX &lt;- matrix(1:12, byrow=TRUE, nrow=3)      # example matrix\ndimnames(X)[[2]] &lt;- c(\"a\", \"b\", \"c\", \"d\")  # set column names\nprint(X)\n#&gt;      a  b  c  d\n#&gt; [1,] 1  2  3  4\n#&gt; [2,] 5  6  7  8\n#&gt; [3,] 9 10 11 12",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Lab 2</span>"
    ]
  },
  {
    "objectID": "Lab2/Lab2.html#question-1",
    "href": "Lab2/Lab2.html#question-1",
    "title": "13  Lab 2",
    "section": "",
    "text": "[5pts] Please use ncol instead of nrow to create the matrix. Use colnames() instead of dimnames() to set the column names.\nExplain the meaning of the following expressions involving matrix subsetting. Note that a few of them are invalid. For example,\n\n\nExample 1\n\n\nX[1,]\n#&gt; a b c d \n#&gt; 1 2 3 4\n\nMeaning: the first row of X\n\n\n\n\n\nExample 2\n\nX[, c(1, \"c\")]\n\nThe expression above is invalid. The correct expression should be as follows, which extract the first and third columns.\n\nX[, c(\"a\", \"c\")]\n#&gt;      a  c\n#&gt; [1,] 1  3\n#&gt; [2,] 5  7\n#&gt; [3,] 9 11\n\n# OR\nX[, c(1, 3)]\n#&gt;      a  c\n#&gt; [1,] 1  3\n#&gt; [2,] 5  7\n#&gt; [3,] 9 11\n\n\n\n\n[10pts] Please work on the questions below.\n\nX[2, ]\n\nX[, 3]\n\nX[3, 1]\n\nX[, \"a\"]\n\nX[, c(\"a\", \"b\", \"c\")]\n\nX[, -2]\n\nX[X[,1] &gt; 5, ]\n\nX[X[,1]&gt;=5 & X[,1]&lt;=10, ]\n\nX[X[,1]&gt;=5 & X[,1]&lt;=10, c(\"a\", \"b\", \"c\")]\n\nX[, c(1, \"b\", \"d\")]\n\n\n[5pts] Use the row-bind function rbind() to add a new row 13, 14, 15, 16 to \\(X\\) (still denote as \\(X\\) after adding) as follows.\n\n\n#&gt;       a  b  c  d\n#&gt; [1,]  1  2  3  4\n#&gt; [2,]  5  6  7  8\n#&gt; [3,]  9 10 11 12\n#&gt; [4,] 13 14 15 16\n\n\n[5pts] Use function rowMeans() to find the mean of each row, denote the vector as rmeans. Use the column-bind function cbind() to add rmeans to \\(X\\) in (c).",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Lab 2</span>"
    ]
  },
  {
    "objectID": "Lab2/Lab2.html#question-2",
    "href": "Lab2/Lab2.html#question-2",
    "title": "13  Lab 2",
    "section": "13.2 Question 2",
    "text": "13.2 Question 2\n[5pts] Create a matrix like:\n(Please note the NA and 0 in the matrix, which don’t follow the pattern as the other elements. )\n\n#&gt;      [,1] [,2] [,3] [,4] [,5] [,6]\n#&gt; [1,]    1   21   41   61   81  101\n#&gt; [2,]    5   25   45   65   85  105\n#&gt; [3,]    9   NA   49   69   89  109\n#&gt; [4,]   13   33   53   73   93    0\n#&gt; [5,]   17   37   57   77   97  117",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Lab 2</span>"
    ]
  },
  {
    "objectID": "Lab2/Lab2.html#question-3",
    "href": "Lab2/Lab2.html#question-3",
    "title": "13  Lab 2",
    "section": "13.3 Question 3",
    "text": "13.3 Question 3\nGiven the vector of months below, how can we identify if there are any typos in it? Find the answer by completing the following questions.\n\ny &lt;- c(\n  \"Jan\", \"Feb\", \"Feb\", \"Jan\", \"Jul\", \"Oct\", \"Apr\", \"Feb\",\n  \"Jun\", \"Jul\", \"Dec\", \"Dec\", \"Mar\", \"Dec\", \"Aug\", \"Sep\",\n  \"Aug\", \"Sep\", \"Dec\", \"Nov\", \"Sep\", \"Feb\", \"May\", \"Nov\",\n  \"Oct\", \"Jun\", \"Sep\", \"Oct\", \"Aug\", \"Nov\", \"May\", \"May\",\n  \"Jul\", \"May\", \"Sep\", \"Oct\", \"Jul\", \"Mar\", \"Aug\", \"Mar\",\n  \"Mar\", \"Jan\", \"Aug\", \"Jun\", \"Oct\", \"Apr\", \"Dec\", \"Dec\",\n  \"Oct\", \"Sep\", \"Oct\", \"Aug\", \"Feb\", \"Nov\", \"Dec\", \"Sep\",\n  \"May\", \"Sep\", \"Feb\", \"Dec\", \"Oct\", \"Dec\", \"Aug\", \"Dec\",\n  \"Nov\", \"Sep\", \"Mar\", \"Nov\", \"Dec\", \"May\", \"Jul\", \"Nov\",\n  \"Dec\", \"Dec\", \"Mar\", \"Oct\", \"Nov\", \"Sep\", \"Dec\", \"May\",\n  \"Jan\", \"Oct\", \"Jul\", \"Jun\", \"Oct\", \"Dec\", \"Jul\", \"Jun\",\n  \"Mar\", \"Jan\", \"Aug\", \"Mar\", \"Dec\", \"Feb\", \"Jul\", \"May\",\n  \"Jul\", \"Oct\", \"Jan\", \"Nov\", \"Aug\", \"Jan\", \"Nov\", \"Jun\",\n  \"Dec\", \"Jul\", \"Mar\", \"May\", \"Feb\", \"May\", \"Jan\", \"Oct\",\n  \"May\", \"Sep\", \"Jan\", \"Aug\", \"Jul\", \"Feb\", \"Nov\", \"Feb\",\n  \"Oct\", \"Apr\", \"Jan\", \"Jun\", \"Aug\", \"Jan\", \"Jun\", \"Nov\",\n  \"Ju1\", \"Sep\", \"May\", \"Sep\", \"Aug\", \"Aug\", \"Feb\", \"Feb\",\n  \"Jun\", \"Jun\", \"Sep\", \"Apr\", \"Dec\", \"Mar\", \"Jan\", \"Jun\",\n  \"Feb\", \"Jun\", \"Oct\", \"Nov\", \"Jul\", \"May\", \"Oct\", \"Jul\",\n  \"Nov\", \"Mar\", \"Aug\", \"Mar\", \"Ju1\", \"Feb\", \"Sep\", \"May\",\n  \"Sep\", \"Sep\", \"Sep\", \"Mar\", \"Feb\", \"Dec\", \"Nov\", \"Mar\",\n  \"Apr\", \"Jan\", \"Jan\", \"Aug\", \"Apr\", \"Sep\", \"Jul\", \"Oct\",\n  \"Dec\", \"Oct\", \"Jun\", \"Jun\", \"Dec\", \"Apr\", \"Oct\", \"Mar\",\n  \"Jan\", \"Dec\", \"Jul\", \"Jun\", \"May\", \"Mar\", \"Sep\", \"Mar\",\n  \"Jan\", \"Jul\", \"Dec\", \"Apr\", \"Sep\", \"Jul\", \"Jun\", \"Oct\"\n)\n\n\n[5pts] Step 1: Create a vector month_levles with the values from month.abb.\n[5pts] Step 2: Encode the vector y into a factor y_f, by using month_levels as the levels for the factor.\n[5pts] Step 3: Find how many NA’s in the vector y_f which is a factor. Store the value in N_NAs (Hint: You can use the is.na() and sum() functions to determine how many elements in y are not part of month.abb.)\n[5pts] Step 4: Please find what the typo(s) were in y by creating a vector typos storing the typo(s).\n[5pts] Step 5: Modify the typos in y and y_f.\n[5pts] Step 6: Sort the vectors y and y_f separately using the sort() function. Discuss the differences in the sorted results.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Lab 2</span>"
    ]
  },
  {
    "objectID": "6-Lists/6-Lists.html",
    "href": "6-Lists/6-Lists.html",
    "title": "14  Lists",
    "section": "",
    "text": "14.1 Reading Assignments",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "6-Lists/6-Lists.html#reading-assignments",
    "href": "6-Lists/6-Lists.html#reading-assignments",
    "title": "14  Lists",
    "section": "",
    "text": "Please make sure you’ve read the following sections in the textbook: R Coding Basics, https://www.gastonsanchez.com/R-coding-basics/\n\nSection 8. Lists",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "6-Lists/6-Lists.html#lists-vs-vectors",
    "href": "6-Lists/6-Lists.html#lists-vs-vectors",
    "title": "14  Lists",
    "section": "14.2 Lists vs Vectors",
    "text": "14.2 Lists vs Vectors\n\nList vs Vector\nBoth are one-dimension\nNon-atomic (allow mixed data type) vs Atomic (same data type)\n\nLists is non-atomic and allow combining elements of different data types without them being coerced.\nVector is atomic and doesn’t allow elements of different data types in one vector.\n\n\nExample:\nVector cannot handle mixed data type \\(\\Rightarrow\\) Coercion\n\n### c() is used to create vector\n\ninvestment1_specs = c(\n  \"deposit\" = 1000,      # double\n  \"rate\" = 0.02,         # double\n  \"years\" = 4L,          # integer\n  \"account\" = \"savings\"  # character\n)\ninvestment1_specs\n#&gt;   deposit      rate     years   account \n#&gt;    \"1000\"    \"0.02\"       \"4\" \"savings\"\n\nList can allow mixed data type.\n\n### The only difference is list() is used to create list\n\nspecs1 = list(\n  \"deposit\" = 1000,      # double\n  \"rate\" = 0.02,         # double\n  \"years\" = 4L,          # integer\n  \"account\" = \"savings\"  # character\n)\n\nspecs1\n#&gt; $deposit\n#&gt; [1] 1000\n#&gt; \n#&gt; $rate\n#&gt; [1] 0.02\n#&gt; \n#&gt; $years\n#&gt; [1] 4\n#&gt; \n#&gt; $account\n#&gt; [1] \"savings\"",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "6-Lists/6-Lists.html#create-lists-list",
    "href": "6-Lists/6-Lists.html#create-lists-list",
    "title": "14  Lists",
    "section": "14.3 Create Lists – list()",
    "text": "14.3 Create Lists – list()\nYou are strongly recommended to give names to the elements of a list.\nExample 8.3\n\nvec1 &lt;- 1:3\nvec2 &lt;- 4:6\nvec3 &lt;- 7:9\n\n\nList with unnamed elements\n\nExample:\n\nlist_index &lt;- list(vec1, vec2, vec3)\nlist_index\n#&gt; [[1]]\n#&gt; [1] 1 2 3\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 4 5 6\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 7 8 9\n\n\nList with elements names\n\nExample:\n\nlist_names &lt;- list(vec1 = vec1, vec2 = vec2, vec3 = vec3)\n# Equivalently\n# list_names &lt;- list(\"vec1\" = vec1, \"vec2\" = vec2, \"vec3\" = vec3)\nlist_names\n#&gt; $vec1\n#&gt; [1] 1 2 3\n#&gt; \n#&gt; $vec2\n#&gt; [1] 4 5 6\n#&gt; \n#&gt; $vec3\n#&gt; [1] 7 8 9",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "6-Lists/6-Lists.html#manipulating-lists",
    "href": "6-Lists/6-Lists.html#manipulating-lists",
    "title": "14  Lists",
    "section": "14.4 Manipulating Lists",
    "text": "14.4 Manipulating Lists\n\nList with unnamed elements \\(\\rightarrow\\) Use index [[]]\n\nExample:\n\nlist_index[[2]]\n#&gt; [1] 4 5 6\n\n\nList with elements names \\(\\rightarrow\\) Use $ (recommended) or index [[]]\n\nExample:\n\nlist_names$vec2\n#&gt; [1] 4 5 6\n\n\n# We can still use index [[]] for lists with elements names\nlist_names[[2]]\n#&gt; [1] 4 5 6\n\n\n14.4.0.1 Further manipulate the elements in the vector vec2\n\nlist_names$vec2[3] # Third element in vec2\n#&gt; [1] 6\nlist_names[[2]][3]\n#&gt; [1] 6\n\n\n\n14.4.0.2 Single Bracket [] vs Double Bracket for list\n\nlist_names[2]\n#&gt; $vec2\n#&gt; [1] 4 5 6\nlist_names[[2]]\n#&gt; [1] 4 5 6",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "6-Lists/6-Lists.html#adding-new-elements",
    "href": "6-Lists/6-Lists.html#adding-new-elements",
    "title": "14  Lists",
    "section": "14.5 Adding New Elements",
    "text": "14.5 Adding New Elements\n\n14.5.1 Using index [[]]\n\nlist_names[[4]] &lt;- c(\"A\", \"B\", \"C\")\nlist_names\n#&gt; $vec1\n#&gt; [1] 1 2 3\n#&gt; \n#&gt; $vec2\n#&gt; [1] 4 5 6\n#&gt; \n#&gt; $vec3\n#&gt; [1] 7 8 9\n#&gt; \n#&gt; [[4]]\n#&gt; [1] \"A\" \"B\" \"C\"\n\n\n\n14.5.2 Using names\n\nlist_names$vec5 &lt;- c(TRUE, FALSE, TRUE)\nlist_names\n#&gt; $vec1\n#&gt; [1] 1 2 3\n#&gt; \n#&gt; $vec2\n#&gt; [1] 4 5 6\n#&gt; \n#&gt; $vec3\n#&gt; [1] 7 8 9\n#&gt; \n#&gt; [[4]]\n#&gt; [1] \"A\" \"B\" \"C\"\n#&gt; \n#&gt; $vec5\n#&gt; [1]  TRUE FALSE  TRUE",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "6-Lists/6-Lists.html#removing-elements",
    "href": "6-Lists/6-Lists.html#removing-elements",
    "title": "14  Lists",
    "section": "14.6 Removing Elements",
    "text": "14.6 Removing Elements\n\nUnnamed\n\n\nlist_names[[4]] &lt;- NULL\nlist_names\n#&gt; $vec1\n#&gt; [1] 1 2 3\n#&gt; \n#&gt; $vec2\n#&gt; [1] 4 5 6\n#&gt; \n#&gt; $vec3\n#&gt; [1] 7 8 9\n#&gt; \n#&gt; $vec5\n#&gt; [1]  TRUE FALSE  TRUE\n\n\nNamed\n\n\nlist_names$vec5 &lt;- NULL\nlist_names\n#&gt; $vec1\n#&gt; [1] 1 2 3\n#&gt; \n#&gt; $vec2\n#&gt; [1] 4 5 6\n#&gt; \n#&gt; $vec3\n#&gt; [1] 7 8 9",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "6-Lists/6-Lists.html#generic-vector",
    "href": "6-Lists/6-Lists.html#generic-vector",
    "title": "14  Lists",
    "section": "14.7 Generic Vector",
    "text": "14.7 Generic Vector\nChapter 6 Generic Vectors in Atomic R https://book.stat385.org/generic-vectors.html\n\nLists = generic vectors \\(\\quad \\leftarrow \\quad\\) is.list()\nVectors = atomic vectors\\(\\quad \\leftarrow \\quad\\) is.atomic()\n\n\n14.7.0.1 c() function can be used to create lists?\nIf coercion to an atomic vector is not possible, the result will be a list.\nExample:\n\nlist(1)\n#&gt; [[1]]\n#&gt; [1] 1\n\ntypeof(list(1))\n#&gt; [1] \"list\"\n\nc(list(1), 1)\n#&gt; [[1]]\n#&gt; [1] 1\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 1\ntypeof(c(list(1), 1))\n#&gt; [1] \"list\"\nis.list(c(list(1),1))\n#&gt; [1] TRUE\n\n\n\n14.7.0.2 list of a list\n\nlst &lt;- list(\n  a = 1:10,\n  b = \"Hello, World!\",\n  d = list(a = 1, b = \"z\")\n)\n\ntypeof(lst)\n#&gt; [1] \"list\"\nlst\n#&gt; $a\n#&gt;  [1]  1  2  3  4  5  6  7  8  9 10\n#&gt; \n#&gt; $b\n#&gt; [1] \"Hello, World!\"\n#&gt; \n#&gt; $d\n#&gt; $d$a\n#&gt; [1] 1\n#&gt; \n#&gt; $d$b\n#&gt; [1] \"z\"\n\n\n\n14.7.0.3 unlist() force a list to be an atomic vector\nNecessary coercion may take place\n\nunlist(lst)\n#&gt;              a1              a2              a3              a4              a5 \n#&gt;             \"1\"             \"2\"             \"3\"             \"4\"             \"5\" \n#&gt;              a6              a7              a8              a9             a10 \n#&gt;             \"6\"             \"7\"             \"8\"             \"9\"            \"10\" \n#&gt;               b             d.a             d.b \n#&gt; \"Hello, World!\"             \"1\"             \"z\"\n\n\nbar = list(a = 1:10,\n           b = \"Hello, World!\",\n           c = log,\n           d = list(a = 1, b = \"z\"))\nunlist(bar)\n#&gt; $a1\n#&gt; [1] 1\n#&gt; \n#&gt; $a2\n#&gt; [1] 2\n#&gt; \n#&gt; $a3\n#&gt; [1] 3\n#&gt; \n#&gt; $a4\n#&gt; [1] 4\n#&gt; \n#&gt; $a5\n#&gt; [1] 5\n#&gt; \n#&gt; $a6\n#&gt; [1] 6\n#&gt; \n#&gt; $a7\n#&gt; [1] 7\n#&gt; \n#&gt; $a8\n#&gt; [1] 8\n#&gt; \n#&gt; $a9\n#&gt; [1] 9\n#&gt; \n#&gt; $a10\n#&gt; [1] 10\n#&gt; \n#&gt; $b\n#&gt; [1] \"Hello, World!\"\n#&gt; \n#&gt; $c\n#&gt; function (x, base = exp(1))  .Primitive(\"log\")\n#&gt; \n#&gt; $d.a\n#&gt; [1] 1\n#&gt; \n#&gt; $d.b\n#&gt; [1] \"z\"",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "7-Dataframes/7-Dataframes.html",
    "href": "7-Dataframes/7-Dataframes.html",
    "title": "15  Data Frames",
    "section": "",
    "text": "15.1 Reading Assignments",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Frames</span>"
    ]
  },
  {
    "objectID": "7-Dataframes/7-Dataframes.html#reading-assignments",
    "href": "7-Dataframes/7-Dataframes.html#reading-assignments",
    "title": "15  Data Frames",
    "section": "",
    "text": "Please make sure you’ve read the following sections in the textbook: R Coding Basics, https://www.gastonsanchez.com/R-coding-basics/\n\nSection 9. Data Frames",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Frames</span>"
    ]
  },
  {
    "objectID": "7-Dataframes/7-Dataframes.html#why-data-frames",
    "href": "7-Dataframes/7-Dataframes.html#why-data-frames",
    "title": "15  Data Frames",
    "section": "15.2 Why Data Frames?",
    "text": "15.2 Why Data Frames?\n\nLearning how to manipulate data frames is among the most important data computing skills in R.\nTwo primary approaches for manipulating data frames:\n\nIn base R, i.e. the “traditional” or “classic” approach \\(\\Leftarrow\\) covered in this chapter\nIn tidyverse, i.e. a modern version \\(\\Leftarrow\\) Discussed later in this class",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Frames</span>"
    ]
  },
  {
    "objectID": "7-Dataframes/7-Dataframes.html#data-frames",
    "href": "7-Dataframes/7-Dataframes.html#data-frames",
    "title": "15  Data Frames",
    "section": "15.3 Data Frames",
    "text": "15.3 Data Frames\n\nA data frame is a special type of R list.\nIn most cases, a data frame is internally stored as a list of vectors or factors, columnwise.\n\nExample:\n\n#&gt;                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n#&gt; Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n#&gt; Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n#&gt; Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n#&gt; Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n#&gt; Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n#&gt; Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n#&gt; Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n#&gt; Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n#&gt; Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n#&gt; Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n#&gt; Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n#&gt; Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n#&gt; Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\n#&gt; Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n#&gt; Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\n#&gt; Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n#&gt; Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n#&gt; Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\n#&gt; Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n#&gt; Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n#&gt; Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\n#&gt; Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n#&gt; AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\n#&gt; Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\n#&gt; Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n#&gt; Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\n#&gt; Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n#&gt; Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n#&gt; Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n#&gt; Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n#&gt; Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n#&gt; Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Frames</span>"
    ]
  },
  {
    "objectID": "7-Dataframes/7-Dataframes.html#dimension-of-data-frames",
    "href": "7-Dataframes/7-Dataframes.html#dimension-of-data-frames",
    "title": "15  Data Frames",
    "section": "15.4 Dimension of Data Frames",
    "text": "15.4 Dimension of Data Frames\nCheck the Dimension of mtcars\n\ndim(mtcars)\n#&gt; [1] 32 11\nnrow(mtcars)\n#&gt; [1] 32\nncol(mtcars)\n#&gt; [1] 11\n\nThere are 32 rows and 11 columns in mtcars.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Frames</span>"
    ]
  },
  {
    "objectID": "7-Dataframes/7-Dataframes.html#structure",
    "href": "7-Dataframes/7-Dataframes.html#structure",
    "title": "15  Data Frames",
    "section": "15.5 Structure",
    "text": "15.5 Structure\nShow the structure or summary of mtcars\n\nsummary(mtcars)\n#&gt;       mpg             cyl             disp             hp       \n#&gt;  Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n#&gt;  1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n#&gt;  Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n#&gt;  Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n#&gt;  3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n#&gt;  Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n#&gt;       drat             wt             qsec             vs        \n#&gt;  Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n#&gt;  1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n#&gt;  Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n#&gt;  Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n#&gt;  3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n#&gt;  Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n#&gt;        am              gear            carb      \n#&gt;  Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n#&gt;  1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n#&gt;  Median :0.0000   Median :4.000   Median :2.000  \n#&gt;  Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n#&gt;  3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n#&gt;  Max.   :1.0000   Max.   :5.000   Max.   :8.000\nstr(mtcars)\n#&gt; 'data.frame':    32 obs. of  11 variables:\n#&gt;  $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n#&gt;  $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n#&gt;  $ disp: num  160 160 108 258 360 ...\n#&gt;  $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n#&gt;  $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n#&gt;  $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n#&gt;  $ qsec: num  16.5 17 18.6 19.4 17 ...\n#&gt;  $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n#&gt;  $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n#&gt;  $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n#&gt;  $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\nattributes(mtcars)\n#&gt; $names\n#&gt;  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n#&gt; [11] \"carb\"\n#&gt; \n#&gt; $row.names\n#&gt;  [1] \"Mazda RX4\"           \"Mazda RX4 Wag\"       \"Datsun 710\"         \n#&gt;  [4] \"Hornet 4 Drive\"      \"Hornet Sportabout\"   \"Valiant\"            \n#&gt;  [7] \"Duster 360\"          \"Merc 240D\"           \"Merc 230\"           \n#&gt; [10] \"Merc 280\"            \"Merc 280C\"           \"Merc 450SE\"         \n#&gt; [13] \"Merc 450SL\"          \"Merc 450SLC\"         \"Cadillac Fleetwood\" \n#&gt; [16] \"Lincoln Continental\" \"Chrysler Imperial\"   \"Fiat 128\"           \n#&gt; [19] \"Honda Civic\"         \"Toyota Corolla\"      \"Toyota Corona\"      \n#&gt; [22] \"Dodge Challenger\"    \"AMC Javelin\"         \"Camaro Z28\"         \n#&gt; [25] \"Pontiac Firebird\"    \"Fiat X1-9\"           \"Porsche 914-2\"      \n#&gt; [28] \"Lotus Europa\"        \"Ford Pantera L\"      \"Ferrari Dino\"       \n#&gt; [31] \"Maserati Bora\"       \"Volvo 142E\"         \n#&gt; \n#&gt; $class\n#&gt; [1] \"data.frame\"",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Frames</span>"
    ]
  },
  {
    "objectID": "7-Dataframes/7-Dataframes.html#names",
    "href": "7-Dataframes/7-Dataframes.html#names",
    "title": "15  Data Frames",
    "section": "15.6 Names",
    "text": "15.6 Names\n\n15.6.1 Column Names\n\nnames(mtcars)\n#&gt;  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n#&gt; [11] \"carb\"\ncolnames(mtcars)\n#&gt;  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n#&gt; [11] \"carb\"\n\n\n\n15.6.2 Row Names\n\nrownames(mtcars)\n#&gt;  [1] \"Mazda RX4\"           \"Mazda RX4 Wag\"       \"Datsun 710\"         \n#&gt;  [4] \"Hornet 4 Drive\"      \"Hornet Sportabout\"   \"Valiant\"            \n#&gt;  [7] \"Duster 360\"          \"Merc 240D\"           \"Merc 230\"           \n#&gt; [10] \"Merc 280\"            \"Merc 280C\"           \"Merc 450SE\"         \n#&gt; [13] \"Merc 450SL\"          \"Merc 450SLC\"         \"Cadillac Fleetwood\" \n#&gt; [16] \"Lincoln Continental\" \"Chrysler Imperial\"   \"Fiat 128\"           \n#&gt; [19] \"Honda Civic\"         \"Toyota Corolla\"      \"Toyota Corona\"      \n#&gt; [22] \"Dodge Challenger\"    \"AMC Javelin\"         \"Camaro Z28\"         \n#&gt; [25] \"Pontiac Firebird\"    \"Fiat X1-9\"           \"Porsche 914-2\"      \n#&gt; [28] \"Lotus Europa\"        \"Ford Pantera L\"      \"Ferrari Dino\"       \n#&gt; [31] \"Maserati Bora\"       \"Volvo 142E\"\n\n\n\n15.6.3 Both Column and Row Names\n\ndimnames(mtcars)\n#&gt; [[1]]\n#&gt;  [1] \"Mazda RX4\"           \"Mazda RX4 Wag\"       \"Datsun 710\"         \n#&gt;  [4] \"Hornet 4 Drive\"      \"Hornet Sportabout\"   \"Valiant\"            \n#&gt;  [7] \"Duster 360\"          \"Merc 240D\"           \"Merc 230\"           \n#&gt; [10] \"Merc 280\"            \"Merc 280C\"           \"Merc 450SE\"         \n#&gt; [13] \"Merc 450SL\"          \"Merc 450SLC\"         \"Cadillac Fleetwood\" \n#&gt; [16] \"Lincoln Continental\" \"Chrysler Imperial\"   \"Fiat 128\"           \n#&gt; [19] \"Honda Civic\"         \"Toyota Corolla\"      \"Toyota Corona\"      \n#&gt; [22] \"Dodge Challenger\"    \"AMC Javelin\"         \"Camaro Z28\"         \n#&gt; [25] \"Pontiac Firebird\"    \"Fiat X1-9\"           \"Porsche 914-2\"      \n#&gt; [28] \"Lotus Europa\"        \"Ford Pantera L\"      \"Ferrari Dino\"       \n#&gt; [31] \"Maserati Bora\"       \"Volvo 142E\"         \n#&gt; \n#&gt; [[2]]\n#&gt;  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n#&gt; [11] \"carb\"\nattributes(mtcars)\n#&gt; $names\n#&gt;  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n#&gt; [11] \"carb\"\n#&gt; \n#&gt; $row.names\n#&gt;  [1] \"Mazda RX4\"           \"Mazda RX4 Wag\"       \"Datsun 710\"         \n#&gt;  [4] \"Hornet 4 Drive\"      \"Hornet Sportabout\"   \"Valiant\"            \n#&gt;  [7] \"Duster 360\"          \"Merc 240D\"           \"Merc 230\"           \n#&gt; [10] \"Merc 280\"            \"Merc 280C\"           \"Merc 450SE\"         \n#&gt; [13] \"Merc 450SL\"          \"Merc 450SLC\"         \"Cadillac Fleetwood\" \n#&gt; [16] \"Lincoln Continental\" \"Chrysler Imperial\"   \"Fiat 128\"           \n#&gt; [19] \"Honda Civic\"         \"Toyota Corolla\"      \"Toyota Corona\"      \n#&gt; [22] \"Dodge Challenger\"    \"AMC Javelin\"         \"Camaro Z28\"         \n#&gt; [25] \"Pontiac Firebird\"    \"Fiat X1-9\"           \"Porsche 914-2\"      \n#&gt; [28] \"Lotus Europa\"        \"Ford Pantera L\"      \"Ferrari Dino\"       \n#&gt; [31] \"Maserati Bora\"       \"Volvo 142E\"         \n#&gt; \n#&gt; $class\n#&gt; [1] \"data.frame\"",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Frames</span>"
    ]
  },
  {
    "objectID": "7-Dataframes/7-Dataframes.html#sample",
    "href": "7-Dataframes/7-Dataframes.html#sample",
    "title": "15  Data Frames",
    "section": "15.7 Sample",
    "text": "15.7 Sample\n\nhead(mtcars)\n#&gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#&gt; Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n#&gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#&gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#&gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#&gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#&gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\nhead(mtcars, 10)\n#&gt;                    mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n#&gt; Mazda RX4         21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n#&gt; Mazda RX4 Wag     21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n#&gt; Datsun 710        22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n#&gt; Hornet 4 Drive    21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n#&gt; Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n#&gt; Valiant           18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n#&gt; Duster 360        14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n#&gt; Merc 240D         24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n#&gt; Merc 230          22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n#&gt; Merc 280          19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\ntail(mtcars)\n#&gt;                 mpg cyl  disp  hp drat    wt qsec vs am gear carb\n#&gt; Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.7  0  1    5    2\n#&gt; Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.9  1  1    5    2\n#&gt; Ford Pantera L 15.8   8 351.0 264 4.22 3.170 14.5  0  1    5    4\n#&gt; Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.5  0  1    5    6\n#&gt; Maserati Bora  15.0   8 301.0 335 3.54 3.570 14.6  0  1    5    8\n#&gt; Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.6  1  1    4    2\ntail(mtcars, 2)\n#&gt;                mpg cyl disp  hp drat   wt qsec vs am gear carb\n#&gt; Maserati Bora 15.0   8  301 335 3.54 3.57 14.6  0  1    5    8\n#&gt; Volvo 142E    21.4   4  121 109 4.11 2.78 18.6  1  1    4    2",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Frames</span>"
    ]
  },
  {
    "objectID": "7-Dataframes/7-Dataframes.html#selecting-elements-in-data-frames",
    "href": "7-Dataframes/7-Dataframes.html#selecting-elements-in-data-frames",
    "title": "15  Data Frames",
    "section": "15.8 Selecting elements in Data Frames",
    "text": "15.8 Selecting elements in Data Frames\n\nUse data.frame dat as an example below.\n\ndat &lt;- data.frame(\n  name = c('Leia', 'Luke', 'Han'),\n  gender = c('female', 'male', 'male'),\n  height = c(1.50, 1.72, 1.80),\n  jedi = c(FALSE, TRUE, FALSE),\n  stringsAsFactors = FALSE\n)\n\ndat\n#&gt;   name gender height  jedi\n#&gt; 1 Leia female   1.50 FALSE\n#&gt; 2 Luke   male   1.72  TRUE\n#&gt; 3  Han   male   1.80 FALSE\n\n\n15.8.1 Select Cell/Row/Column \\(\\Rightarrow\\) similar to matrix operations\ndataframe[RowIndex, ColIndex]\n\n# select value in row 1 and column 1\ndat[1,1]\n\n# select values in these cells\ndat[1:2,3:4] # Row 1 to 2, col 3 to 4\ndat[2:3, c(1,4)] # Row 2 to 3, col 1 and 4\ndat[-2, -3] # Not row 2 or col 3\n\n\ndat[1, ] # selecting first row\ndat[-2, ] # selecting rows except row 2\n\n\ndat[, 3] # selecting third column\ndat[, -1] # selecting columns except col 1\n\n\nMore Options to select columns\n\nFive equivalent methods\n\nmtcars$mpg # Method I\nmtcars[,1] # Method II\nmtcars[[1]] # Method III\nmtcars[, \"mpg\"] # Method IV\nmtcars[[\"mpg\"]] # Method V\n\n\n#&gt;  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n#&gt; [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n#&gt; [31] 15.0 21.4",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Frames</span>"
    ]
  },
  {
    "objectID": "7-Dataframes/7-Dataframes.html#modifying-data-frames",
    "href": "7-Dataframes/7-Dataframes.html#modifying-data-frames",
    "title": "15  Data Frames",
    "section": "15.9 Modifying Data Frames",
    "text": "15.9 Modifying Data Frames\n\n15.9.1 Temporarily vs Permanently Modifying the Values\n\ndat[, -1]\n#&gt;   gender height  jedi\n#&gt; 1 female   1.50 FALSE\n#&gt; 2   male   1.72  TRUE\n#&gt; 3   male   1.80 FALSE\ndat\n#&gt;   name gender height  jedi\n#&gt; 1 Leia female   1.50 FALSE\n#&gt; 2 Luke   male   1.72  TRUE\n#&gt; 3  Han   male   1.80 FALSE\n\nQ: Why the first column of dat was NOT deleted?\nA: dat[, -1] only temporarily modifies the values. To make the permanently change, we should use dat &lt;- dat[, -1]. That is, new data frame overwrites the old one. Of course, you can assign it to a new name too, like dat_new &lt;- dat[, -1].\nSimilar Examples:\n\n# vector of weights\nweight &lt;- c(49, 77, 85)\n\n# adding weights vector to dat\ndat &lt;- cbind(dat, weight)\ndat\n#&gt;   name gender height  jedi weight\n#&gt; 1 Leia female   1.50 FALSE     49\n#&gt; 2 Luke   male   1.72  TRUE     77\n#&gt; 3  Han   male   1.80 FALSE     85\n\n\nDirect modifying the column commands\n\n# Add new_column permanently\ndat$new_column &lt;- c('a', 'e', 'i')\ndat\n#&gt;   name gender height  jedi weight new_column\n#&gt; 1 Leia female   1.50 FALSE     49          a\n#&gt; 2 Luke   male   1.72  TRUE     77          e\n#&gt; 3  Han   male   1.80 FALSE     85          i\n\n# Delete new_column permanently\ndat$new_column &lt;- NULL\ndat\n#&gt;   name gender height  jedi weight\n#&gt; 1 Leia female   1.50 FALSE     49\n#&gt; 2 Luke   male   1.72  TRUE     77\n#&gt; 3  Han   male   1.80 FALSE     85",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Frames</span>"
    ]
  },
  {
    "objectID": "7-Dataframes/7-Dataframes.html#modifying-data-frames-continue",
    "href": "7-Dataframes/7-Dataframes.html#modifying-data-frames-continue",
    "title": "15  Data Frames",
    "section": "15.10 Modifying Data Frames (continue)",
    "text": "15.10 Modifying Data Frames (continue)\n\n15.10.1 Adding/Deleting columns\nAdding Columns Method I:\n\ndat$new_column &lt;- c('a', 'e', 'i')\ndat\n#&gt;   name gender height  jedi weight new_column\n#&gt; 1 Leia female   1.50 FALSE     49          a\n#&gt; 2 Luke   male   1.72  TRUE     77          e\n#&gt; 3  Han   male   1.80 FALSE     85          i\n\nAdding Columns Method II:\n\n# vector of weights\nweight &lt;- c(49, 77, 85)\n\n# adding weights vector to dat\ndat &lt;- cbind(dat, weight)\ndat\n#&gt;   name gender height  jedi weight new_column weight\n#&gt; 1 Leia female   1.50 FALSE     49          a     49\n#&gt; 2 Luke   male   1.72  TRUE     77          e     77\n#&gt; 3  Han   male   1.80 FALSE     85          i     85\n\nDeleting Columns\n\ndat$weight &lt;- NULL\ndat\n\n\n\n15.10.2 Renaming a column\n\nnames(dat)\n#&gt; [1] \"name\"       \"gender\"     \"height\"     \"jedi\"       \"weight\"    \n#&gt; [6] \"new_column\" \"weight\"\n\n# changing gender to sex\nattributes(dat)$names[2] &lt;- \"sex\"\n\n\n# Equivalently,\nnames(dat)[2] &lt;- \"sex\"\ncolnames(dat)[2] &lt;- \"Sex\"\n\n#names(dat)\n\n\n\n15.10.3 Moving Columnns\n\nreordered_names &lt;- c(\"name\", \"jedi\", \"height\", \"weight\", \"sex\")\ndat &lt;- dat[ ,reordered_names]\ndat\n#&gt;   name  jedi height weight    sex\n#&gt; 1 Leia FALSE   1.50     49 female\n#&gt; 2 Luke  TRUE   1.72     77   male\n#&gt; 3  Han FALSE   1.80     85   male\n\n\n\n15.10.4 Transforming Columns\nRecall 1 kg = 2.20462 pounds (i.e. 1 pounds = 0.453592 kg)\n\ndat$height &lt;- dat$height * 100 # converting height to centimeters\n\ndat[ ,\"weight\"] &lt;- dat[ ,\"weight\"] * 2.20462 # converting weight to pounds\n\ndat &lt;- transform(dat, weight = weight * 0.453592) # Converting weight back to kgs",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Frames</span>"
    ]
  },
  {
    "objectID": "7-Dataframes/7-Dataframes.html#creating-data-frames",
    "href": "7-Dataframes/7-Dataframes.html#creating-data-frames",
    "title": "15  Data Frames",
    "section": "15.11 Creating Data Frames",
    "text": "15.11 Creating Data Frames\nMajority of the time, data frames are read from external data files, or are built-in data frames in R packages.\nFrom time to time, you need to create some data table manually.\n\nOption 1: data.frame()\n\n\ndat &lt;- data.frame(\n  name = c('Anakin', 'Padme', 'Luke', 'Leia'),\n  gender = c('male', 'female', 'male', 'female'),\n  height = c(1.88, 1.65, 1.72, 1.50),\n  weight = c(84, 45, 77, 49), \n  stringsAsFactors = TRUE\n) \n\ndat\n#&gt;     name gender height weight\n#&gt; 1 Anakin   male   1.88     84\n#&gt; 2  Padme female   1.65     45\n#&gt; 3   Luke   male   1.72     77\n#&gt; 4   Leia female   1.50     49\nstr(dat)\n#&gt; 'data.frame':    4 obs. of  4 variables:\n#&gt;  $ name  : Factor w/ 4 levels \"Anakin\",\"Leia\",..: 1 4 3 2\n#&gt;  $ gender: Factor w/ 2 levels \"female\",\"male\": 2 1 2 1\n#&gt;  $ height: num  1.88 1.65 1.72 1.5\n#&gt;  $ weight: num  84 45 77 49\n\n\n15.11.0.1 For comparison purpose\n\n\n# If stringsAsFactors = FALSE\ndat &lt;- data.frame(\n  name = c('Anakin', 'Padme', 'Luke', 'Leia'),\n  gender = c('male', 'female', 'male', 'female'),\n  height = c(1.88, 1.65, 1.72, 1.50),\n  weight = c(84, 45, 77, 49), \n  stringsAsFactors = FALSE\n) \n\nstr(dat)\n#&gt; 'data.frame':    4 obs. of  4 variables:\n#&gt;  $ name  : chr  \"Anakin\" \"Padme\" \"Luke\" \"Leia\"\n#&gt;  $ gender: chr  \"male\" \"female\" \"male\" \"female\"\n#&gt;  $ height: num  1.88 1.65 1.72 1.5\n#&gt;  $ weight: num  84 45 77 49\n\n\nOption 2: list() \\(\\Rightarrow\\) data.frame()\n\n\n# another way to create a basic data frame\nlst &lt;- list(\n  name = c('Anakin', 'Padme', 'Luke', 'Leia'),\n  gender = c('male', 'female', 'male', 'female'),\n  height = c(1.88, 1.65, 1.72, 1.50),\n  weight = c(84, 45, 77, 49)\n)\n\ntbl &lt;- data.frame(lst, stringsAsFactors = TRUE)\n\ntbl\n#&gt;     name gender height weight\n#&gt; 1 Anakin   male   1.88     84\n#&gt; 2  Padme female   1.65     45\n#&gt; 3   Luke   male   1.72     77\n#&gt; 4   Leia female   1.50     49\nstr(tbl)\n#&gt; 'data.frame':    4 obs. of  4 variables:\n#&gt;  $ name  : Factor w/ 4 levels \"Anakin\",\"Leia\",..: 1 4 3 2\n#&gt;  $ gender: Factor w/ 2 levels \"female\",\"male\": 2 1 2 1\n#&gt;  $ height: num  1.88 1.65 1.72 1.5\n#&gt;  $ weight: num  84 45 77 49\n\n\n\n15.11.0.2 stringsAsFactors\n\n= TRUE: Convert character vectors into factors (default option in older R)\n= FALSE: Prevent data.frame() from converting strings into factors (default option in newer R)\nDefault option changed before and after 3.1.0 versions of R",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Data Frames</span>"
    ]
  },
  {
    "objectID": "Quiz7/Quiz7.html",
    "href": "Quiz7/Quiz7.html",
    "title": "16  Quiz 7 Instructions",
    "section": "",
    "text": "16.1 Question 1\nWe will use iris data frame, which is a data frame in the R package datasets. Please use ?iris to find more information.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Quiz 7 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz7/Quiz7.html#question-1",
    "href": "Quiz7/Quiz7.html#question-1",
    "title": "16  Quiz 7 Instructions",
    "section": "",
    "text": "[1pt] Please find the number of columns of iris and store the value to object ncol.iris.\n[1pt] Please show the last three rows of iris and save it as Last.3.\n[1pt] Save the data where the species is “setosa” to the object named Setosa.\n[1pt] Find the column names of iris and save the result to colnames.iris.\n[3pts] Find the mean Sepal.Length of each Species. Save the results as mean.setosa, mean.versicolor, and mean.virginica.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Quiz 7 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz7/Quiz7.html#question-2",
    "href": "Quiz7/Quiz7.html#question-2",
    "title": "16  Quiz 7 Instructions",
    "section": "16.2 Question 2",
    "text": "16.2 Question 2\n\n[1pt] Create a data frame named df_abcd as follows\n\n\n#&gt;     a b     c   d\n#&gt; 1 5.5 a  TRUE 1.1\n#&gt; 2 4.5 a FALSE 1.2\n#&gt; 3 3.5 b  TRUE 1.3\n#&gt; 4 2.5 b FALSE 1.4\n#&gt; 5 1.5 b  TRUE 1.5\n\n\n[1pt] Write a command that would give you the following data from df_abcd and save the result as df_ac.\n\n\n#&gt;     a     c\n#&gt; 1 5.5  TRUE\n#&gt; 2 4.5 FALSE\n#&gt; 3 3.5  TRUE\n#&gt; 4 2.5 FALSE\n#&gt; 5 1.5  TRUE\n\n\n[1pt] Add a new_column e &lt;- c(1, 1, 1, 1, 1) to df_abcd and save the new data frame as df_new. (Please note that, do not overwrite df_abcd.)\n\n\n#&gt;     a b     c   d e\n#&gt; 1 5.5 a  TRUE 1.1 1\n#&gt; 2 4.5 a FALSE 1.2 1\n#&gt; 3 3.5 b  TRUE 1.3 1\n#&gt; 4 2.5 b FALSE 1.4 1\n#&gt; 5 1.5 b  TRUE 1.5 1",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Quiz 7 Instructions</span>"
    ]
  },
  {
    "objectID": "Lab3/Lab3.html",
    "href": "Lab3/Lab3.html",
    "title": "17  Lab 3",
    "section": "",
    "text": "17.1 Question 1\n[5 pts] List all the ways that a list differs from an atomic vector.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Lab 3</span>"
    ]
  },
  {
    "objectID": "Lab3/Lab3.html#question-2",
    "href": "Lab3/Lab3.html#question-2",
    "title": "17  Lab 3",
    "section": "17.2 Question 2",
    "text": "17.2 Question 2\nUse longley dataset from the R package datasets.\n\n[20 pts] Fix each of the following common data frame subsetting errors, and explain what’s wrong.\n\n\n\nlongley[longley$GNP.deflator = 100, ]\nlongley[-1:4, ] # remove the first four rows\nlongley[longley$GNP.deflator &lt;= 99]\nlongley[longley$GNP.deflator == 83 | 99 | 100, ]\n\n\n[10 pts] Why does longley[1:15] return an error? How does it differ from the similar longley[1:15,]?\n[5 pts] Find the dimension of longley. Display the 7 column names of longley.\n[5 pts] Run the command longley[, c(TRUE, FALSE)] and describe the output. Also, describe how the recycling rule applies in this context.\n[5 pts] Brainstorm as many ways as possible (at least three ways) to extract the third value from the GNP variable, which is 258.054, in the longley dataset.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Lab 3</span>"
    ]
  },
  {
    "objectID": "Lab3/Lab3.html#question-3",
    "href": "Lab3/Lab3.html#question-3",
    "title": "17  Lab 3",
    "section": "17.3 Question 3",
    "text": "17.3 Question 3\n\n[5 pts] Please re-create the data frame DeathRate below. You may need to use rep() function and the following vectors. Also note that the values in the Death_rate column are decimals.\n\n\nc(\"0-4\", \"5-9\", \"10-14\", \"15-19\", \"20-24\", \"25-34\", \"35-44\", \"45-54\", \"55-64\", \"65-74\", \"75+\")\nc(9.4, 10.0, 9.3, 8.6, 7.6, 13.3, 12.7, 11.3, 9.1, 5.8, 2.8)\nc(11.8, 13.9, 12.8, 12.2, 9.6, 12.6, 11.0, 8.3, 4.6, 2.3, 1.0)\nc(2056, 186, 140, 223, 370, 391, 545, 1085, 2036, 5219, 13645)\nc(2392, 185, 184, 426, 645, 871, 1242, 1994, 3313, 6147, 14136)\n\n\n#&gt;      Age       Location Population_size Death_rate\n#&gt; 1    0-4          Maine             9.4    0.02056\n#&gt; 2    5-9          Maine            10.0    0.00186\n#&gt; 3  10-14          Maine             9.3    0.00140\n#&gt; 4  15-19          Maine             8.6    0.00223\n#&gt; 5  20-24          Maine             7.6    0.00370\n#&gt; 6  25-34          Maine            13.3    0.00391\n#&gt; 7  35-44          Maine            12.7    0.00545\n#&gt; 8  45-54          Maine            11.3    0.01085\n#&gt; 9  55-64          Maine             9.1    0.02036\n#&gt; 10 65-74          Maine             5.8    0.05219\n#&gt; 11   75+          Maine             2.8    0.13645\n#&gt; 12   0-4 South Carolina            11.8    0.02392\n#&gt; 13   5-9 South Carolina            13.9    0.00185\n#&gt; 14 10-14 South Carolina            12.8    0.00184\n#&gt; 15 15-19 South Carolina            12.2    0.00426\n#&gt; 16 20-24 South Carolina             9.6    0.00645\n#&gt; 17 25-34 South Carolina            12.6    0.00871\n#&gt; 18 35-44 South Carolina            11.0    0.01242\n#&gt; 19 45-54 South Carolina             8.3    0.01994\n#&gt; 20 55-64 South Carolina             4.6    0.03313\n#&gt; 21 65-74 South Carolina             2.3    0.06147\n#&gt; 22   75+ South Carolina             1.0    0.14136\n\n\n[5 pts] Write a command that would give you the following data from DeathRate. Please note that the rows are extracted where the Death_rate is greater than or equal to 0.023.\n\n\n#&gt;          Location   Age Population_size\n#&gt; 10          Maine 65-74             5.8\n#&gt; 11          Maine   75+             2.8\n#&gt; 12 South Carolina   0-4            11.8\n#&gt; 20 South Carolina 55-64             4.6\n#&gt; 21 South Carolina 65-74             2.3\n#&gt; 22 South Carolina   75+             1.0",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Lab 3</span>"
    ]
  },
  {
    "objectID": "Lab3/Lab3.html#question-4",
    "href": "Lab3/Lab3.html#question-4",
    "title": "17  Lab 3",
    "section": "17.4 Question 4",
    "text": "17.4 Question 4\nUse the expand.grid() to create the deck data frame as follows. (Not required, but you can use is.data.frame() to check if deck is a data frame.)\n\nsuit &lt;- c('spades', 'hearts', 'clubs', 'diamonds')\nface &lt;- 1:13\ndeck &lt;- expand.grid(suit, face)\n\n\n[5 pts] What are the column names of deck? Additionally, please rename the columns of deck as suit and face, respectively.\n[5 pts] Please write some commands to count the number of rows which suit are hearts.\n[10 pts] Please shuffle the rows of deck. Please use set.seed(1) and sample() for this question.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Lab 3</span>"
    ]
  },
  {
    "objectID": "8-Functions_Expressions/8-Functions_Expressions.html",
    "href": "8-Functions_Expressions/8-Functions_Expressions.html",
    "title": "18  Functions and Expressions",
    "section": "",
    "text": "18.1 Reading Assignments",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Functions and Expressions</span>"
    ]
  },
  {
    "objectID": "8-Functions_Expressions/8-Functions_Expressions.html#reading-assignments",
    "href": "8-Functions_Expressions/8-Functions_Expressions.html#reading-assignments",
    "title": "18  Functions and Expressions",
    "section": "",
    "text": "Please make sure you’ve read the following sections in the textbook: R Coding Basics, https://www.gastonsanchez.com/R-coding-basics/\n\nSection 10. Intro to Functions\nSection 11. Expressions",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Functions and Expressions</span>"
    ]
  },
  {
    "objectID": "8-Functions_Expressions/8-Functions_Expressions.html#intro-to-functions",
    "href": "8-Functions_Expressions/8-Functions_Expressions.html#intro-to-functions",
    "title": "18  Functions and Expressions",
    "section": "18.2 Intro to Functions",
    "text": "18.2 Intro to Functions\n\nThree components of a function:\n\nbody (= the lines of code with in braces)\narguments (= inputs of your function)\nenvironment \\(\\Rightarrow\\) Global Environment vs Execution Environment\n\n\nExample 10.2.1\n\n# future value function with default arguments\nFV = function(pv = 100, r = 0.01, n = 1) {\n  fv = pv * (1 + r)^n\n  fv\n}\n\n# Execution\nFV()\n#&gt; [1] 101\n\npv=200\nFV(pv)\n#&gt; [1] 202",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Functions and Expressions</span>"
    ]
  },
  {
    "objectID": "8-Functions_Expressions/8-Functions_Expressions.html#expressions",
    "href": "8-Functions_Expressions/8-Functions_Expressions.html#expressions",
    "title": "18  Functions and Expressions",
    "section": "18.3 Expressions",
    "text": "18.3 Expressions\n\n18.3.1 Simple Expression vs Compound Expression\n\nSimple expression are written with no braces (normally in one single line!).\n\nSimple Expression Examples:\n\n# Every line below is a simple expression\n\ndeposit = 1000 \ndeposit\n#&gt; [1] 1000\nrate = 0.02 \nrate\n#&gt; [1] 0.02\nyear = 3 \nyear\n#&gt; [1] 3\n\n\nCompound expressions consist of simple expressions separated by newlines (or semicolons), and most importantly, grouped within braces.\n\nCompound Expression Examples:\n\n{\n  deposit = 1000\n  deposit\n  rate = 0.02\n  rate\n  year = 3\n  year\n}\n#&gt; [1] 3\n\n\n# Equivalently, \n{\n  deposit = 1000; deposit; rate = 0.02; rate; year = 3; year\n}\n#&gt; [1] 3\n\n\n\n18.3.2 When to use compound expression?\nCompound expression is typically used together with other programming structures (e.g. functions, conditionals, loops).\nExample:\n\nFV = function(pv = 100, r = 0.01, n = 1) {\n  fv = pv * (1 + r)^n\n  fv\n}\n\n\ncalc_powers = function(x) {\n  zero = x ^ 0\n  one = x ^ 1\n  two = x ^ 2\n  three = x ^ 3\n  c(zero, one, two, three)\n}",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Functions and Expressions</span>"
    ]
  },
  {
    "objectID": "8-Functions_Expressions/8-Functions_Expressions.html#how-compound-expression-is-run",
    "href": "8-Functions_Expressions/8-Functions_Expressions.html#how-compound-expression-is-run",
    "title": "18  Functions and Expressions",
    "section": "18.4 How compound expression is run?",
    "text": "18.4 How compound expression is run?\n\nR runs everything inside of the compound expression as a single block of code.\nEvery expression in R has a value: the value of the last evaluated statement.\n\n\nx &lt;- {\n  deposit = 1000\n  deposit\n  rate = 0.02\n  rate\n  year = 3\n  year\n}\n\nx\n#&gt; [1] 3\n\nExample: A function with compound expressions\n\ncalc_powers = function(x) {\n  zero = x ^ 0\n  one = x ^ 1\n  two = x ^ 2\n  three = x ^ 3\n  c(zero, one, two, three)\n  # OR, return(c(zero, one, two, three))\n}\ncalc_powers(5)\n#&gt; [1]   1   5  25 125\n\nThe value of a function can be established in two ways:\n\nAs the last evaluated simple expression (in the body of the function)\nAn explicitly returned value via return()\n\n\nGuess the output of the following codes:\n\nRESULT &lt;- calc_powers(5)\nRESULT\n\nzero\none\ntwo\nthree",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Functions and Expressions</span>"
    ]
  },
  {
    "objectID": "8-Functions_Expressions/8-Functions_Expressions.html#results",
    "href": "8-Functions_Expressions/8-Functions_Expressions.html#results",
    "title": "18  Functions and Expressions",
    "section": "18.5 Results",
    "text": "18.5 Results\n\nRESULT &lt;- calc_powers(5)\nRESULT\n#&gt; [1]   1   5  25 125\n\nzero # Function's local variables cannot be accessed by the global environment\n#&gt; Error in eval(expr, envir, enclos): object 'zero' not found\none # local variable\n#&gt; Error in eval(expr, envir, enclos): object 'one' not found\ntwo  # local variable\n#&gt; Error in eval(expr, envir, enclos): object 'two' not found\nthree  # local variable\n#&gt; Error in eval(expr, envir, enclos): object 'three' not found",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Functions and Expressions</span>"
    ]
  },
  {
    "objectID": "8-Functions_Expressions/8-Functions_Expressions.html#revisit-example-10.2.1",
    "href": "8-Functions_Expressions/8-Functions_Expressions.html#revisit-example-10.2.1",
    "title": "18  Functions and Expressions",
    "section": "18.6 Revisit Example 10.2.1",
    "text": "18.6 Revisit Example 10.2.1\n\n# title: future value function\n# description: computes future value using compounding interest\n# inputs:\n# - present: amount for present value\n# - rate: annual rate of return (in decimal)\n# - years: number of years\n# output:\n# - computed future value\n\n\n# future value function with default arguments\nFV = function(pv = 100, r = 0.01, n = 1) {\n  fv = pv * (1 + r)^n\n  return(fv) # It's recommended to use return()\n}\n\n\n# Execution\nFV() # Default Execution using pv = 100, r = 0.01, n = 1\n#&gt; [1] 101\n\n\npv=200\nFV(pv) # pv = 200, r = 0.01, n = 1\n#&gt; [1] 202\n\n\nSteps to write a function:\n\nStep 1: Start with a concrete example\nStep 2: Make your code more generalizable\nStep 3: Encapsulate the code into a function\nStep 4: Test that the function works\n\n\nThe more complicated the function you write, the more crucial it is to follow the steps.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Functions and Expressions</span>"
    ]
  },
  {
    "objectID": "Quiz8/Quiz8.html",
    "href": "Quiz8/Quiz8.html",
    "title": "19  Quiz 8 Instructions",
    "section": "",
    "text": "19.1 Question 1\n[2pts] Create a function to show welcome information.\n[Hint: You may use paste0() function. Please make sure the number of spaces is correct, such as having a space after the comma.]",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Quiz 8 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz8/Quiz8.html#question-1",
    "href": "Quiz8/Quiz8.html#question-1",
    "title": "19  Quiz 8 Instructions",
    "section": "",
    "text": "Function Name: welcome\nFunction Input: Any string, like John Doe\nFunction Output: “Welcome to STAT 385,” and the input string, then the exclamation point. Example: “Welcome to STAT 385, John Doe!”",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Quiz 8 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz8/Quiz8.html#question-2",
    "href": "Quiz8/Quiz8.html#question-2",
    "title": "19  Quiz 8 Instructions",
    "section": "19.2 Question 2",
    "text": "19.2 Question 2\n[2pts] Create a function to calculate the \\(t\\)-statistic for a given random sample \\(x\\) and the specified mu (defaulting to 0). Recall that \\(t = \\frac{\\bar{x} - \\mu}{s/\\sqrt n}\\), where \\(\\bar x\\) is the sample mean, \\(s\\) is the sample standard deviation of \\(x\\), and \\(n\\) is the sample size.\n\nFunction Name: t.statistic\nFunction Input: x, mu. Please set mu = 0 as the default value.\nFunction Output: The t-statistic value.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Quiz 8 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz8/Quiz8.html#question-3",
    "href": "Quiz8/Quiz8.html#question-3",
    "title": "19  Quiz 8 Instructions",
    "section": "19.3 Question 3",
    "text": "19.3 Question 3\n[2pts] Create a function to calculate the squared sum of a vector.\n\nFunction Name: squared_sum\nFunction Input: Any numeric vector (may contains missing values).\nFunction Output: The squared sum of the input vector excluding the missing values.\n\n[Hint: You may use na.rm = TRUE within sum() to remove the missing values from calculation.]",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Quiz 8 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz8/Quiz8.html#question-4",
    "href": "Quiz8/Quiz8.html#question-4",
    "title": "19  Quiz 8 Instructions",
    "section": "19.4 Question 4",
    "text": "19.4 Question 4\n[4pts] Create a function to return the list of summary statistics: the input vector itself vector, vector length n, vector mean mean, vector median value median, standard deviation sd, minimum min, maximum max, first quartile Q1, third quartile Q3, the squared sum sq.sum (please use the function defined in Question 3), the number of missing values num.missing.\n\nFunction Name: summary_stats\nFunction Input: Any numeric vector (may contains missing values).\nFunction Output: A list with values vector, n, mean, median, sd, min, max, Q1, Q3, sq.sum, num.missing. Please make sure the statistics follows the order specified.\n\nAfter the function is defined, please use summary_stats(c(1, 2, NA, 5.5, NA, 7, 9, 35, 79, 88, NA, 3.14159)) to try the function. The result should look like the following:\n\n#&gt; $vector\n#&gt;  [1]  1.00000  2.00000       NA  5.50000       NA  7.00000  9.00000 35.00000\n#&gt;  [9] 79.00000 88.00000       NA  3.14159\n#&gt; \n#&gt; $n\n#&gt; [1] 12\n#&gt; \n#&gt; $mean\n#&gt; [1] 25.51573\n#&gt; \n#&gt; $median\n#&gt; [1] 7\n#&gt; \n#&gt; $sd\n#&gt; [1] 34.5066\n#&gt; \n#&gt; $min\n#&gt; [1] 1\n#&gt; \n#&gt; $max\n#&gt; [1] 88\n#&gt; \n#&gt; $Q1\n#&gt;     25% \n#&gt; 3.14159 \n#&gt; \n#&gt; $Q3\n#&gt; 75% \n#&gt;  35 \n#&gt; \n#&gt; $sq.sum\n#&gt; [1] 15385.12\n#&gt; \n#&gt; $num.missing\n#&gt; [1] 3",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Quiz 8 Instructions</span>"
    ]
  },
  {
    "objectID": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html",
    "href": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html",
    "title": "20  Conditions and For Loop",
    "section": "",
    "text": "20.1 Reading Assignments",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Conditions and For Loop</span>"
    ]
  },
  {
    "objectID": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#reading-assignments",
    "href": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#reading-assignments",
    "title": "20  Conditions and For Loop",
    "section": "",
    "text": "Please make sure you’ve read the following sections in the textbook: R Coding Basics, https://www.gastonsanchez.com/R-coding-basics/\n\nSection 12. Conditionals: If-Else\n5.2.2 vectorized if & 5.2.3 switch() statement\nSection 13. Iterations: For Loop\n10.1 Apply functions\nFor loop, do not grow vectors",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Conditions and For Loop</span>"
    ]
  },
  {
    "objectID": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#conditionals-and-iterations",
    "href": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#conditionals-and-iterations",
    "title": "20  Conditions and For Loop",
    "section": "20.2 Conditionals and Iterations",
    "text": "20.2 Conditionals and Iterations\nThere are two primary tools of control flow: conditionals and iterations.\n\nConditionals (= choices):\n\nlike if statements and switch() calls\nRun different code depending on the input\n\nIterations (= loops):\n\nlike for and while\nRepeatedly run code, typically with changing options.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Conditions and For Loop</span>"
    ]
  },
  {
    "objectID": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#conditionals",
    "href": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#conditionals",
    "title": "20  Conditions and For Loop",
    "section": "20.3 Conditionals",
    "text": "20.3 Conditionals",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Conditions and For Loop</span>"
    ]
  },
  {
    "objectID": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#conditionals-if-then-else-statement",
    "href": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#conditionals-if-then-else-statement",
    "title": "20  Conditions and For Loop",
    "section": "20.4 Conditionals: If-Then-Else Statement",
    "text": "20.4 Conditionals: If-Then-Else Statement\n\nThe syntax of if-then-else statement is\n\n\nif (condition) {\n  # do something\n} else {\n  # do something else\n}\n\nExample:\n\nx = 42\n\nif (x &gt; 100) {\n  print(\"x is greater than 100\")\n} else {\n  print(\"x is less than or equal to 100\")\n}\n#&gt; [1] \"x is less than or equal to 100\"\n\n\nx &lt;- c(42, 179, 89) # x is a vector\n\n# The codes below can't run\nif (x &gt; 100) {\n  print(\"x is greater than 100\")\n} else {\n  print(\"x is less than or equal to 100\")\n}\n#&gt; Error in if (x &gt; 100) {: the condition has length &gt; 1\n\n\n20.4.1 Use Vectorized if statement ifelse\n\nifelse() is a vectorized function with test, yes, and no vectors (that will be recycled to the same length).\n\n\nifelse(x &gt; 100, \"x is greater than 100\", \"x is less than or equal to 100\")\n#&gt; [1] \"x is less than or equal to 100\" \"x is greater than 100\"         \n#&gt; [3] \"x is less than or equal to 100\"",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Conditions and For Loop</span>"
    ]
  },
  {
    "objectID": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#conditionals-chain-multiple-if-else-statements",
    "href": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#conditionals-chain-multiple-if-else-statements",
    "title": "20  Conditions and For Loop",
    "section": "20.5 Conditionals: Chain Multiple If-Else Statements",
    "text": "20.5 Conditionals: Chain Multiple If-Else Statements\n\nThe syntax of multiple if’s statement is\n\n\nif (condition) {\n  # run this code if the condition evaluates to TRUE\n} else if (condition){\n  # run this code if the condition evaluates to FALSE\n} else {\n  \n}\n\nExample:\n\n# setup data\nm = 22\nn = 0\n\n# series of if-else if statements\nif (m &lt; 20) {\n  n = 20 # will run if m &lt; 20\n} else if (m &lt; 40) {\n  n = 40 # will run if 20 &lt;= m &lt; 40\n} else if (m &lt; 60) {\n  n = 60 # will run if 40 &lt;= m &lt; 60\n} else {\n  n = Inf # will run if 60 &lt;= m\n}\n\n# check \"result\"\nn\n#&gt; [1] 40\n\nExample: Place the if-else if statement within a function\n\n# setup data\nm = 22\n\n# Create find.n() function\n\nfind.n &lt;- function(m){\n  if (m &lt; 20) {\n    return(20) # will run if m &lt; 20\n  } else if (m &lt; 40) {\n    return(40) # will run if 20 &lt;= m &lt; 40\n  } else if (m &lt; 60) {\n    return(60) # will run if 40 &lt;= m &lt; 60\n  } else {\n    return(Inf) # will run if 60 &lt;= m\n  }\n}\n\n# Apply find.n() on m = 22\nfind.n(m)\n#&gt; [1] 40\n\n\n20.5.1 Use switch() statement\n\nswitch() is closely related to if.\nswitch() is a compact, special purpose equivalent.\nLimitations: It is recommended to use switch() only with character inputs.\n\nIt is also possible to use switch() with a numeric x, but is harder to read, and has undesirable failure modes if x is not a whole number.\n\n\nExample: Convert the day of the week into a number.\n\nUse if and else if\n\n\nday &lt;- \"Tuesday\" # Change this value!\n\nif (day == 'Sunday') {\n  num_day &lt;- 1\n} else if (day == \"Monday\") {\n  num_day &lt;- 2\n} else if (day == \"Tuesday\") {\n  num_day &lt;- 3\n} else if (day == \"Wednesday\") {\n  num_day &lt;- 4\n} else if (day == \"Thursday\") {\n  num_day &lt;- 5\n} else if (day == \"Friday\") {\n  num_day &lt;- 6\n} else if (day == \"Saturday\") {\n  num_day &lt;- 7\n}\n\nnum_day\n#&gt; [1] 3\n\n\nday &lt;- \"Tuesday\" # Change this value!\n\nswitch(day, # The expression to be evaluated.\n  Sunday = 1,\n  Monday = 2,\n  Tuesday = 3,\n  Wednesday = 4,\n  Thursday = 5,\n  Friday = 6,\n  Saturday = 7,\n  NA) # an (optional) default value if there are no matches\n#&gt; [1] 3\n\n\n\n20.5.2 Place switch() within a function\n\n# Create function legs()\n\nlegs &lt;- function(x) {\n  switch(x,\n    cow = ,\n    horse = ,\n    dog = 4,\n    human = ,\n    chicken = 2,\n    plant = 0,\n    stop(\"Unknown input\")\n  )\n}\n\n\nIf multiple inputs have the same output, we can leave the right hand side of = empty and the input will “fall through” to the next value.\n\n\nlegs(\"cow\")\n#&gt; [1] 4\n\nlegs(\"dog\")\n#&gt; [1] 4\n\nlegs(\"bear\")\n#&gt; Error in legs(\"bear\"): Unknown input",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Conditions and For Loop</span>"
    ]
  },
  {
    "objectID": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#iterations",
    "href": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#iterations",
    "title": "20  Conditions and For Loop",
    "section": "20.6 Iterations",
    "text": "20.6 Iterations",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Conditions and For Loop</span>"
    ]
  },
  {
    "objectID": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#for-loop",
    "href": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#for-loop",
    "title": "20  Conditions and For Loop",
    "section": "20.7 For Loop",
    "text": "20.7 For Loop\n\nFor loops are used when you know how many times a series of calculations need to be repeated.\n\n\n\n\nThe generic syntax of for loop is:\n\nfor (iterator in times) { \n  do_something\n}\n\n\nExample 1:\n\nfor (i in 1:5){ # i, j, k are commonly used for the iterator\n  print(i)\n}\n#&gt; [1] 1\n#&gt; [1] 2\n#&gt; [1] 3\n#&gt; [1] 4\n#&gt; [1] 5\n\n\n# Equivalent, but not recommended\n\nfor (some_index in 1:5){\n  print(some_index)\n}\n#&gt; [1] 1\n#&gt; [1] 2\n#&gt; [1] 3\n#&gt; [1] 4\n#&gt; [1] 5\n\n\n\n\nExample 2:\n\n\nIt’s recommended to use seq_along and iterate over indexes rather than elements of a vector.\n\n\n\n\nThe following four chunk of code are equivalent:\n\n# Recommended\n\nvalue &lt;- 2\ntimes &lt;- c('one', 'two', 'three', 'four') # Character Vector\n\nfor (i in seq_along(times)) { # seq_along(times) gives c(1, 2, 3, 4)\n  value &lt;- value * 2\n  print(value)\n}\n#&gt; [1] 4\n#&gt; [1] 8\n#&gt; [1] 16\n#&gt; [1] 32\n\n\nvalue &lt;- 2\ntimes &lt;- c('one', 'two', 'three', 'four')\n\nfor (i in 1:length(times)) { # 1:length(times) gives c(1, 2, 3, 4)\n  value &lt;- value * 2 \n  print(value)\n}\n#&gt; [1] 4\n#&gt; [1] 8\n#&gt; [1] 16\n#&gt; [1] 32\n\n\nvalue &lt;- 2\ntimes &lt;- c('one', 'two', 'three', 'four')\n\nfor (i in times) { # Works, but not recommended\n  value &lt;- value * 2 \n  print(value)\n}\n#&gt; [1] 4\n#&gt; [1] 8\n#&gt; [1] 16\n#&gt; [1] 32\n\n\nvalue &lt;- 2\ntimes &lt;- c(100, 200, 500, 800)\n\nfor (i in times) { # Works, but not recommended\n  value &lt;- value * 2 \n  print(value)\n}\n#&gt; [1] 4\n#&gt; [1] 8\n#&gt; [1] 16\n#&gt; [1] 32\n\n\n\n\nExample 3:\nThe iterator i changes along with the “iterations vector”\n\n# Recommended\n\ni = 0\ny = letters[4:1]\ntimes &lt;- c('one', 'two', 'three', 'four') # Character Vector\n\nfor (i in seq_along(times)) { # seq_along(times) gives c(1, 2, 3, 4)\n  print(i)\n  print(y[i])\n}\n#&gt; [1] 1\n#&gt; [1] \"d\"\n#&gt; [1] 2\n#&gt; [1] \"c\"\n#&gt; [1] 3\n#&gt; [1] \"b\"\n#&gt; [1] 4\n#&gt; [1] \"a\"\n\ni\n#&gt; [1] 4\n\n\ni = 0\ny = letters[4:1]\ntimes &lt;- c('one', 'two', 'three', 'four')\n\nfor (i in 1:length(times)) { # 1:length(times) gives c(1, 2, 3, 4)\n  print(i)\n  print(y[i])\n}\n#&gt; [1] 1\n#&gt; [1] \"d\"\n#&gt; [1] 2\n#&gt; [1] \"c\"\n#&gt; [1] 3\n#&gt; [1] \"b\"\n#&gt; [1] 4\n#&gt; [1] \"a\"\n\ni\n#&gt; [1] 4\n\n\ni = 0\ny = letters[4:1]\ntimes &lt;- c('one', 'two', 'three', 'four')\n\nfor (i in times) {\n  print(i)\n  print(y[i]) # doesn't work\n}\n#&gt; [1] \"one\"\n#&gt; [1] NA\n#&gt; [1] \"two\"\n#&gt; [1] NA\n#&gt; [1] \"three\"\n#&gt; [1] NA\n#&gt; [1] \"four\"\n#&gt; [1] NA\n\ni\n#&gt; [1] \"four\"\n\n\ni = 0\ny = letters[4:1]\ntimes &lt;- c(100, 200, 500, 800)\n\nfor (i in times) {\n  print(i)\n  print(y[i]) # doesn't work\n}\n#&gt; [1] 100\n#&gt; [1] NA\n#&gt; [1] 200\n#&gt; [1] NA\n#&gt; [1] 500\n#&gt; [1] NA\n#&gt; [1] 800\n#&gt; [1] NA\n\ni\n#&gt; [1] 800\n\nExample 4 (using cat() instead of print()):\nThe iterator i changes along with the “iterations vector”\n\n# Recommended\n\ni = 0\ny = letters[4:1]\ntimes &lt;- c('one', 'two', 'three', 'four') # Character Vector\n\nfor (i in seq_along(times)) { # seq_along(times) gives c(1, 2, 3, 4)\n  cat(i, \"\\n\")\n  cat(y[i], \"\\n\")\n}\n#&gt; 1 \n#&gt; d \n#&gt; 2 \n#&gt; c \n#&gt; 3 \n#&gt; b \n#&gt; 4 \n#&gt; a\n\ni\n#&gt; [1] 4\n\n\ni = 0\ny = letters[4:1]\ntimes &lt;- c('one', 'two', 'three', 'four')\n\nfor (i in 1:length(times)) { # 1:length(times) gives c(1, 2, 3, 4)\n  cat(i, \"\\n\")\n  cat(y[i], \"\\n\")\n}\n#&gt; 1 \n#&gt; d \n#&gt; 2 \n#&gt; c \n#&gt; 3 \n#&gt; b \n#&gt; 4 \n#&gt; a\n\ni\n#&gt; [1] 4\n\n\ni = 0\ny = letters[4:1]\ntimes &lt;- c('one', 'two', 'three', 'four')\n\nfor (i in times) {\n  cat(i, \"\\n\")\n  cat(y[i], \"\\n\") # doesn't work\n}\n#&gt; one \n#&gt; NA \n#&gt; two \n#&gt; NA \n#&gt; three \n#&gt; NA \n#&gt; four \n#&gt; NA\n\ni\n#&gt; [1] \"four\"\n\n\ni = 0\ny = letters[4:1]\ntimes &lt;- c(100, 200, 500, 800)\n\nfor (i in times) {\n  cat(i, \"\\n\")\n  cat(y[i], \"\\n\") # doesn't work\n}\n#&gt; 100 \n#&gt; NA \n#&gt; 200 \n#&gt; NA \n#&gt; 500 \n#&gt; NA \n#&gt; 800 \n#&gt; NA\n\ni\n#&gt; [1] 800",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Conditions and For Loop</span>"
    ]
  },
  {
    "objectID": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#next-and-break-statements",
    "href": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#next-and-break-statements",
    "title": "20  Conditions and For Loop",
    "section": "20.8 Next and Break Statements",
    "text": "20.8 Next and Break Statements\n\nnext – skipping certain iterations\nbreak – stop a loop from iterating\n\nExample:\n\nfor (i in 1:10){\n  \n  if (i == 2) {\n    next\n  }\n  \n  if(i == 7){\n    break\n  }\n  \n  print(i)\n  \n}\n#&gt; [1] 1\n#&gt; [1] 3\n#&gt; [1] 4\n#&gt; [1] 5\n#&gt; [1] 6",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Conditions and For Loop</span>"
    ]
  },
  {
    "objectID": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#vectorized-alternative-solutions-to-for-loops",
    "href": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#vectorized-alternative-solutions-to-for-loops",
    "title": "20  Conditions and For Loop",
    "section": "20.9 Vectorized Alternative Solutions to For Loops",
    "text": "20.9 Vectorized Alternative Solutions to For Loops\n\nIn R, avoid using for loops unless you truly need them.\n\nExample 1:\n\nx = 1:10\n\nfor (i in seq_along(x)) { # Equivalently, for (i in 1:length(x))\n  x[i] = i^2\n}\n\nx\n#&gt;  [1]   1   4   9  16  25  36  49  64  81 100\n\nHowever, using vectorization is way better in this case.\n\nx = 1:10\nx^2\n#&gt;  [1]   1   4   9  16  25  36  49  64  81 100\n\n\n\n\nExample 2:\n\n# Recore find.n() function\n\nfind.n &lt;- function(m){\n  if (m &lt; 20) {\n    return(20) # will run if m &lt; 20\n  } else if (m &lt; 40) {\n    return(40) # will run if 20 &lt;= m &lt; 40\n  } else if (m &lt; 60) {\n    return(60) # will run if 40 &lt;= m &lt; 60\n  } else {\n    return(Inf) # will run if 60 &lt;= m\n  }\n}\n\n# Now m is a vector\nm &lt;- c(42, 37, 8, 72)\n\n# check \"result\"\nfind.n(m)\n#&gt; Error in if (m &lt; 20) {: the condition has length &gt; 1\n\nYou may use for loop for this example (but not recommended).\n\nn &lt;- numeric()\n\n### For loop in this case is NOT recommended\nfor (i in seq_along(m)){\n  n[i] &lt;- find.n(m[i])\n}\nn\n#&gt; [1]  60  40  20 Inf\n\nHowever, it’s better to use lapply() or sapply() in this case.\n\nlapply(m, find.n)\n#&gt; [[1]]\n#&gt; [1] 60\n#&gt; \n#&gt; [[2]]\n#&gt; [1] 40\n#&gt; \n#&gt; [[3]]\n#&gt; [1] 20\n#&gt; \n#&gt; [[4]]\n#&gt; [1] Inf\nsapply(m, find.n)\n#&gt; [1]  60  40  20 Inf",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Conditions and For Loop</span>"
    ]
  },
  {
    "objectID": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#apply-functions-lapply-sapply",
    "href": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#apply-functions-lapply-sapply",
    "title": "20  Conditions and For Loop",
    "section": "20.10 Apply Functions (lapply(), sapply())",
    "text": "20.10 Apply Functions (lapply(), sapply())\nThe lapply general syntax is\n\nlapply(X = some_list, FUN = f)\n\n\nsome_list is a vector (atomic vector or list)\nThe function f will be “applied” to each element of some_list.\nlapply is returning a list.\n\nExample:\n\n# Create a list\nset.seed(42)\nex_list = list(a = runif(5),\n               b = runif(5),\n               c = runif(5))\nex_list\n#&gt; $a\n#&gt; [1] 0.9148060 0.9370754 0.2861395 0.8304476 0.6417455\n#&gt; \n#&gt; $b\n#&gt; [1] 0.5190959 0.7365883 0.1346666 0.6569923 0.7050648\n#&gt; \n#&gt; $c\n#&gt; [1] 0.4577418 0.7191123 0.9346722 0.2554288 0.4622928\n\n\n# Use lapply() on the list above\n\n## Find range\nlapply(ex_list, range)\n#&gt; $a\n#&gt; [1] 0.2861395 0.9370754\n#&gt; \n#&gt; $b\n#&gt; [1] 0.1346666 0.7365883\n#&gt; \n#&gt; $c\n#&gt; [1] 0.2554288 0.9346722\n\n## Find maximum\nlapply(ex_list, max)\n#&gt; $a\n#&gt; [1] 0.9370754\n#&gt; \n#&gt; $b\n#&gt; [1] 0.7365883\n#&gt; \n#&gt; $c\n#&gt; [1] 0.9346722\n\n\nNotice that, each element of the last returning list is an atomic vector of length one, of the same type. In this case, we could use sapply(), where s refers to the simplifying action taken by the function.\n\n\nsapply(ex_list, max)\n#&gt;         a         b         c \n#&gt; 0.9370754 0.7365883 0.9346722\n\nsapply() is returning a vector.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Conditions and For Loop</span>"
    ]
  },
  {
    "objectID": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#for-loop-vs-apply-functions",
    "href": "9-Conditions_and_For_Loop/9-Conditions_and_For_Loop.html#for-loop-vs-apply-functions",
    "title": "20  Conditions and For Loop",
    "section": "20.11 For Loop vs Apply Functions",
    "text": "20.11 For Loop vs Apply Functions\n\nHow to decide you should use a loop or apply function?\n\nUse an apply function when the results of each iteration are independent.\nUse a loop when the result of the next iteration depends on the result of the previous iteration.\n\n\nExample 13.4\n\nset.seed(345)    # for replication purposes\namount0 = 1000\nrates = rnorm(n = 10, mean = 0.10, sd = 0.18)\n\n# output vector (to be populated)\namounts = c(amount0, double(length = 10)) ### preallocate the output container\n\nyear = 1:10\n\n# for loop\nfor (s in seq_along(year)) { ### Use seq_along(year) instead of 1:length(year) is recommended\n  amounts[s+1] = amounts[s] * (1 + rates[s])\n}\n\namounts\n#&gt;  [1] 1000.0000  958.7165 1006.3527 1077.7409 1129.1412 1228.3298 1211.0918\n#&gt;  [8] 1129.9604 1590.9151 2223.8740 3170.9926\n\n\n\n\nRecommendations when using for loop:\n\nIf you’re generating data, make sure to preallocate the output container. Otherwise the loop will be very slow. Do not grow vectors.\nIt’s recommended to use seq_along(x), instead of 1:length(x) or vector x, as the iterations vector.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Conditions and For Loop</span>"
    ]
  },
  {
    "objectID": "Quiz9/Quiz9.html",
    "href": "Quiz9/Quiz9.html",
    "title": "21  Quiz 9 Instructions",
    "section": "",
    "text": "21.1 Question 1\n[2pts] Write an if-else statements within the function is_multiple_of_3 to return TRUE if a number is a multiple of 3, FALSE if not, for any given numeric value. Run the function use x1 = 77. Find y1 = is_multiple_of_3(x1).",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Quiz 9 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz9/Quiz9.html#question-2",
    "href": "Quiz9/Quiz9.html#question-2",
    "title": "21  Quiz 9 Instructions",
    "section": "21.2 Question 2",
    "text": "21.2 Question 2\n[2pts] Givenx2 = 1:100, write a for loop to create a vector y2 where each value is TRUE if the corresponding value in x2 is a multiple of 3, and FALSE otherwise, using is_multiple_of_3() function in the previous question.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Quiz 9 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz9/Quiz9.html#question-3",
    "href": "Quiz9/Quiz9.html#question-3",
    "title": "21  Quiz 9 Instructions",
    "section": "21.3 Question 3",
    "text": "21.3 Question 3\n[2pts] Use ifelse() to achieve the same objective as the previous question. Creating y3 where each value is TRUE if the corresponding value in x3 = 100:200 is a multiple of 3, and FALSE otherwise.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Quiz 9 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz9/Quiz9.html#question-4",
    "href": "Quiz9/Quiz9.html#question-4",
    "title": "21  Quiz 9 Instructions",
    "section": "21.4 Question 4",
    "text": "21.4 Question 4\n\n[2pts] Given the letter grades vector L.Grades below. Write a function Grade.Value() that converts “A” to 4, “B” to 3, “C” to 2, “D” to 1, and “F” to 0. (Hint: swith statement)\n\n\nL.Grades &lt;- c(\"B\", \"C\", \"A\", \"C\", \"C\", \"B\", \"F\", \"A\", \n              \"B\", \"A\", \"B\", \"B\", \"A\", \"A\", \"A\", \"B\", \n              \"D\", \"B\", \"B\", \"A\")\n\n\n[2pts] Use sapply() to convert L.Grades to grade values vector G.values, by using the Grade.Value() function created in part (a).",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Quiz 9 Instructions</span>"
    ]
  },
  {
    "objectID": "10-whileloop/10-whileloop.html",
    "href": "10-whileloop/10-whileloop.html",
    "title": "22  While Loop and More about Functions",
    "section": "",
    "text": "22.1 Reading Assignments",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>While Loop and More about Functions</span>"
    ]
  },
  {
    "objectID": "10-whileloop/10-whileloop.html#reading-assignments",
    "href": "10-whileloop/10-whileloop.html#reading-assignments",
    "title": "22  While Loop and More about Functions",
    "section": "",
    "text": "Please make sure you’ve read the following sections in the textbook: R Coding Basics, https://www.gastonsanchez.com/R-coding-basics/\n\nSection 14. Iterations: While Loop\nSection 6.1.4. sprintf\nSection 15. More About Functions\nLexical scoping",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>While Loop and More about Functions</span>"
    ]
  },
  {
    "objectID": "10-whileloop/10-whileloop.html#while-loop",
    "href": "10-whileloop/10-whileloop.html#while-loop",
    "title": "22  While Loop and More about Functions",
    "section": "22.2 While Loop",
    "text": "22.2 While Loop\n\nUse for loop – when you know how many times a given computation needs to be repeated.\nUse while loop – repeat a process without necessarily knowing how many times this repetition will take place\n\n\n\n\nThe generic syntax of while loop is:\n\niterator &lt;- initial\n\nwhile (condition) {\n  do_something\n  iterator &lt;- iterator + 1\n}\n\nExample:\n\ni &lt;- 1\nwhile (i &lt;= 3) {\n    cat(sprintf(\"%d, \", i))\n    i &lt;- i + 1\n}\n#&gt; 1, 2, 3,\n\n# For comparison\ni &lt;- 1\nwhile (i &lt;= 3) {\n    print(i)\n    i &lt;- i + 1\n}\n#&gt; [1] 1\n#&gt; [1] 2\n#&gt; [1] 3\n\n\n22.2.1 cat vs print\n\nprint(\"I will not buy this record.\\n It is scratched.\\n\")\n#&gt; [1] \"I will not buy this record.\\n It is scratched.\\n\"\ncat(\"I will not buy this record.\\n It is scratched.\\n\")\n#&gt; I will not buy this record.\n#&gt;  It is scratched.\n\n\n\n22.2.2 sprintf\n\nx = letters[3:1]\n\nfor(i in 1:3){\n  cat(sprintf(\"Obs %d is %s.\", i, x[i]), \"\\n\")\n}\n#&gt; Obs 1 is c. \n#&gt; Obs 2 is b. \n#&gt; Obs 3 is a.\n\nPlease find more information about sprintf in Section 6.1.4 at https://deepr.gagolewski.com/chapter/160-character.html or help(sprintf)\nExample 14.3\n\nset.seed(234)  # for replication purposes\n\n# vector of 10 random integers between 1 and 100\nrandom_numbers = sample.int(n = 100, size = 10, replace = FALSE)\nrandom_numbers = sort(random_numbers)\nrandom_numbers\n#&gt;  [1]  1 18 31 34 46 56 68 92 97 98\n\n\n# initialize object of cumulative sum\ntotal_sum = 0\n\n# declare iterator\npos = 0\n\n# repetitive steps\nwhile (total_sum &lt;= 100) {\n  pos = pos + 1\n  total_sum = total_sum + random_numbers[pos]\n}\n\n# what is the value of the cumulative sum?\ntotal_sum\n#&gt; [1] 130\n# how many iterations were necessary?\npos\n#&gt; [1] 5\n\n\n\n22.2.3 The next and break statements\n\nnext – skipping certain iterations\nbreak – stop a loop from iterating",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>While Loop and More about Functions</span>"
    ]
  },
  {
    "objectID": "10-whileloop/10-whileloop.html#loop-using-repeat",
    "href": "10-whileloop/10-whileloop.html#loop-using-repeat",
    "title": "22  While Loop and More about Functions",
    "section": "22.3 Loop using repeat",
    "text": "22.3 Loop using repeat\nExample of using repeat and break:\n\nx = 42\n\nrepeat {\n  print(x)\n  if (x &lt; 1) {\n    break\n  }\n  x = sqrt(x) - 1\n}\n#&gt; [1] 42\n#&gt; [1] 5.480741\n#&gt; [1] 1.341098\n#&gt; [1] 0.1580579\n\n\n# Equivalently,\n\nx = 42\n\nwhile (x &gt;=1){\n  if(x==42) print(x)\n  x = sqrt(x) - 1\n  print(x)\n}\n#&gt; [1] 42\n#&gt; [1] 5.480741\n#&gt; [1] 1.341098\n#&gt; [1] 0.1580579",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>While Loop and More about Functions</span>"
    ]
  },
  {
    "objectID": "10-whileloop/10-whileloop.html#more-about-functions-nested-functions",
    "href": "10-whileloop/10-whileloop.html#more-about-functions-nested-functions",
    "title": "22  While Loop and More about Functions",
    "section": "22.4 More About Functions: Nested Functions",
    "text": "22.4 More About Functions: Nested Functions\nExample 15.1.2\n\ngetmax = function(a) {\n  # nested function\n  maxpos &lt;- function(u){\n    which.max(u)  \n  }\n  \n  # output\n  list(position = maxpos(a),\n       value = max(a))\n}\ngetmax(c(2, -4, 6, 10, pi))\n#&gt; $position\n#&gt; [1] 4\n#&gt; \n#&gt; $value\n#&gt; [1] 10",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>While Loop and More about Functions</span>"
    ]
  },
  {
    "objectID": "10-whileloop/10-whileloop.html#more-about-functions-lexical-scoping",
    "href": "10-whileloop/10-whileloop.html#more-about-functions-lexical-scoping",
    "title": "22  While Loop and More about Functions",
    "section": "22.5 More About Functions: Lexical Scoping",
    "text": "22.5 More About Functions: Lexical Scoping\nR’s lexical scoping follows four primary rules:\n\nName masking\nFunctions versus variables\nA fresh start\nDynamic lookup\n\n\n22.5.1 Name Masking\n\nName defined inside a function mask names defined outside a function.\n\n\nx &lt;- 10\ny &lt;- 20\n\ng02 &lt;- function() {\n  x &lt;- 1\n  y &lt;- 2\n  c(x, y)\n}\n\ng02()\n#&gt; [1] 1 2\n\n\nx &lt;- 2\ng03 &lt;- function() {\n  y &lt;- 1\n  c(x, y)\n}\ng03()\n#&gt; [1] 2 1\n\nx\n#&gt; [1] 2\ny\n#&gt; [1] 20\n\n\n\n22.5.2 Functions versus variables\n\nFunction_names defined inside a function mask function_names defined outside a function.\n\n\ng07 &lt;- function(x) x + 1\ng08 &lt;- function() {\n  g07 &lt;- function(x) x + 100\n  g07(10)\n}\ng08()\n#&gt; [1] 110\n\n\nWhen a function and a non-function share the same name, R ignores non-function objects when looking for that value.\n\n\ng09 &lt;- function(x) x + 100\ng10 &lt;- function() {\n  g09 &lt;- 10\n  g09(g09)\n}\ng10()\n#&gt; [1] 110\n\n\n\n22.5.3 A fresh start\n\ng11 &lt;- function() {\n  if (!exists(\"a\")) {\n    a &lt;- 1\n  } else {\n    a &lt;- a + 1\n  }\n  a\n}\n\ng11()\n#&gt; [1] 1\ng11()\n#&gt; [1] 1\n\n\n\n22.5.4 Dynamic lookup\n\ng12 &lt;- function() x + 1\nx &lt;- 15\ng12()\n#&gt; [1] 16\n#&gt; [1] 16\n\nx &lt;- 20\ng12()\n#&gt; [1] 21\n#&gt; [1] 21",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>While Loop and More about Functions</span>"
    ]
  },
  {
    "objectID": "10-whileloop/10-whileloop.html#more-about-functions-signalling-conditions",
    "href": "10-whileloop/10-whileloop.html#more-about-functions-signalling-conditions",
    "title": "22  While Loop and More about Functions",
    "section": "22.6 More About Functions: Signalling Conditions",
    "text": "22.6 More About Functions: Signalling Conditions\n\nis_even_or_odd &lt;- function(x){\n  if (!is.integer(x)){\n    stop(\"Not a whole number\")\n    } else if (x %% 2 == 0){\n      return(\"even\")\n      } else {\n        return(\"odd\")\n      }\n}\n\n\nis_even_or_odd(5.5)\n#&gt; Error in is_even_or_odd(5.5): Not a whole number\n\n\nstop() can also be used in for loops.\n\nExample:\n\nfor(i in 1:10){\n  if(i %% 5 == 0){\n    stop(\"A multiple of 5\") # break & error message\n  }\n  print(i)\n}\n#&gt; [1] 1\n#&gt; [1] 2\n#&gt; [1] 3\n#&gt; [1] 4\n#&gt; Error in eval(expr, envir, enclos): A multiple of 5\n\n\n# For comparison purpose\n\nfor(i in 1:10){\n  if(i %% 5 == 0){\n    break\n  }\n  print(i)\n}\n#&gt; [1] 1\n#&gt; [1] 2\n#&gt; [1] 3\n#&gt; [1] 4\n\n\n22.6.0.1 More on signalling conditions\n\nThere are three conditions that you can signal in code: errors, warnings, and messages.\n\nErrors are the most severe. Severe issue \\(\\Rightarrow\\) the execution of the program should stop immediately.\nWarnings fall somewhat in between errors and message. Condition is not critical, the program will continue to run, but the user should be alerted about potential issues.\nMessages are the mildest.  For informational purposes, the flow of the program is not interfered.\n\nPlease find more information at https://adv-r.hadley.nz/conditions.html?q=while#signalling-conditions\nWarning\n\n\nfor(i in 1:10){\n  if(i %% 5 == 0){\n    warning(\"A multiple of 5\")\n  }\n  print(i)\n}\n#&gt; [1] 1\n#&gt; [1] 2\n#&gt; [1] 3\n#&gt; [1] 4\n#&gt; Warning: A multiple of 5\n#&gt; [1] 5\n#&gt; [1] 6\n#&gt; [1] 7\n#&gt; [1] 8\n#&gt; [1] 9\n#&gt; Warning: A multiple of 5\n#&gt; [1] 10\n\n\nMessage\n\n\nfor(i in 1:10){\n  if(i %% 5 == 0){\n    message(\"A multiple of 5\")\n  }\n  print(i)\n}\n#&gt; [1] 1\n#&gt; [1] 2\n#&gt; [1] 3\n#&gt; [1] 4\n#&gt; A multiple of 5\n#&gt; [1] 5\n#&gt; [1] 6\n#&gt; [1] 7\n#&gt; [1] 8\n#&gt; [1] 9\n#&gt; A multiple of 5\n#&gt; [1] 10",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>While Loop and More about Functions</span>"
    ]
  },
  {
    "objectID": "10-whileloop/10-whileloop.html#more-about-functions-for-readable-codes",
    "href": "10-whileloop/10-whileloop.html#more-about-functions-for-readable-codes",
    "title": "22  While Loop and More about Functions",
    "section": "22.7 More About Functions: For Readable Codes",
    "text": "22.7 More About Functions: For Readable Codes\n\n22.7.1 White Spaces\nExample:\n\nif (!is.vector(x)) {\n  stop('x must be a vector')\n} else {\n  if (any(is.na(x))) {\n    x &lt;- x[!is.na(x)]\n  }\n  total &lt;- length(x)\n  x_sum &lt;- 0\n  for (i in seq_along(x)) {\n    x_sum &lt;- x_sum + x[i]\n  }\n  x_sum / total\n}\n\nLeft parenthesis should start immediately after a function name\n\n# NOT Recommended \nread.table ('data.csv', header = TRUE, row.names = 1)\n\n# Recommended \nread.table('data.csv', header = TRUE, row.names = 1)\n\n\n\n22.7.2 Indention\nExample:\n\n# better with indentation\nif (!is.vector(x)) {\n  stop('x must be a vector')\n} else {\n  if (any(is.na(x))) {\n    x &lt;- x[!is.na(x)]\n  }\n  total &lt;- length(x)\n  x_sum &lt;- 0\n  for (i in seq_along(x)) {\n    x_sum &lt;- x_sum + x[i]\n  }\n  x_sum / total\n}\n\nSection 15.3.1 Meaningful Names https://www.gastonsanchez.com/R-coding-basics/5-06-more-functions.html#meaningful-names\nSection 15.3.2 Syntax: Parentheses https://www.gastonsanchez.com/R-coding-basics/5-06-more-functions.html#syntax-parentheses",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>While Loop and More about Functions</span>"
    ]
  },
  {
    "objectID": "Lab4/Lab4.html",
    "href": "Lab4/Lab4.html",
    "title": "23  Lab 4",
    "section": "",
    "text": "23.1 Question 1\nEstimate the value of \\(\\pi\\) by using probability simulation\n[Hints:\nThe plot should be something looks like\n[Hint: The following example might be helpful.]\n# Generate some data\nx = 1:10\ny = 1 + x\nu = 1:10\nv = 12 - u\n\n# Use plot() and points()\nplot(x, y, col = \"blue\") # Draw points with coordinates (x, y)\npoints(u, v, col = \"orange\") # Add points to the plot above.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Lab 4</span>"
    ]
  },
  {
    "objectID": "Lab4/Lab4.html#question-1",
    "href": "Lab4/Lab4.html#question-1",
    "title": "23  Lab 4",
    "section": "",
    "text": "[20 pts] Please take random \\(n\\) points (say, \\(n=10000\\)) with in the [0, 1] * [0, 1] square in the Cartesian coordinate system. Then determine if the point is in the upper right quarter circle centered at the origin of radius 1. Calculate the probability of fall in the quarter-circle, which should be close to \\(\\frac{\\pi}{4}\\).\n\n\n\nYou may use runif() for taking the random points.\nYou may use if…else statement and for loop.]\n\n\n\n\n\n[10 pts] Draw the simulation points using plot() and points() by coloring the in-circle points blue and out-circle points orange.\n\n\n\n\n\n\n\n\n\n[5 pts] Based on the probability calculated in (a), estimate the value of \\(\\pi\\).",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Lab 4</span>"
    ]
  },
  {
    "objectID": "Lab4/Lab4.html#question-2-central-limit-theorem-simulation",
    "href": "Lab4/Lab4.html#question-2-central-limit-theorem-simulation",
    "title": "23  Lab 4",
    "section": "23.2 Question 2 Central Limit Theorem Simulation",
    "text": "23.2 Question 2 Central Limit Theorem Simulation\nThe Central Limit Theorem (CLT) is one of the most important concepts in statistics. It states that for any population distribution with a mean \\(\\mu\\) and standard deviation \\(\\sigma\\), if we randomly select a sufficiently large sample (sample size \\(n\\)), calculate its mean, and repeat this process a large number of times (\\(t\\) times), the distribution of these sample means will approximate a normal distribution centered around \\(\\mu\\). The standard deviation of this distribution, known as the Standard Error, will be \\(\\frac{\\sigma}{\\sqrt{n}}\\).\nPlease execute the following code to obtain the waiting.time vector, which contains the waiting times (in minutes) for Pirates of the Caribbean at Disney World. We will use the 5168 waiting time values as the population data.\n\nif(!require(\"devtools\", character.only = TRUE)) install.packages(\"devtools\")\nlibrary(devtools)\nif(!require(\"touringplans\", character.only = TRUE)){\n  devtools::install_github(\"LucyMcGowan/touringplans\")\n} \nlibrary(touringplans)\n\nwaiting.time = \n  na.omit(touringplans_2018$wait_minutes_posted_avg\n          [touringplans_2018$attraction_name ==  \"Pirates of the Caribbean\"])\n\nhist(waiting.time)\n\n\n\n\n\n\n\n\nset.seed(1)  # for replication purposes\n\n\n[5 pts] Is the distribution above left-skewed? Right-skewed? Or symmetric? Find the population mean waiting time \\(\\mu\\) and population standard deviation \\(\\sigma\\).\n\n\n\n\n\n[10 pts] Let the sample size \\(n = 2\\). In other words,\n\n\nStep 1: Take a random sample of two waiting times with replacement from the waiting.time vector each time. You may use sample(..., replace = TRUE) for this step.\nStep 2: Find the average of the two sampled waiting times.\nRepeat Step 1 and 2 for \\(t = 1000\\) times and save the means as the vector sample.mean. Then use hist() to draw the histogram of sample.mean. Is the distribution left-skewed, right-skewed, or symmetric?\n\n\n\n\n\n[5 pts] Continue with part (b). Calculate the mean and standard deviation of sample.mean vector. Are these values close to \\(\\mu\\) and \\(\\frac{\\sigma}{\\sqrt{n}}\\), where \\(\\mu\\) and \\(\\sigma\\) are from part (a), respectively? [Please note that the values do not need to be exact the same; being close enough is sufficient.]\n\n\n\n\n\n[20 pts] Write a function named sample.mean.n.t for a given \\(n\\) and \\(t\\), get the sample.mean vector of the means. Try the function with \\(n = 50\\) and \\(t = 2000\\). Use hist() to draw the histogram of the \\(2000\\) means. Is the distribution left skewed, right skewed, or symmetric?\n\n\n\n\n\n[5 pts] Continue with part (d). Find the mean and standard deviation of sample.mean. Are these values close to \\(\\mu\\) and \\(\\frac{\\sigma}{\\sqrt{n}}\\), where \\(\\mu\\) and \\(\\sigma\\) are from part (a)?",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Lab 4</span>"
    ]
  },
  {
    "objectID": "11-ImportExport/11-ImportExport.html",
    "href": "11-ImportExport/11-ImportExport.html",
    "title": "24  Import and Export",
    "section": "",
    "text": "24.1 Reading Assignments",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Import and Export</span>"
    ]
  },
  {
    "objectID": "11-ImportExport/11-ImportExport.html#reading-assignments",
    "href": "11-ImportExport/11-ImportExport.html#reading-assignments",
    "title": "24  Import and Export",
    "section": "",
    "text": "Please make sure you’ve read the following sections in the textbook: R Coding Basics, https://www.gastonsanchez.com/R-coding-basics/\n\nSection 16. Introduction\nSection 17. Importing Data Tables\nSection 18. Exporting Data",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Import and Export</span>"
    ]
  },
  {
    "objectID": "11-ImportExport/11-ImportExport.html#importing-data-tables-example",
    "href": "11-ImportExport/11-ImportExport.html#importing-data-tables-example",
    "title": "24  Import and Export",
    "section": "24.2 Importing Data Tables (Example)",
    "text": "24.2 Importing Data Tables (Example)\n\n24.2.1 Reading space-sepearted files\nPlease download the accounts.txt file.\nExample 1. Importing table in blank separated file\n\n# using read.table()\ndat &lt;- read.table(\n  file = \"accounts.txt\", \n  header = TRUE)\n\nis.factor(dat$account)\n#&gt; [1] FALSE\nis.factor(dat$bank)\n#&gt; [1] FALSE\n\nExample 2. Limit the number of rows to read in (first 2 rows):\n\ndat &lt;- read.table(\n  file = \"accounts.txt\", \n  header = TRUE,\n  nrows = 2)\n\nExample 3. Skip the first row (no header) and limit the number of rows to read in (4 rows)\n\ndat &lt;- read.table(\n  file = \"accounts.txt\", \n  header = FALSE,\n  skip = 1,\n  nrows = 4)\n\nExample 4. Skip importing the second and third columns\n\ndat &lt;- read.table(\n  file = \"accounts.txt\", \n  header = TRUE, \n  colClasses = c(\n    \"character\",\n    \"NULL\",\n    \"NULL\",\n    \"numeric\"))\n\nExample 5. Use stringsAsFactors = TRUE\n\nIn versions of R &lt; 4.0.0, read.table() and friends convert character strings into factors by default.\nIn new versions of R, you need to specify stringsAsFactors = TRUE to convert character strings into factor, which should be convenient when you work on categorical data analysis.\nUsing StringsAsFactors = TRUE or as.is = FALSE are equivalent.\n\n\n# Specify stringsAsFactors = TRUE and check the type\ndat &lt;- read.table(\n  file = \"accounts.txt\", \n  header = TRUE,\n  stringsAsFactors = TRUE)\n\nis.factor(dat$account)\n#&gt; [1] TRUE\nis.factor(dat$bank)\n#&gt; [1] TRUE\n\n\n# Equivalently, using as.is = FALSE\ndat &lt;- read.table(\n  file = \"accounts.txt\", \n  header = TRUE,\n  as.is = FALSE)\n\nis.factor(dat$account)\n#&gt; [1] TRUE\nis.factor(dat$bank)\n#&gt; [1] TRUE",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Import and Export</span>"
    ]
  },
  {
    "objectID": "11-ImportExport/11-ImportExport.html#importing-data-tables-exercise",
    "href": "11-ImportExport/11-ImportExport.html#importing-data-tables-exercise",
    "title": "24  Import and Export",
    "section": "24.3 Importing Data Tables (Exercise)",
    "text": "24.3 Importing Data Tables (Exercise)\nExercise 1: Download any .txt data from the weblink and try the read.table() function and the arguments introduced above.\nExercise 2: Download PlantGrowth.txt data from the weblink and try the read.table() function and the quote arguments.\n\ndat &lt;- read.table(\n  file = \"PlantGrowth.txt\", \n  header = TRUE, \n  quote = \"\\\"'\")\nhead(dat)\n#&gt;   weight group\n#&gt; 1   4.17  ctrl\n#&gt; 2   5.58  ctrl\n#&gt; 3   5.18  ctrl\n#&gt; 4   6.11  ctrl\n#&gt; 5   4.50  ctrl\n#&gt; 6   4.61  ctrl\n\ndat &lt;- read.table(\n  file = \"PlantGrowth.txt\", \n  header = TRUE, \n  quote = \"\")\nhead(dat)\n#&gt;   X.weight. X.group.\n#&gt; 1      4.17   \"ctrl\"\n#&gt; 2      5.58   \"ctrl\"\n#&gt; 3      5.18   \"ctrl\"\n#&gt; 4      6.11   \"ctrl\"\n#&gt; 5      4.50   \"ctrl\"\n#&gt; 6      4.61   \"ctrl\"\n\nExercise 3: Download PlantGrowth.txt data from the weblink and try the read.table() function and the quote arguments.\n\ndat &lt;- read.table(\n  file = \"PlantGrowth.txt\", \n  header = TRUE, \n  quote = \"\\\"'\")\nhead(dat)\n#&gt;   weight group\n#&gt; 1   4.17  ctrl\n#&gt; 2   5.58  ctrl\n#&gt; 3   5.18  ctrl\n#&gt; 4   6.11  ctrl\n#&gt; 5   4.50  ctrl\n#&gt; 6   4.61  ctrl\n\ndat &lt;- read.table(\n  file = \"PlantGrowth.txt\", \n  header = TRUE, \n  quote = \"\")\nhead(dat)\n#&gt;   X.weight. X.group.\n#&gt; 1      4.17   \"ctrl\"\n#&gt; 2      5.58   \"ctrl\"\n#&gt; 3      5.18   \"ctrl\"\n#&gt; 4      6.11   \"ctrl\"\n#&gt; 5      4.50   \"ctrl\"\n#&gt; 6      4.61   \"ctrl\"\n\nExercise 4: Download airquality.txt data from the weblink and try the read.table() function and the na.strings arguments.\n\n### airquality.txt\ndat &lt;- read.table(\n  file = \"airquality.txt\", \n  header = TRUE, \n  na.strings = \"NA\")\nhead(dat)\n#&gt;   Ozone Solar.R Wind Temp Month Day\n#&gt; 1    41     190  7.4   67     5   1\n#&gt; 2    36     118  8.0   72     5   2\n#&gt; 3    12     149 12.6   74     5   3\n#&gt; 4    18     313 11.5   62     5   4\n#&gt; 5    NA      NA 14.3   56     5   5\n#&gt; 6    28      NA 14.9   66     5   6\nsum(is.na(dat))\n#&gt; [1] 44\n\ndat &lt;- read.table(\n  file = \"airquality.txt\", \n  header = TRUE, \n  na.strings = \"\")\nhead(dat)\n#&gt;   Ozone Solar.R Wind Temp Month Day\n#&gt; 1    41     190  7.4   67     5   1\n#&gt; 2    36     118  8.0   72     5   2\n#&gt; 3    12     149 12.6   74     5   3\n#&gt; 4    18     313 11.5   62     5   4\n#&gt; 5    NA      NA 14.3   56     5   5\n#&gt; 6    28      NA 14.9   66     5   6\nsum(is.na(dat))\n#&gt; [1] 0\n\nExercise 5: Download missing_values_dataset.txt data, in which NA, empty strings \"\", NULL, NaN, or special values like -99, or 9999 are all missing values. Use na.strings arguments to identify all of these missing values.\n\n### missing_values_dataset.txt\ndat &lt;- read.table(\n  file = \"missing_values_dataset.txt\", \n  header = TRUE, \n  na.strings = c(NA, \" \", \"NULL\", \"NaN\", \"-99\", \"9999\"))\ndat\n#&gt;      Name Age Height Score\n#&gt; 1   Alice  25    165    80\n#&gt; 2    &lt;NA&gt;  30    175    NA\n#&gt; 3 Charlie  NA     NA    75\n#&gt; 4   David  22     NA    NA\n#&gt; 5    &lt;NA&gt;  NA    180    60\nsum(is.na(dat))\n#&gt; [1] 8",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Import and Export</span>"
    ]
  },
  {
    "objectID": "11-ImportExport/11-ImportExport.html#importing-data-tables-reading-comma-seperated-files",
    "href": "11-ImportExport/11-ImportExport.html#importing-data-tables-reading-comma-seperated-files",
    "title": "24  Import and Export",
    "section": "24.4 Importing Data Tables – Reading comma-seperated files",
    "text": "24.4 Importing Data Tables – Reading comma-seperated files\n\n\n\n\n24.4.1 read.csv() vs read.csv2()\n\nUse read.csv() when the file uses a comma , as the field separator and a period . for decimals. That is, import comma separated values (US and many other countries).\nUse read.csv2() when the file uses a semicolon ; as the field separator and a comma , for decimals. That is, import semicolon separated values (Europe).\n\nThis distinction is important, especially when working with datasets formatted according to different regional standards. Similarly for read.delim() and read.delim2().\nPlease download the accounts.csv file.\nExample 1. We can use read.table(). Or more conveniently, we can use read.csv().\n\n# using read.table()\ndat &lt;- read.table(\n  file = \"accounts.csv\",\n  header = TRUE,\n  sep = \",\")\n\n# using read.csv()\ndat &lt;- read.csv(file = \"accounts.csv\")\n\nExercise 1: Download any .csv data from the weblink and try the read.csv() function and the arguments introduced above.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Import and Export</span>"
    ]
  },
  {
    "objectID": "11-ImportExport/11-ImportExport.html#exporting-tables",
    "href": "11-ImportExport/11-ImportExport.html#exporting-tables",
    "title": "24  Import and Export",
    "section": "24.5 Exporting Tables",
    "text": "24.5 Exporting Tables\nwrite.table(), write.csv()\nExample:\n\n# blank separated (default)\nwrite.table(mtcars, file = 'mtcars.txt', row.names = FALSE)\n\n# tab-separated value\nwrite.table(mtcars, file = 'mtcars.tsv', sep = \"\\t\", row.names = FALSE)\n\n# comma-separated value\nwrite.csv(mtcars, file = 'mtcars.csv', row.names = FALSE)\n\nExercise 1: What if row.names = TRUE, which is the default option for write.table() and write.csv()?\nExercise 2: Load any dataset from a R package. Write a csv file for the dataset.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Import and Export</span>"
    ]
  },
  {
    "objectID": "11-ImportExport/11-ImportExport.html#exporting-text-non-tabular-data",
    "href": "11-ImportExport/11-ImportExport.html#exporting-text-non-tabular-data",
    "title": "24  Import and Export",
    "section": "24.6 Exporting Text (non-tabular data)",
    "text": "24.6 Exporting Text (non-tabular data)\nExample:\n\n# create a connection to a file\n# (assuming output file in working directory)\ntxt &lt;- file(\"mytext.txt\")\n\n# write contents to the file \nwriteLines(text = some_text, con = txt) # con stands for connection\n\n\n# Equivalently, write contents to the file \nwriteLines(text = some_text, con = \"mytext.txt\")\n\nNote: Calling file() just creates the connection object but it does not open it. The function writeLines() is the one that opens the connection, writes the content to the file mytext.txt, and then closes the connection on exiting.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Import and Export</span>"
    ]
  },
  {
    "objectID": "11-ImportExport/11-ImportExport.html#sending-output-with-cat",
    "href": "11-ImportExport/11-ImportExport.html#sending-output-with-cat",
    "title": "24  Import and Export",
    "section": "24.7 Sending output with cat()",
    "text": "24.7 Sending output with cat()\nRecall cat() and sprintf() functions.\n\n# summary statistics of mpg\nmin(mtcars$mpg)\nmax(mtcars$mpg)\nmedian(mtcars$mpg)\nmean(mtcars$mpg)\nsd(mtcars$mpg)\n\n\n\n# summary statistics of mpg\nmpg_min &lt;- min(mtcars$mpg)\nmpg_max &lt;- max(mtcars$mpg)\nmpg_med &lt;- median(mtcars$mpg)\nmpg_avg &lt;- mean(mtcars$mpg)\nmpg_sd &lt;- sd(mtcars$mpg)\n\n# name of output file\noutfile &lt;- \"mpg-statistics.txt\"\n\n# first line of the file\ncat(\"Miles per Gallon Statistics\\n\\n\", file = outfile)\n# subsequent lines appended to the output file\ncat(\"Minimum:\", mpg_min, \"\\n\", file = outfile, append = TRUE)\ncat(\"Maximum:\", mpg_max, \"\\n\", file = outfile, append = TRUE)\ncat(\"Median :\", mpg_med, \"\\n\", file = outfile, append = TRUE)\ncat(\"Mean   :\", mpg_avg, \"\\n\", file = outfile, append = TRUE)\ncat(\"Std Dev:\", mpg_sd, \"\\n\", file = outfile, append = TRUE)\n\n\n# name of output file\noutfile &lt;- \"mpg-statistics 2.txt\"\n\ncat(\"Miles per Gallon Statistics\\n\\n\", file = outfile)\ncat(sprintf(\"Minimum: %0.2f\", mpg_min), \"\\n\", file = outfile, append = TRUE)\ncat(sprintf(\"Maximum: %0.2f\", mpg_max), \"\\n\", file = outfile, append = TRUE)\ncat(sprintf(\"Median : %0.2f\", mpg_med), \"\\n\", file = outfile, append = TRUE)\ncat(sprintf(\"Mean   : %0.2f\", mpg_avg), \"\\n\", file = outfile, append = TRUE)\ncat(sprintf(\"Std Dev: %0.2f\", mpg_sd), \"\\n\", file = outfile, append = TRUE)",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Import and Export</span>"
    ]
  },
  {
    "objectID": "11-ImportExport/11-ImportExport.html#redirecting-output-with-sink",
    "href": "11-ImportExport/11-ImportExport.html#redirecting-output-with-sink",
    "title": "24  Import and Export",
    "section": "24.8 Redirecting output with sink()",
    "text": "24.8 Redirecting output with sink()\nsink() function can export R output as it is displayed in R’s console.\nExample:\nTry the code below and get the output in R’s console.\n\nsummary(mtcars[ ,c('mpg', 'hp', 'cyl')])\n\nTo be able to keep the same output displayed by R, you must use sink(). This function will divert R output to the specified file.\n\n# sink output\nsink(file = \"mtcars-stats.txt\")\n\n# summary statistics\nsummary(mtcars[ ,c('mpg', 'hp', 'cyl')])\n\n# stops diverting output\nsink()\n\nDo not forget to use sink() again, without specifying any arguments, to stop the sinking process.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Import and Export</span>"
    ]
  },
  {
    "objectID": "11-ImportExport/11-ImportExport.html#other-exporting-in-r",
    "href": "11-ImportExport/11-ImportExport.html#other-exporting-in-r",
    "title": "24  Import and Export",
    "section": "24.9 Other Exporting in R",
    "text": "24.9 Other Exporting in R\n\nExporting and importing R data – save() and load()\n\n\nmtcars3 = mtcars[ ,c('mpg', 'hp', 'cyl')]\nsave(mtcars3, file = 'mtcars3.RData')\nload('mtcars3.RData')\n\n\nExporting Images – will be discussed in Base R Graphics",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Import and Export</span>"
    ]
  },
  {
    "objectID": "Quiz11/Quiz11.html",
    "href": "Quiz11/Quiz11.html",
    "title": "25  Quiz 11 Instructions",
    "section": "",
    "text": "25.1 Data Preparation – Practice converting XLSX file to CSV\nPlease review the instructions on “How to convert Excel file to CSV” at https://www.ablebits.com/office-addins-blog/convert-excel-csv/. Then, save the “BLACKFRIDAY” and “COFFEE” spreadsheets from “Datasets.xlsx” as two separate CSV files named “BLACKFRIDAY.csv” and “COFFEE.csv”.\nAfter this step, we will disregard “Datasets.xlsx” and only use the two newly created CSV files for the following questions.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Quiz 11 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz11/Quiz11.html#question-1",
    "href": "Quiz11/Quiz11.html#question-1",
    "title": "25  Quiz 11 Instructions",
    "section": "25.2 Question 1",
    "text": "25.2 Question 1\n\n[1pt] Import the first 4 columns and first 8 rows of “COFFEE.csv” and save the data frame as COFFEE.PART1. [Hint: You may use nrows and colClasses for this task.]\n\nThe imported data frame should be\n\n#&gt;   DEMAND PRICE         X Pred_DEMAND\n#&gt; 1   1120   3.0 0.3333333   1088.8869\n#&gt; 2    999   3.1 0.3225806   1015.6815\n#&gt; 3    932   3.2 0.3125000    947.0514\n#&gt; 4    884   3.3 0.3030303    882.5807\n#&gt; 5    807   3.4 0.2941176    821.9024\n#&gt; 6    760   3.5 0.2857143    764.6914\n#&gt; 7    701   3.6 0.2777778    710.6588\n#&gt; 8    688   3.7 0.2702703    659.5469\n\n\n[2pts] Export the regression analysis results to file “REGRESSION_COFFEE_PART1.txt”.\n\n[Hint: You may use cat() and sink() for this task; You may use the following R codes.\n\nlmod &lt;- lm(PRICE ~ DEMAND, data = COFFEE.PART1)\nsummary(lmod)\nanova(lmod)\n\n].\nThe final TXT file “REGRESSION_COFFEE_PART1.txt” should look like:\n\n\n\n\n\n\n[1pt] Import the last 3 columns of “COFFEE.csv” and save the data frame as COFFEE.PART2. Then rename the second column name as inverseP.\n\nThe imported data frame should be: (Below we only show the first and last 3 rows to save space)\n\nhead(COFFEE.PART2, 3)\n#&gt;      P  inverseP     Dhat\n#&gt; 1 3.00 0.3333333 1089.333\n#&gt; 2 3.01 0.3322259 1081.794\n#&gt; 3 3.02 0.3311258 1074.305\ntail(COFFEE.PART2, 3)\n#&gt;       P  inverseP     Dhat\n#&gt; 69 3.68 0.2717391 670.0000\n#&gt; 70 3.69 0.2710027 664.9864\n#&gt; 71 3.70 0.2702703 660.0000\n\n\n[1pt] Use plot(COFFEE.PART2$P, COFFEE.PART2$inverseP) to draw the scatterplot and save the plot as “PLOT_COFFEE_PART2.png”, make sure you use bg = \"transparent\" to set the background to transparent.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Quiz 11 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz11/Quiz11.html#question-2",
    "href": "Quiz11/Quiz11.html#question-2",
    "title": "25  Quiz 11 Instructions",
    "section": "25.3 Question 2",
    "text": "25.3 Question 2\n[2pts] Import “BLACKFRIDAY.csv” and save the data frame as BLACKFRIDAY. Filter the data frame with YEARS greater than 10, and save the result as BLACKFRIDAY_gt10. Export data frame BLACKFRIDAY_gt10 to CSV file “BLACKFRIDAY_gt10.csv”. Make sure you use row.names = FALSE to avoid writing the row names.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Quiz 11 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz11/Quiz11.html#question-3",
    "href": "Quiz11/Quiz11.html#question-3",
    "title": "25  Quiz 11 Instructions",
    "section": "25.4 Question 3",
    "text": "25.4 Question 3\nUse “CLEANDATA.txt” for this question. Complete the following parts.\n\n[2pts]\n\nStep 1: Skip the first five rows (consider the column names as Row 1) and import “CLEANDATA.txt”. Save the data frame as CLEANDATA.\nStep 2: Scan the column names from “CLEANDATA.txt” as header. Then assemble the data frame CLEANDATA and header.\nThe data frame CLEANDATA should be:\n\n#&gt;    EXP AUTOMATI OUTPUT\n#&gt; 1   &lt;1        M     12\n#&gt; 2   &lt;1        M     10\n#&gt; 3   &lt;1        L      5\n#&gt; 4   &lt;1        L      4\n#&gt; 5   &lt;1        L      8\n#&gt; 6  1-2        H     15\n#&gt; 7  1-2        H     18\n#&gt; 8  1-2        H     17\n#&gt; 9  1-2        M     10\n#&gt; 10 1-2        M     10\n#&gt; 11 1-2        M     12\n#&gt; 12 1-2        L      8\n#&gt; 13 1-2        L     10\n#&gt; 14 1-2        L     10\n#&gt; 15  &gt;2        H     20\n#&gt; 16  &gt;2        H     18\n#&gt; 17  &gt;2        H     19\n#&gt; 18  &gt;2        M     13\n#&gt; 19  &gt;2        M     13\n#&gt; 20  &gt;2        M     14\n#&gt; 21  &gt;2        L     12\n#&gt; 22  &gt;2        L     11\n#&gt; 23  &gt;2        L     13\n\n\n[1pt] Write the CLEANDATA$AUTOMATI, one element per line, to the file “AUTOMATI.txt”.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Quiz 11 Instructions</span>"
    ]
  },
  {
    "objectID": "12-BaseRGraphics/12-BaseRGraphics.html",
    "href": "12-BaseRGraphics/12-BaseRGraphics.html",
    "title": "26  Functions for Base R Graphics",
    "section": "",
    "text": "26.0.1 Data Visualization in R\nR is nowadays equipped with two independent (incompatible, yet coexisting) systems for graphics generation:\n\nTraditional System – base graphics\n\nBuilt-in functionality for creating charts and graphs in R.\nEasier to learn and use.\nIntroduced in this lecture.\n\nNewer System – grid\n\nggplot2 – an open-source data visualization package.\nVery flexible and gaining popularity rapidly nowadays.\nDiscussed later in this class.\n\n\n\n\n26.0.2 Five Basic Graphs and Summary\nR offers several basic graph types, which can be created using its built-in functions. Some of the fundamental graph types in R are scatter plot, line graph (i.e. line plot), histogram, bar plot, box plot, pie chart, dot chart, density plot, etc.\nWe introduce the five basic graphs below with the code summary.\n\nscatterplot\nlinegraph\nhistogram\nboxplot\nbarplot\n\n\n# scatterplot\n  plot(x, y)\n  ## Scatterplot Matrices\n  pairs(dataframe_with_numerical_variables)\n  \n# linegraph\n  plot(x, y, type=\"l\")\n  ## Add another line to the plot\n  lines(x, z)\n  \n# histogram\n  hist(x)\n  \n# boxplot\n  boxplot(y)\n  boxplot(y ~ x)\n  \n# barplot of variable x\n  counts=table(x)\n  barplot(counts)\n\n\n\n26.0.3 Options to Customize the Chart Appearance\n\n\n\n\n\n\n\n\n\n\nlwd \\(\\rightarrow\\) line width\ntype \\(\\rightarrow\\) line between dots (points only, line only, lines connecting points, lines overlaying points) [default is points only]\nlty \\(\\rightarrow\\) line type [default is solid line]\ncex \\(\\rightarrow\\) shape size\ncol \\(\\rightarrow\\) control colors (you can use col = 1, col = 2, col = 3, etc., or col = \"black\", col = \"red\", col = \"green\", etc. The colors() function gives you a vector of colors by name) [default color is “black” or 1]\npch \\(\\rightarrow\\) marker shape [default is open circle]\nThe information above is sourced from https://r-graph-gallery.com/6-graph-parameters-reminder.html\n\n\n\n26.0.4 A Few Key Global Parameters\n\nmain: add a title to the plot\nxlab: add a label for the \\(x\\) axis\nylab: add a label for the \\(y\\) axis\npar() function: used to specify the global graphics parameters that affect all plots in an R session.\n\npar(mar = c(bottom, left, top, right)): adjust the size of the margins. By default mar = c(5.1, 4.1, 4.1, 2.1).\npar(mfrow = c(num_rows, num_cols)): split the plotting area in several panels row-wise filling. For example, par(mfrow=c(3, 2)) split the plotting area in 3 rows, 2 columns (row-wise filling)\npar(mfcol = c(num_rows, num_cols)): split the plotting area in several panels column-wise filling.\n\n\n\n\n26.0.5 Base R Graphics – scatterplot – Example\nFunction: plot(x,y)\nExample: Draw scatterplot of wind vs pressure of the data set storms (in the tidyverse package).\n\n# Data preparation\nlibrary(tidyverse)\ndata(storms) # data frame in tidyverse package\nstr(storms)\n#&gt; tibble [19,537 × 13] (S3: tbl_df/tbl/data.frame)\n#&gt;  $ name                        : chr [1:19537] \"Amy\" \"Amy\" \"Amy\" \"Amy\" ...\n#&gt;  $ year                        : num [1:19537] 1975 1975 1975 1975 1975 ...\n#&gt;  $ month                       : num [1:19537] 6 6 6 6 6 6 6 6 6 6 ...\n#&gt;  $ day                         : int [1:19537] 27 27 27 27 28 28 28 28 29 29 ...\n#&gt;  $ hour                        : num [1:19537] 0 6 12 18 0 6 12 18 0 6 ...\n#&gt;  $ lat                         : num [1:19537] 27.5 28.5 29.5 30.5 31.5 32.4 33.3 34 34.4 34 ...\n#&gt;  $ long                        : num [1:19537] -79 -79 -79 -79 -78.8 -78.7 -78 -77 -75.8 -74.8 ...\n#&gt;  $ status                      : Factor w/ 9 levels \"disturbance\",..: 7 7 7 7 7 7 7 7 8 8 ...\n#&gt;  $ category                    : num [1:19537] NA NA NA NA NA NA NA NA NA NA ...\n#&gt;  $ wind                        : int [1:19537] 25 25 25 25 25 25 25 30 35 40 ...\n#&gt;  $ pressure                    : int [1:19537] 1013 1013 1013 1013 1012 1012 1011 1006 1004 1002 ...\n#&gt;  $ tropicalstorm_force_diameter: int [1:19537] NA NA NA NA NA NA NA NA NA NA ...\n#&gt;  $ hurricane_force_diameter    : int [1:19537] NA NA NA NA NA NA NA NA NA NA ...\n\nstorms[6923, \"category\"]=0 #Fixed one error value\nstorms$category = as.factor(storms$category)\n\n\n# Plot scatter plot with x = pressure, y = wind\nplot(storms$pressure, storms$wind)\n\n\n\n\n\n\n\n\n### attach function -- access the variables w/o calling the data frame\nattach(storms)\nplot(pressure, wind)\n\n\n\n\n\n\n\n\n\nplot(pressure, wind, \n     col = \"blue\", \n     main = \"Scatterplot of Wind vs Pressure\") \n\n\n\n\n\n\n\n\n\n\n26.0.6 Base R Graphics – scatterplot matrices – Example\nFunction: pairs(df)\nExample: Draw scatterplot matrix of first 4 variables of the data frame iris (in the datasets package).\n\nlibrary(datasets)\ndata(iris)\nhead(iris)\n#&gt;   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n#&gt; 1          5.1         3.5          1.4         0.2  setosa\n#&gt; 2          4.9         3.0          1.4         0.2  setosa\n#&gt; 3          4.7         3.2          1.3         0.2  setosa\n#&gt; 4          4.6         3.1          1.5         0.2  setosa\n#&gt; 5          5.0         3.6          1.4         0.2  setosa\n#&gt; 6          5.4         3.9          1.7         0.4  setosa\n\npairs(iris[,1:4], pch=19) # pch = 19 is solid circle.\n\n\n\n\n\n\n\n\n\n\n26.0.7 Base R Graphics – linegraph – Example\nFunction: plot(x, y, type = ‘l’)\nExample: From https://trends.google.com/, we downloaded the time series data set GoogleTrendDataScience.csv with three variables Month_Since_2004, DataScience, MachineLearning.\n\nDraw a linegraph of the Data Science search counts vs Month.\nUse type = “b” to draw a line plot with dots.\n\n\nds = read.csv(\"GoogleTrendDataScience.csv\")\n\nhead(ds)\n#&gt;   Month_Since_2004 DataScience MachineLearning\n#&gt; 1                1          12              16\n#&gt; 2                2          10              14\n#&gt; 3                3           7              12\n#&gt; 4                4           7              16\n#&gt; 5                5           5              14\n#&gt; 6                6           7              11\n\npar(mfrow=c(1,2)) # 1 row, 2 columns (row-wise filling)\nplot(ds$Month_Since_2004, ds$DataScience, type=\"l\",\n     main = \"Line Plot for Data Science\",\n     xlab = \"Number of Months Since 2004\",\n     ylab = \"Data Science Search Counts\") # type=\"l\" represents lines\n\n### Plot with points and line\nplot(ds$Month_Since_2004, ds$DataScience, type=\"b\", # type=\"b\" represents both\n     main = \"Line and Point Plot for Data Science\",\n     xlab = \"Number of Months Since 2004\",\n     ylab = \"Data Science Search Counts\") \n\n\n\n\n\n\n\n\npar(mfrow=c(1,1)) # reset to default\n\n\n\n26.0.8 Base R Graphics – Multiple linegraphs – Example\nFunction: plot(x, y, type = ‘l’), lines(x, z)\nExample: We could place multiple linegraphs on one plot. Draw two linegraphs (DataScience vs Month_Since_2004, MachineLearning vs Month_Since_2004) on a single plot.\n\nplot(ds$Month_Since_2004, ds$DataScience, type=\"l\", col=\"red\")\nlines(ds$Month_Since_2004, ds$MachineLearning, col=\"blue\")\n\n\n\n\n\n\n\n\n\n\n26.0.9 Base R Graphics – histogram – Example\nFunction: hist(x)\nExample: Draw histogram of variable Sepal.Width in the data frame iris (in the datasets package).\n\ndata(iris)\nhist(iris$Sepal.Width)\n\n\n\n\n\n\n\n\n\n\n26.0.10 Base R Graphics – histogram matrices – Example\nFunction: library(Hmisc), hist.data.frame(df)\n\nlibrary(Hmisc)\nhist.data.frame(iris[,1:4])\n\n\n\n\n\n\n\n\n\n\n26.0.11 Base R Graphics – boxplot – Example\nFunctions: boxplot(y), boxplot(y~x)\nExample:\n\nDraw a boxplot of the variable wind in the data frame storms (in the tidyverse package).\nDraw a boxplot of wind vs category of the data frame storms.\n\n\npar(mfrow=c(2,2)) # Arrange the plots in 2*2 graphical matrix\n\n### (a) boxplot of wind\nboxplot(storms$wind, main = \"(a) Vertical\")\nboxplot(storms$wind, horizontal = TRUE, main = \"(a) Horizontal\")\n### (b) boxplot of wind over levels of category\n### vertical boxplot by default\nboxplot(wind ~ category, data = storms, main = \"(b) Vertical\")\n\n### horizontal boxplot\nboxplot(wind ~ category, data = storms, horizontal = TRUE, main = \"(b) Horizontal\")\n\n\n\n\n\n\n\n\npar(mfrow=c(1,1))\n\n\n\n26.0.12 Base R Graphics – barplot – Example\nFunctions: counts=table(), barplot(counts)\nExample: In the storms dataset,\n\nDraw a barplot of variable status.\nDraw a barplot of variable of status and category.\n\n\n### (a) Barplot\ncounts = table(storms$status)\ncounts\n#&gt; \n#&gt;            disturbance          extratropical              hurricane \n#&gt;                    171                   2151                   4803 \n#&gt;              other low subtropical depression      subtropical storm \n#&gt;                   1453                    151                    298 \n#&gt;    tropical depression         tropical storm          tropical wave \n#&gt;                   3569                   6830                    111\n\nbarplot(counts)\n\n\n\n\n\n\n\n\n# Sort the data and run a new plot from lowest to highest\ncounts_asc &lt;- sort(counts, decreasing = FALSE)\nbarplot(counts_asc)\n\n\n\n\n\n\n\n\n\n\n# Horizontal barplot\nbarplot(counts, horiz=TRUE)\n\n\n\n\n\n\n\n\n### (b) Barplot of two variables\ncounts = table(storms$category, storms$status)\ncounts\n#&gt;    \n#&gt;     disturbance extratropical hurricane other low subtropical depression\n#&gt;   0           0             0         0         0                      0\n#&gt;   1           0             0      2548         0                      0\n#&gt;   2           0             0       993         0                      0\n#&gt;   3           0             0       593         0                      0\n#&gt;   4           0             0       553         0                      0\n#&gt;   5           0             0       116         0                      0\n#&gt;    \n#&gt;     subtropical storm tropical depression tropical storm tropical wave\n#&gt;   0                 0                   0              1             0\n#&gt;   1                 0                   0              0             0\n#&gt;   2                 0                   0              0             0\n#&gt;   3                 0                   0              0             0\n#&gt;   4                 0                   0              0             0\n#&gt;   5                 0                   0              0             0\n\nbarplot(counts, col= c(\"steelblue\", \"firebrick\", \"lightblue\", \"mistyrose\", \"lightcyan\",\n  \"lavender\", \"cornsilk\"), besid=TRUE, legend = rownames(counts),\n  args.legend=list(title=\"Category\"))\n\n\n\n\n\n\n\n\n\ncategory variable in storms represents the Saffir-Simpson storm category (range from 1 to 5), which the scale based only on a hurricane’s maximum sustained wind speed.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Functions for Base R Graphics</span>"
    ]
  },
  {
    "objectID": "Quiz12/Quiz12.html",
    "href": "Quiz12/Quiz12.html",
    "title": "27  Quiz 12 Instructions",
    "section": "",
    "text": "27.1 Data Preparation\nIn this quiz, we will use the data frames flights and weather from the package nycflights13. This data frame contains info of on-time data for all flights that departed NYC (i.e. JFK, LGA or EWR) in 2013. The description of the variables:\nPlease install and load the package nycflights13 beforehand. Then load the data frames flights and weather. Additionally, we could filter the data and create two new data frames, alaska_flights and early_january_weather, which will be used in the subsequent question.\nPlease make sure you copy and paste the code chunk below, for data preparation, at the beginning of your Quiz12.R script.\nif(!require(\"nycflights13\", character.only = TRUE)) install.packages(\"nycflights13\")\nlibrary(nycflights13)\ndata(flights)\ndata(weather)\n\n# Define new data frame alaska_flights\nalaska_flights &lt;- flights[flights$carrier == \"AS\",]\n\n### Define new data frame early_january_weather\nearly_january_weather &lt;- weather[weather$origin == \"EWR\" & weather$month == 1 & weather$day &lt;= 15,]",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Quiz 12 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz12/Quiz12.html#data-preparation",
    "href": "Quiz12/Quiz12.html#data-preparation",
    "title": "27  Quiz 12 Instructions",
    "section": "",
    "text": "year, month, day – Date of departure.\ndep_time, arr_time – Actual departure and arrival times (format HHMM or HMM), local tz.\nsched_dep_time, sched_arr_time – Scheduled departure and arrival times (format HHMM or HMM), local tz.\ndep_delay, arr_delay – Departure and arrival delays, in minutes. Negative times represent early departures/arrivals.\ncarrier – Two letter carrier abbreviation. See airlines to get name.\nflight – Flight number.\ntailnum – Plane tail number. See planes for additional metadata.\norigin, dest – Origin and destination. See airports for additional metadata.\nair_time – Amount of time spent in the air, in minutes.\ndistance – Distance between airports, in miles.\nhour, minute – Time of scheduled departure broken into hour and minutes.\ntime_hour – Scheduled date and hour of the flight as a POSIXct date. Along with origin, can be used to join flights data to weather data.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Quiz 12 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz12/Quiz12.html#question-1",
    "href": "Quiz12/Quiz12.html#question-1",
    "title": "27  Quiz 12 Instructions",
    "section": "27.2 Question 1",
    "text": "27.2 Question 1\n\n[2 pts] Draw a scatter plot to visualize the relationship between the variables dep_delay and arr_delay in the alaska_flights data frame (defined above). Change the label for the x-axis as Departure Delay, the label for y-axis as Arrival Delay, and the plot title as Relationship between Departure and Arrival Delay.\n\nSave the generated plot as PlotQ1a.png. Recall that, you can do so using the way below.\n\n\npng(\"PlotQ1a.png\")\n\n# [Code to generate the plot here]\n\ndev.off()\n\n\n\n\n\n[2 pts] Draw a scatterplot matrices of variables dep_time, sched_dep_time, dep_delay, arr_time, sched_arr_time, arr_delay in the data frame alaska_flights. Save the created plot as PlotQ1b.png.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Quiz 12 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz12/Quiz12.html#question-2",
    "href": "Quiz12/Quiz12.html#question-2",
    "title": "27  Quiz 12 Instructions",
    "section": "27.3 Question 2",
    "text": "27.3 Question 2\n[2 pts] Create a time series plot (line graph) of the hourly temperature (variable temp) vs the time time_hour saved in the early_january_weather data frame (defined above). Change the label for the x-axis as Date and Hour, the label for y-axis as Temperature, and the plot title as Line Graph of Temperature vs Date and Hour. Save the created plot as PlotQ2.png.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Quiz 12 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz12/Quiz12.html#question-3",
    "href": "Quiz12/Quiz12.html#question-3",
    "title": "27  Quiz 12 Instructions",
    "section": "27.4 Question 3",
    "text": "27.4 Question 3\n[2 pts] Draw histogram of temperature (variable temp) in the data frame weather. Change the bar color to blue. What’s more, use border = \"white\" to change the border color to white. Save the created plot as PlotQ3.png.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Quiz 12 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz12/Quiz12.html#question-4",
    "href": "Quiz12/Quiz12.html#question-4",
    "title": "27  Quiz 12 Instructions",
    "section": "27.5 Question 4",
    "text": "27.5 Question 4\n[2 pts] Draw the two plot side by side (i.e. 1 row and 2 columns).\n\nPlot 1: Draw a boxplot of the variable temp in the data frame weather.\nPlot 2: Draw a boxplot of temp vs month of the data frame weather.\n\nSave the created plot as PlotQ4.png.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Quiz 12 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz12/Quiz12.html#question-5",
    "href": "Quiz12/Quiz12.html#question-5",
    "title": "27  Quiz 12 Instructions",
    "section": "27.6 Question 5",
    "text": "27.6 Question 5\n[2 pts] Draw a bar plot of carrier from the dataset flights. Save the created plot as PlotQ5.png.",
    "crumbs": [
      "Part I: R Basic",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Quiz 12 Instructions</span>"
    ]
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html",
    "title": "28  STAT 385 Lab 5 Vectorization Help Document",
    "section": "",
    "text": "28.1 Why Vectorization?",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>STAT 385 Lab 5 Vectorization Help Document</span>"
    ]
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html#why-vectorization",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html#why-vectorization",
    "title": "28  STAT 385 Lab 5 Vectorization Help Document",
    "section": "",
    "text": "Avoid using for loops in R when possible.\nUse vectorization whenever you can.",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>STAT 385 Lab 5 Vectorization Help Document</span>"
    ]
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html#kronecker-product",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html#kronecker-product",
    "title": "28  STAT 385 Lab 5 Vectorization Help Document",
    "section": "28.2 Kronecker Product",
    "text": "28.2 Kronecker Product\nIn mathematics, the Kronecker product, sometimes denoted by \\(\\bigotimes\\), is an operation on two matrices of arbitrary size resulting a block matrix. It is a specialization of the tensor product (which is denoted by the same symbol) from vectors to matrices and gives the matrix of the tensor product linear map with respect to a standard choice of basis. The Kronecker product is to be distinguished from the usual matrix multiplication, which is an entirely different operation. The Kronecker product is also sometimes called matrix direct product.\n\nYou can find more information about Kronecker Product on Wikipedia https://en.wikipedia.org/wiki/Kronecker_product.",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>STAT 385 Lab 5 Vectorization Help Document</span>"
    ]
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html#mathemetical-definition-of-kronecker-product",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html#mathemetical-definition-of-kronecker-product",
    "title": "28  STAT 385 Lab 5 Vectorization Help Document",
    "section": "28.3 Mathemetical Definition of Kronecker Product",
    "text": "28.3 Mathemetical Definition of Kronecker Product\nIf \\(\\mathbf{A}\\) is an \\(m \\times n\\) matrix and \\(\\mathbf{B}\\) is a \\(p \\times q\\) matrix, then the Kronecker product \\(\\mathbf{A}\\bigotimes \\mathbf{B}\\) is the \\(pm \\times qn\\) block matrix:\n\\[\\mathbf{A}\\bigotimes \\mathbf{B} = \\begin{bmatrix}\na_{11}\\mathbf{B}\\quad  \\cdots \\quad a_{1n}\\mathbf{B}\\\\\n\\vdots\\quad  \\ddots\\quad  \\vdots\\\\\na_{m1}\\mathbf{B}\\quad  \\cdots \\quad a_{mn}\\mathbf{B}\n\\end{bmatrix},\\]\nmore explicitly,\n\\[\\mathbf{A}\\bigotimes \\mathbf{B} =\\left[\\begin{array}{cccccccccc}\na_{11}b_{11}&  a_{11}b_{12} & \\cdots & a_{11}b_{1q}& \\cdots& \\cdots& a_{1n}b_{11}&  a_{1n}b_{12} & \\cdots & a_{1n}b_{1q} \\\\\na_{11}b_{21}&  a_{11}b_{22} & \\cdots & a_{11}b_{2q}& \\cdots& \\cdots& a_{1n}b_{21}&  a_{1n}b_{22} & \\cdots & a_{1n}b_{2q} \\\\\n\\vdots& \\vdots&  \\ddots&  \\vdots & & & \\vdots& \\vdots&  \\ddots&  \\vdots \\\\\na_{11}b_{p1}&  a_{11}b_{p2} & \\cdots & a_{11}b_{pq}& \\cdots& \\cdots& a_{1n}b_{p1}&  a_{1n}b_{p2} & \\cdots & a_{1n}b_{pq} \\\\\n\\vdots& \\vdots&  &  \\vdots & \\ddots& & \\vdots  & \\vdots& & \\vdots \\\\\n\\vdots& \\vdots&  &  \\vdots & &\\ddots & \\vdots  & \\vdots& & \\vdots \\\\\na_{m1}b_{11}&  a_{m1}b_{12} & \\cdots & a_{m1}b_{1q}& \\cdots& \\cdots& a_{mn}b_{11}&  a_{mn}b_{12} & \\cdots & a_{mn}b_{1q} \\\\\na_{m1}b_{21}&  a_{m1}b_{22} & \\cdots & a_{m1}b_{2q}& \\cdots& \\cdots& a_{mn}b_{21}&  a_{mn}b_{22} & \\cdots & a_{mn}b_{2q} \\\\\n\\vdots& \\vdots&  \\ddots&  \\vdots & & & \\vdots& \\vdots&  \\ddots&  \\vdots \\\\\na_{m1}b_{p1}&  a_{m1}b_{p2} & \\cdots & a_{m1}b_{pq}& \\cdots& \\cdots& a_{mn}b_{p1}&  a_{mn}b_{p2} & \\cdots & a_{mn}b_{pq}\n\\end{array}\\right],\\]",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>STAT 385 Lab 5 Vectorization Help Document</span>"
    ]
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html#kronecker-product-example",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html#kronecker-product-example",
    "title": "28  STAT 385 Lab 5 Vectorization Help Document",
    "section": "28.4 Kronecker Product Example",
    "text": "28.4 Kronecker Product Example\n\\[A = \\begin{bmatrix}\n1 \\quad 3 \\\\\n2 \\quad 4\n\\end{bmatrix}\\]\n\\[B = \\begin{bmatrix}\n0 \\quad 5 \\\\\n6 \\quad 7\n\\end{bmatrix}\\]\nThen\n\\[\\mathbf{A}\\bigotimes \\mathbf{B} = \\left[\\begin{array}{cccc}\n1\\times 0 & 1\\times 5 & 3\\times 0 & 3\\times 5\\\\\n1\\times 6 & 1\\times 7 & 3\\times 6 & 3\\times 7\\\\\n2\\times 0 & 2\\times 5 & 4\\times 0 & 4\\times 5\\\\\n2\\times 6 & 2\\times 7 & 4\\times 6 & 4\\times 7\n\\end{array}\\right] =\n\\left[\\begin{array}{cccc}\n0 & 5 & 0 & 15\\\\\n6 & 7 & 18 & 21\\\\\n0 & 10 & 0 & 20\\\\\n12 & 14 & 24 & 28\n\\end{array}\\right].\\]",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>STAT 385 Lab 5 Vectorization Help Document</span>"
    ]
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html#calculate-kronecker-product-in-r",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html#calculate-kronecker-product-in-r",
    "title": "28  STAT 385 Lab 5 Vectorization Help Document",
    "section": "28.5 Calculate Kronecker Product in R",
    "text": "28.5 Calculate Kronecker Product in R\nLet \\(A\\) and \\(B\\) be \\(2 \\times 2\\) matrices as follows:\n\n(A &lt;- matrix(1:4, nrow = 2))\n#&gt;      [,1] [,2]\n#&gt; [1,]    1    3\n#&gt; [2,]    2    4\n(B &lt;- matrix(c(0, 6, 5, 7), nrow = 2))\n#&gt;      [,1] [,2]\n#&gt; [1,]    0    5\n#&gt; [2,]    6    7",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>STAT 385 Lab 5 Vectorization Help Document</span>"
    ]
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html#method-i-the-kronecker-function",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html#method-i-the-kronecker-function",
    "title": "28  STAT 385 Lab 5 Vectorization Help Document",
    "section": "28.6 Method I: The kronecker() Function",
    "text": "28.6 Method I: The kronecker() Function\n\nA\n#&gt;      [,1] [,2]\n#&gt; [1,]    1    3\n#&gt; [2,]    2    4\nB\n#&gt;      [,1] [,2]\n#&gt; [1,]    0    5\n#&gt; [2,]    6    7\nkronecker(A, B)\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    0    5    0   15\n#&gt; [2,]    6    7   18   21\n#&gt; [3,]    0   10    0   20\n#&gt; [4,]   12   14   24   28",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>STAT 385 Lab 5 Vectorization Help Document</span>"
    ]
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html#method-ii-for-loop",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html#method-ii-for-loop",
    "title": "28  STAT 385 Lab 5 Vectorization Help Document",
    "section": "28.7 Method II: For Loop",
    "text": "28.7 Method II: For Loop\n\\[\\mathbf{A}\\bigotimes \\mathbf{B} = \\left[\\begin{array}{cccc}\n1\\times 0 & 1\\times 5 & 3\\times 0 & 3\\times 5\\\\\n1\\times 6 & 1\\times 7 & 3\\times 6 & 3\\times 7\\\\\n2\\times 0 & 2\\times 5 & 4\\times 0 & 4\\times 5\\\\\n2\\times 6 & 2\\times 7 & 4\\times 6 & 4\\times 7\n\\end{array}\\right] =\n\\left[\\begin{array}{cccc}\n0 & 5 & 0 & 15\\\\\n6 & 7 & 18 & 21\\\\\n0 & 10 & 0 & 20\\\\\n12 & 14 & 24 & 28\n\\end{array}\\right].\\] Locations:\n\n\n\n\n\n\nforloop_kronecker &lt;- function(A, B){\n  Res = matrix(NA, nrow = 2*2, ncol = 2*2)\n  k = 0\n  l = 0\n  \n  for (j in 1:2){\n    k = 0\n    for (i in 1:2){\n      Res[(k+1):(k+2), (l+1):(l+2)] &lt;- A[i, j] * B\n      k = k + 2\n    }\n    l = l + 2\n  }\n  Res\n}\n\nforloop_kronecker(A, B)\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    0    5    0   15\n#&gt; [2,]    6    7   18   21\n#&gt; [3,]    0   10    0   20\n#&gt; [4,]   12   14   24   28",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>STAT 385 Lab 5 Vectorization Help Document</span>"
    ]
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html#method-iii-vectorization-recommended",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html#method-iii-vectorization-recommended",
    "title": "28  STAT 385 Lab 5 Vectorization Help Document",
    "section": "28.8 Method III: Vectorization [Recommended]",
    "text": "28.8 Method III: Vectorization [Recommended]\n\n28.8.1 Objective\n\n\n\n\n\n\n\n28.8.2 Deal with A\n\n\n\n\nRecall\n\nrep(1:2, each = 2)\n#&gt; [1] 1 1 2 2\n\n\nA\n#&gt;      [,1] [,2]\n#&gt; [1,]    1    3\n#&gt; [2,]    2    4\n\nA[rep(1:2, each = 2), rep(1:2, each = 2)]\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1    1    3    3\n#&gt; [2,]    1    1    3    3\n#&gt; [3,]    2    2    4    4\n#&gt; [4,]    2    2    4    4\n\n\n\n28.8.3 Deal with B\n\n\n\n\nRecall\n\nrep(1:2, times = 2)\n#&gt; [1] 1 2 1 2\n\n\nB\n#&gt;      [,1] [,2]\n#&gt; [1,]    0    5\n#&gt; [2,]    6    7\nB[rep(1:2, times = 2), rep(1:2, times = 2)]\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    0    5    0    5\n#&gt; [2,]    6    7    6    7\n#&gt; [3,]    0    5    0    5\n#&gt; [4,]    6    7    6    7\n\n\n\n28.8.4 Put Everything Together\n\nrepeated_A &lt;- A[rep(1:2, each = 2), rep(1:2, each = 2)]\nrepeated_B &lt;- B[rep(1:2, times = 2), rep(1:2, times = 2)]\nrepeated_A * repeated_B\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    0    5    0   15\n#&gt; [2,]    6    7   18   21\n#&gt; [3,]    0   10    0   20\n#&gt; [4,]   12   14   24   28\n\n\n\n28.8.5 Wrap the Calculation into a Function (for \\(2 \\times 2\\) matrices)\n\nvectorization_kronecker &lt;- function(A, B){\n  repeated_A &lt;- A[rep(1:2, each = 2), rep(1:2, each = 2)]\n  repeated_B &lt;- B[rep(1:2, times = 2), rep(1:2, times = 2)]\n  return(repeated_A * repeated_B)\n}\n\nvectorization_kronecker(A, B)\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    0    5    0   15\n#&gt; [2,]    6    7   18   21\n#&gt; [3,]    0   10    0   20\n#&gt; [4,]   12   14   24   28",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>STAT 385 Lab 5 Vectorization Help Document</span>"
    ]
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html#compare-the-cpu-times-that-expressions-used",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html#compare-the-cpu-times-that-expressions-used",
    "title": "28  STAT 385 Lab 5 Vectorization Help Document",
    "section": "28.9 Compare the CPU Times that Expressions Used",
    "text": "28.9 Compare the CPU Times that Expressions Used\n\nmicrobenchmark::microbenchmark(\n  vectorization_kronecker(A,B),\n  kronecker(A, B),\n  forloop_kronecker(A, B),\n  times=10000L\n)\n#&gt; Unit: microseconds\n#&gt;                           expr    min     lq      mean median     uq      max\n#&gt;  vectorization_kronecker(A, B)  2.800  3.201  4.729411  3.401  5.401 2439.501\n#&gt;                kronecker(A, B) 22.301 24.001 33.014723 24.801 35.252 1592.001\n#&gt;        forloop_kronecker(A, B)  4.600  5.201  7.498193  5.402  8.201 1504.701\n#&gt;  neval\n#&gt;  10000\n#&gt;  10000\n#&gt;  10000",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>STAT 385 Lab 5 Vectorization Help Document</span>"
    ]
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html#what-if-a-and-b-are-not-2-times-2-matrices",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html#what-if-a-and-b-are-not-2-times-2-matrices",
    "title": "28  STAT 385 Lab 5 Vectorization Help Document",
    "section": "28.10 What if A and B are not \\(2 \\times 2\\) matrices?",
    "text": "28.10 What if A and B are not \\(2 \\times 2\\) matrices?\nWith the assistance of this instructional document, please proceed with Lab 5.\nIn Lab 5, you will update the forloop_kronecker() and vectorization_kronecker() functions to make them suitable for calculating matrices A and B with arbitrary dimensions. And find result similar to the following.\n\nA1 &lt;- matrix(1:16, nrow = 4, ncol = 4)\nB1 &lt;- matrix(1:20, nrow = 4, ncol = 5)\n\nA2 &lt;- matrix(1:40, nrow = 5, ncol = 8)\nB2 &lt;- matrix(1:50, nrow = 10, ncol = 5)\n\n\nCompare the CPU Times that Expressions Used for A1 and B1\n\n\n# A1 and B1\nmicrobenchmark::microbenchmark(\n  vectorization_kronecker(A1,B1),\n  kronecker(A1, B1),\n  forloop_kronecker(A1, B1),\n  times=10000L\n)\n#&gt; Unit: microseconds\n#&gt;                             expr    min     lq     mean median     uq       max\n#&gt;  vectorization_kronecker(A1, B1)  8.101  9.101 13.26618  9.501 16.301  3065.201\n#&gt;                kronecker(A1, B1) 24.901 27.201 41.19761 28.301 56.401  3429.301\n#&gt;        forloop_kronecker(A1, B1) 37.501 40.301 57.72898 41.901 74.101 20537.301\n#&gt;  neval\n#&gt;  10000\n#&gt;  10000\n#&gt;  10000\n\n\nCompare the CPU Times that Expressions Used for A2 and B2\n\n\n# A2 and B2\n\nmicrobenchmark::microbenchmark(\n  vectorization_kronecker(A2,B2),\n  kronecker(A2, B2),\n  forloop_kronecker(A2, B2),\n  times=10000L\n)\n#&gt; Unit: microseconds\n#&gt;                             expr    min     lq      mean  median       uq\n#&gt;  vectorization_kronecker(A2, B2) 15.801 18.501  29.50690  21.201  34.9010\n#&gt;                kronecker(A2, B2) 33.401 44.301  70.22056  54.701  89.0510\n#&gt;        forloop_kronecker(A2, B2) 87.301 98.200 150.70681 105.501 188.2005\n#&gt;       max neval\n#&gt;  7223.200 10000\n#&gt;  4288.401 10000\n#&gt;  7594.202 10000",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>STAT 385 Lab 5 Vectorization Help Document</span>"
    ]
  },
  {
    "objectID": "Lab5/Lab5.html",
    "href": "Lab5/Lab5.html",
    "title": "29  Lab 5",
    "section": "",
    "text": "29.1 Mathemetical Definition of Kronecker Product\nIn mathematics, the Kronecker product, sometimes denoted by \\(\\bigotimes\\), is an operation on two matrices of arbitrary size resulting a block matrix. It is a specialization of the tensor product (which is denoted by the same symbol) from vectors to matrices and gives the matrix of the tensor product linear map with respect to a standard choice of basis. The Kronecker product is to be distinguished from the usual matrix multiplication, which is an entirely different operation. The Kronecker product is also sometimes called matrix direct product.\nIf \\(\\mathbf{A}\\) is an \\(m \\times n\\) matrix and \\(\\mathbf{B}\\) is a \\(p \\times q\\) matrix, then the Kronecker product \\(\\mathbf{A}\\bigotimes \\mathbf{B}\\) is the \\(pm \\times qn\\) block matrix:\n\\[\\mathbf{A}\\bigotimes \\mathbf{B} = \\begin{bmatrix}\na_{11}\\mathbf{B}\\quad  \\cdots \\quad a_{1n}\\mathbf{B}\\\\\n\\vdots\\quad  \\ddots\\quad  \\vdots\\\\\na_{m1}\\mathbf{B}\\quad  \\cdots \\quad a_{mn}\\mathbf{B}\n\\end{bmatrix},\\]\nmore explicitly,\n\\[\\mathbf{A}\\bigotimes \\mathbf{B} =\\left[\\begin{array}{cccccccccc}\na_{11}b_{11}&  a_{11}b_{12} & \\cdots & a_{11}b_{1q}& \\cdots& \\cdots& a_{1n}b_{11}&  a_{1n}b_{12} & \\cdots & a_{1n}b_{1q} \\\\\na_{11}b_{21}&  a_{11}b_{22} & \\cdots & a_{11}b_{2q}& \\cdots& \\cdots& a_{1n}b_{21}&  a_{1n}b_{22} & \\cdots & a_{1n}b_{2q} \\\\\n\\vdots& \\vdots&  \\ddots&  \\vdots & & & \\vdots& \\vdots&  \\ddots&  \\vdots \\\\\na_{11}b_{p1}&  a_{11}b_{p2} & \\cdots & a_{11}b_{pq}& \\cdots& \\cdots& a_{1n}b_{p1}&  a_{1n}b_{p2} & \\cdots & a_{1n}b_{pq} \\\\\n\\vdots& \\vdots&  &  \\vdots & \\ddots& & \\vdots  & \\vdots& & \\vdots \\\\\n\\vdots& \\vdots&  &  \\vdots & &\\ddots & \\vdots  & \\vdots& & \\vdots \\\\\na_{m1}b_{11}&  a_{m1}b_{12} & \\cdots & a_{m1}b_{1q}& \\cdots& \\cdots& a_{mn}b_{11}&  a_{mn}b_{12} & \\cdots & a_{mn}b_{1q} \\\\\na_{m1}b_{21}&  a_{m1}b_{22} & \\cdots & a_{m1}b_{2q}& \\cdots& \\cdots& a_{mn}b_{21}&  a_{mn}b_{22} & \\cdots & a_{mn}b_{2q} \\\\\n\\vdots& \\vdots&  \\ddots&  \\vdots & & & \\vdots& \\vdots&  \\ddots&  \\vdots \\\\\na_{m1}b_{p1}&  a_{m1}b_{p2} & \\cdots & a_{m1}b_{pq}& \\cdots& \\cdots& a_{mn}b_{p1}&  a_{mn}b_{p2} & \\cdots & a_{mn}b_{pq}\n\\end{array}\\right],\\]",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Lab 5</span>"
    ]
  },
  {
    "objectID": "Lab5/Lab5.html#mathemetical-definition-of-kronecker-product",
    "href": "Lab5/Lab5.html#mathemetical-definition-of-kronecker-product",
    "title": "29  Lab 5",
    "section": "",
    "text": "You can find more information about Kronecker Product on Wikipedia https://en.wikipedia.org/wiki/Kronecker_product.",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Lab 5</span>"
    ]
  },
  {
    "objectID": "Lab5/Lab5.html#question-1",
    "href": "Lab5/Lab5.html#question-1",
    "title": "29  Lab 5",
    "section": "29.2 Question 1",
    "text": "29.2 Question 1\n[20 pts] Please define the function forloop_kronecker(), using for loop, to calculate the Kronecker product of matrices A and B with arbitrary dimensions.",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Lab 5</span>"
    ]
  },
  {
    "objectID": "Lab5/Lab5.html#question-2",
    "href": "Lab5/Lab5.html#question-2",
    "title": "29  Lab 5",
    "section": "29.3 Question 2",
    "text": "29.3 Question 2\n[20 pts] Please define the function vectorization_kronecker(), using vectorization, to calculate the Kronecker product of matrices A and B with arbitrary dimensions.",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Lab 5</span>"
    ]
  },
  {
    "objectID": "Lab5/Lab5.html#question-3",
    "href": "Lab5/Lab5.html#question-3",
    "title": "29  Lab 5",
    "section": "29.4 Question 3",
    "text": "29.4 Question 3\n[20 pts] Compare the CPU times for three Kronecker product calculation methods below for matrices A1 and B1, A2 and B2, and other pairs of matrices you choose to test. Use times = 10000L for each calculation. Discuss the computational efficiency of the three methods based on your findings.\n\nvectorization_kronecker()\nkronecker()\nforloop_kronecker()\n\n\n(A1 &lt;- matrix(1:16, nrow = 4, ncol = 4))\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1    5    9   13\n#&gt; [2,]    2    6   10   14\n#&gt; [3,]    3    7   11   15\n#&gt; [4,]    4    8   12   16\n(B1 &lt;- matrix(1:20, nrow = 4, ncol = 5))\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]    1    5    9   13   17\n#&gt; [2,]    2    6   10   14   18\n#&gt; [3,]    3    7   11   15   19\n#&gt; [4,]    4    8   12   16   20\n\n(A2 &lt;- matrix(1:40, nrow = 5, ncol = 8))\n#&gt;      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n#&gt; [1,]    1    6   11   16   21   26   31   36\n#&gt; [2,]    2    7   12   17   22   27   32   37\n#&gt; [3,]    3    8   13   18   23   28   33   38\n#&gt; [4,]    4    9   14   19   24   29   34   39\n#&gt; [5,]    5   10   15   20   25   30   35   40\n(B2 &lt;- matrix(1:50, nrow = 10, ncol = 5))\n#&gt;       [,1] [,2] [,3] [,4] [,5]\n#&gt;  [1,]    1   11   21   31   41\n#&gt;  [2,]    2   12   22   32   42\n#&gt;  [3,]    3   13   23   33   43\n#&gt;  [4,]    4   14   24   34   44\n#&gt;  [5,]    5   15   25   35   45\n#&gt;  [6,]    6   16   26   36   46\n#&gt;  [7,]    7   17   27   37   47\n#&gt;  [8,]    8   18   28   38   48\n#&gt;  [9,]    9   19   29   39   49\n#&gt; [10,]   10   20   30   40   50",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Lab 5</span>"
    ]
  },
  {
    "objectID": "Lab6HelpDoc/Lab6HelpDoc.html",
    "href": "Lab6HelpDoc/Lab6HelpDoc.html",
    "title": "30  STAT 385 Lab 5 Help Document: Illustrate S3 System – U of I Women’s Basketball Team example",
    "section": "",
    "text": "30.1 U of I Women’s Basketball Team\nhttps://fightingillini.com/sports/womens-basketball/roster",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>STAT 385 Lab 5 Help Document: Illustrate S3 System -- U of I Women's Basketball Team example</span>"
    ]
  },
  {
    "objectID": "Lab6HelpDoc/Lab6HelpDoc.html#u-of-i-womens-basketball-team",
    "href": "Lab6HelpDoc/Lab6HelpDoc.html#u-of-i-womens-basketball-team",
    "title": "30  STAT 385 Lab 5 Help Document: Illustrate S3 System – U of I Women’s Basketball Team example",
    "section": "",
    "text": "30.1.1 Objective: Display the profile information according to roles\n\nFor player, print the profile information like\n\nAdalia Mckenzie is a player on the U of I Women’s Basketball Team. Her jersey number is 24. Adalia is a student in her Senior year. She is 5-10 tall (177.8 cm). Her position is Guard.\n\nFor staff, print the profile information like\n\nShauna Green is the Head Coach of the U of I Women’s Basketball Team.\nMaya Solomon is a staff member of the U of I Women’s Basketball Team.\n\nFor all other people, like the spectator, print the information like\n\nWeijia Jia is neither a player nor a staff member.",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>STAT 385 Lab 5 Help Document: Illustrate S3 System -- U of I Women's Basketball Team example</span>"
    ]
  },
  {
    "objectID": "Lab6HelpDoc/Lab6HelpDoc.html#create-player-class",
    "href": "Lab6HelpDoc/Lab6HelpDoc.html#create-player-class",
    "title": "30  STAT 385 Lab 5 Help Document: Illustrate S3 System – U of I Women’s Basketball Team example",
    "section": "30.2 Create Player Class",
    "text": "30.2 Create Player Class\n\n30.2.1 Constructor Function\n\nnew_player = function(x){\n  validate_player(x) # Validator, defined below\n  structure(\n    list(firstname = str_to_title(x$firstname), # str_to_title() is from stringr\n         lastname = str_to_title(x$lastname), # str_to_title() converts to title case\n         jersey = as.character(x$jersey),\n         height_inches = x$height,\n         position = str_to_title(x$position),\n         studentclass = str_to_title(x$class), \n         heightcm = convertHeightToCm(x$height) # Helper function, defined below\n         ),\n    class = \"player\"\n  )\n}\n\n\n\n30.2.2 Helper Function\nConvert the height from the “feet-inches” pattern to centimeters.\n\nconvertHeightToCm &lt;- function(height) {\n    # Split the input string by the dash\n    parts &lt;- str_split(height, \"-\")[[1]] # str_split() is from stringr package\n    \n    # Extract feet and inches as numeric values\n    feet &lt;- as.numeric(parts[1])\n    inches &lt;- as.numeric(parts[2])\n    \n    # Convert feet to inches and then total inches to centimeters\n    height_inches &lt;- (feet * 12) + inches\n    height_cm &lt;- height_inches * 2.54\n    \n    return(height_cm)\n}\n\n\n\n30.2.3 Validator Function\n\nIf any information is missing, print ‘… is missing’.\nIf the pattern of height doesn’t follow the “feet-inches” pattern, print a warning message.\nIf the position is not one of the three categories (Guard, Forward, Center), print a warning message.\nIf the class is not one of the five categories (Freshman, Sophomore, Junior, Senior, Fifth), print a warning message.\n\n\nvalidate_player &lt;- function(x){\n  if(is.na(x$firstname)) print(\"The player's first name is missing.\")\n  if(is.na(x$lastname)) print(\"The player's last name is missing.\")\n  if(is.na(x$jersey)) print(\"The player's jersey information is missing.\")\n  if(is.na(x$height)) print(\"The player's height information is missing.\")\n  if(is.na(x$position)) print(\"The player's position information is missing.\")\n  if(is.na(x$class)) print(\"The player's class information is missing.\")\n  \n  \n  if(!grepl(\"^\\\\d+-\\\\d+$\", x$height)) # grepl() is searching for matches\n    print(\"The player's height does not follow the 'feet-inches' pattern.\")\n  if(!str_to_title(x$position) %in% c(\"Guard\", \"Forward\", \"Center\")) \n    print(\"The player's position information is invalid.\")\n  if(!str_to_title(x$class) %in% c(\"Freshman\", \"Sophomore\", \"Junior\", \"Senior\", \"Fifth\")) \n    print(\"The player's class information is invalid.\")\n}",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>STAT 385 Lab 5 Help Document: Illustrate S3 System -- U of I Women's Basketball Team example</span>"
    ]
  },
  {
    "objectID": "Lab6HelpDoc/Lab6HelpDoc.html#create-staff-class",
    "href": "Lab6HelpDoc/Lab6HelpDoc.html#create-staff-class",
    "title": "30  STAT 385 Lab 5 Help Document: Illustrate S3 System – U of I Women’s Basketball Team example",
    "section": "30.3 Create Staff Class",
    "text": "30.3 Create Staff Class\n\n30.3.1 Constructor Function\n\n\nnew_staff = function(x){\n  validate_staff(x)\n  structure(\n    list(name = x$name,\n         role = x$role,\n         role_with_article = article_selector(x$role) \n         ),\n    class = \"staff\"\n  )\n}\n\n\n\n30.3.2 Helper Function\nChoose appropriate article for the role information.\n\narticle_selector &lt;- function(role) {\n title &lt;- switch(\n   role,\n   \"head coach\" = \"the Head Coach\",\n   \"associate head coach\" = \"the Associate Head Coach\",\n   \"assistant coach\" = \"an Assistant Coach\",\n   \"a staff member\"\n  )\n return(title)\n}\n\n\n\n30.3.3 Validator Function\n\nif name or role is missing or not character type, print warning message.\n\n\nvalidate_staff &lt;- function(x){\n  if(is.na(x$name) || !is.character(x$name)) \n    print(\"The staff's name is not valid\")\n  if(is.na(x$role)|| !is.character(x$role)) \n    print(\"The staff's role information is not valid\")\n}",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>STAT 385 Lab 5 Help Document: Illustrate S3 System -- U of I Women's Basketball Team example</span>"
    ]
  },
  {
    "objectID": "Lab6HelpDoc/Lab6HelpDoc.html#create-spectator-class",
    "href": "Lab6HelpDoc/Lab6HelpDoc.html#create-spectator-class",
    "title": "30  STAT 385 Lab 5 Help Document: Illustrate S3 System – U of I Women’s Basketball Team example",
    "section": "30.4 Create Spectator Class",
    "text": "30.4 Create Spectator Class\n\n\nnew_spectator = function(x){\n  structure(\n    list(name = x$name),\n    class = \"spectator\"\n  )\n}",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>STAT 385 Lab 5 Help Document: Illustrate S3 System -- U of I Women's Basketball Team example</span>"
    ]
  },
  {
    "objectID": "Lab6HelpDoc/Lab6HelpDoc.html#generic-and-methods",
    "href": "Lab6HelpDoc/Lab6HelpDoc.html#generic-and-methods",
    "title": "30  STAT 385 Lab 5 Help Document: Illustrate S3 System – U of I Women’s Basketball Team example",
    "section": "30.5 Generic and Methods",
    "text": "30.5 Generic and Methods\n\nDefine the generic print_profile and the methods.\n\n\nprint_profile = function(x){\n  UseMethod(\"print_profile\")\n}\n\nprint_profile.player = function(x){\n  print(paste0(x$firstname, \" \", x$lastname, \" is a player on the U of I Women's Basketball Team. Her jersey number is \", x$jersey, \". \",  x$firstname, \" is a student in her \", x$studentclass, \" year. She is \", x$height_inches, \" tall (\", x$heightcm,\" cm). Her position is \", x$position, \".\" \n               )\n        )\n}\n\nprint_profile.staff = function(x){\n  print(paste0(x$name, \" is \", x$role_with_article, \n               \" of the U of I Women's Basketball Team.\" ))\n}\n\nprint_profile.default = function(x){\n  print(paste0(x$name, \" is neither a player nor a staff member.\"))\n}",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>STAT 385 Lab 5 Help Document: Illustrate S3 System -- U of I Women's Basketball Team example</span>"
    ]
  },
  {
    "objectID": "Lab6HelpDoc/Lab6HelpDoc.html#test",
    "href": "Lab6HelpDoc/Lab6HelpDoc.html#test",
    "title": "30  STAT 385 Lab 5 Help Document: Illustrate S3 System – U of I Women’s Basketball Team example",
    "section": "30.6 Test",
    "text": "30.6 Test\n\n# Player\n\nMckenzie &lt;- new_player(x = list(\n  firstname = \"Adalia\",\n  lastname = \"Mckenzie\",\n  jersey = \"24\",\n  height = \"5-10\",\n  position = \"guard\",\n  class = \"senior\"\n)\n)\n\n### Incorrect Usage\nBryant &lt;- new_player(x = list(\n  firstname = \"Genesis\",\n  lastname = \"Bryant\",\n  jersey = \"1\",\n  height = \"5'6''\", \n  position = \"guard\",\n  class = \"fifth\"))\n#&gt; [1] \"The player's height does not follow the 'feet-inches' pattern.\"\n#&gt; Warning in convertHeightToCm(x$height): NAs introduced by coercion\n# Corrected\nBryant &lt;- new_player(x = list(\n  firstname = \"Genesis\",\n  lastname = \"Bryant\",\n  jersey = \"1\",\n  height = \"5-6\", \n  position = \"guard\",\n  class = \"fifth\"))\n\n\n# Staff\n\nGreen &lt;- new_staff(x = list(\n  name = \"Shauna Green\", \n  role = \"head coach\"\n  )\n)\n\nSolomon &lt;- new_staff(x = list(\n  name = \"Maya Solomon\", \n  role = \"director of basketball operations\"\n  )\n)\n\n# Spectator\n\nJia &lt;- new_spectator(x = list(\n  name = \"Weijia Jia\"\n  ))\nprint_profile(Mckenzie)\n#&gt; [1] \"Adalia Mckenzie is a player on the U of I Women's Basketball Team. Her jersey number is 24. Adalia is a student in her Senior year. She is 5-10 tall (177.8 cm). Her position is Guard.\"\nprint_profile(Bryant)\n#&gt; [1] \"Genesis Bryant is a player on the U of I Women's Basketball Team. Her jersey number is 1. Genesis is a student in her Fifth year. She is 5-6 tall (167.64 cm). Her position is Guard.\"\nprint_profile(Green)\n#&gt; [1] \"Shauna Green is the Head Coach of the U of I Women's Basketball Team.\"\nprint_profile(Solomon)\n#&gt; [1] \"Maya Solomon is a staff member of the U of I Women's Basketball Team.\"\nprint_profile(Jia)\n#&gt; [1] \"Weijia Jia is neither a player nor a staff member.\"",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>STAT 385 Lab 5 Help Document: Illustrate S3 System -- U of I Women's Basketball Team example</span>"
    ]
  },
  {
    "objectID": "Lab6/Lab6.html",
    "href": "Lab6/Lab6.html",
    "title": "31  Lab 6 – S3 for Workshop Participants Instruction",
    "section": "",
    "text": "31.1 Background\nSuppose a university is hosting a campus-wide data science workshop with undergraduate and graduate student participants, along with many faculty members showing interest in the series of workshops. Develop S3 classes for students, faculty, etc., incorporating validators and necessary helper functions.",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Lab 6 -- S3 for Workshop Participants Instruction</span>"
    ]
  },
  {
    "objectID": "Lab6/Lab6.html#question-1",
    "href": "Lab6/Lab6.html#question-1",
    "title": "31  Lab 6 – S3 for Workshop Participants Instruction",
    "section": "31.2 Question 1",
    "text": "31.2 Question 1\n\n[10 pts] Create the constructor function new_student() to generate objects of the “student” class. Student participants provide the following information: name, major, department, classYear (Freshman, Sophomore, Junior, Senior, or Graduate), UofI_email, and dsExperience which represents years of experience in data science.\n[10 pts] Create the validator function validate_student(). Below is a list of validations to include.\n\nValidations:\n\nIf any of the information required above is missing, print a warning message.\nIf dsExperience is not numeric, or the length is not 1, or the years is lower than 0 or greater than 20, print warning message that: The data science experience years information is not valid. Please use || for “or”.\nIf classYear doesn’t belong in one of the five categories, print the warning message that: The student’s class information is invalid.\nIf UofI_emailprovided is not character type, print the warning message: The student’s email information is invalid.\n\n\n[10 pts] Define a helper function to fill in or complete an email address. This is necessary because some students might only provide their NetID instead of a full email address. The completeEmail() function should take UofI_email as input and add @illinois.edu if needed. The output of completeEmail() function is saved as Complete_UofI_email.\n\n[Hint:\n\nConsider using an if-else statement to decide whether to append the domain.\nThe regular expression grepl(\"@illinois\\\\.edu\", UofI_email), checking if UofI_email contains @illinois.edu, might be helpful. ]",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Lab 6 -- S3 for Workshop Participants Instruction</span>"
    ]
  },
  {
    "objectID": "Lab6/Lab6.html#question-2",
    "href": "Lab6/Lab6.html#question-2",
    "title": "31  Lab 6 – S3 for Workshop Participants Instruction",
    "section": "31.3 Question 2",
    "text": "31.3 Question 2\n\n[10 pts] Create the constructor function new_faculty() to generate objects of the “faculty” class. Faculty participants have the following information: name and department.\n[10 pts] Create the constructor function new_other() to generate objects of the “Other” class. Other participants have the following information: name.",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Lab 6 -- S3 for Workshop Participants Instruction</span>"
    ]
  },
  {
    "objectID": "Lab6/Lab6.html#question-3",
    "href": "Lab6/Lab6.html#question-3",
    "title": "31  Lab 6 – S3 for Workshop Participants Instruction",
    "section": "31.4 Question 3",
    "text": "31.4 Question 3\n[30 pts] Define generic and methods using the constructors from Question 1 and 2 to create classes for student, faculty, and other participants. Implement a participantInfo() function that prints specific information based on the class of the object.\nFor example,\n\nSwift &lt;- new_student(x = list(\n  name = \"Taylor Swift\",\n  major = \"Fisheries and Wildlife\",\n  department = \"Biological Sciences\",\n  classYear = \"Junior\", \n  UofI_email = \"Tswift\",\n  dsExperience = 1.5))\nparticipantInfo(Swift)\n\n\nRonaldo &lt;- new_faculty(x = list(\n  name = \"Cristiano Ronaldo\", \n  department = \"Applied Health Science\"\n  )\n)\nparticipantInfo(Ronaldo)\n\n\nSomeone &lt;- new_other(x = list(\n  name = \"Someone Else\"\n  )\n)\nparticipantInfo(Someone)\n\nshould show the following:\n\nFor student\n\nExample: “Taylor Swift is a Fisheries And Wildlife major. The email address is Tswift@illinois.edu. The student has 1.5 years of experience in data science.”\n\nFor faculty\n\nExample: “Cristiano Ronaldo is from the Applied Health Science Department.”\n\nFor other people\n\nExample: “Someone Else is neither a faculty member nor a student.”",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Lab 6 -- S3 for Workshop Participants Instruction</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html",
    "href": "Tibble/Tibble.html",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "",
    "text": "32.1 Introduction to Tidyverse",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#introduction-to-tidyverse",
    "href": "Tibble/Tibble.html#introduction-to-tidyverse",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "",
    "text": "Tidyverse is an collection of R packages designed for data science, including ggplot2, tibble, dplyr, tidyr, readr, stringr, etc.\nggplot2 \\(\\rightarrow\\) for data visualization\ndplyr, tidyr \\(\\rightarrow\\) for data wrangling and data preparation\n\n\n\n\n\nWorkflow in data science, with Tidyverse – https://oliviergimenez.github.io/intro_tidyverse/#1\n\n\n\n\nData preparation can take up to \\(70\\%\\)–\\(80\\%\\) of your project time.\n\nSo wouldn’t it be nice if there were an intuitive and idiomatic way to wrangle data?",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#install-and-load-tidyverse",
    "href": "Tibble/Tibble.html#install-and-load-tidyverse",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "32.2 Install and Load Tidyverse",
    "text": "32.2 Install and Load Tidyverse\nPlease install and load the tidyverse.\n\n\ninstall.packages(\"tidyverse\") # Remember, you ONLY need to install it once\n\nlibrary(tidyverse) # but you'll need to load it every session you use it\n\n\n\n\nOnce you’re done, let’s start the journey!",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#syntax-comparison-base-r-vs-tidyverse",
    "href": "Tibble/Tibble.html#syntax-comparison-base-r-vs-tidyverse",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "32.3 Syntax Comparison: Base R vs Tidyverse",
    "text": "32.3 Syntax Comparison: Base R vs Tidyverse\nLet’s use the mpg tibble in ggplot2. Please refer to help(mpg) for the variable definitions.\n\nlibrary(tidyverse) \n#&gt; Warning: package 'tidyverse' was built under R version 4.3.3\n#&gt; Warning: package 'ggplot2' was built under R version 4.3.3\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nstr(mpg)\n#&gt; tibble [234 × 11] (S3: tbl_df/tbl/data.frame)\n#&gt;  $ manufacturer: chr [1:234] \"audi\" \"audi\" \"audi\" \"audi\" ...\n#&gt;  $ model       : chr [1:234] \"a4\" \"a4\" \"a4\" \"a4\" ...\n#&gt;  $ displ       : num [1:234] 1.8 1.8 2 2 2.8 2.8 3.1 1.8 1.8 2 ...\n#&gt;  $ year        : int [1:234] 1999 1999 2008 2008 1999 1999 2008 1999 1999 2008 ...\n#&gt;  $ cyl         : int [1:234] 4 4 4 4 6 6 6 4 4 4 ...\n#&gt;  $ trans       : chr [1:234] \"auto(l5)\" \"manual(m5)\" \"manual(m6)\" \"auto(av)\" ...\n#&gt;  $ drv         : chr [1:234] \"f\" \"f\" \"f\" \"f\" ...\n#&gt;  $ cty         : int [1:234] 18 21 20 21 16 18 18 18 16 20 ...\n#&gt;  $ hwy         : int [1:234] 29 29 31 30 26 26 27 26 25 28 ...\n#&gt;  $ fl          : chr [1:234] \"p\" \"p\" \"p\" \"p\" ...\n#&gt;  $ class       : chr [1:234] \"compact\" \"compact\" \"compact\" \"compact\" ...\nglimpse(mpg) # glimpse() is the counterpart in dplyr of str()\n#&gt; Rows: 234\n#&gt; Columns: 11\n#&gt; $ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n#&gt; $ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n#&gt; $ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n#&gt; $ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n#&gt; $ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n#&gt; $ trans        &lt;chr&gt; \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n#&gt; $ drv          &lt;chr&gt; \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n#&gt; $ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n#&gt; $ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n#&gt; $ fl           &lt;chr&gt; \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n#&gt; $ class        &lt;chr&gt; \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\nExample 1 What types of vehicles did dodge produce from the mpg data?",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#syntax-comparison-base-r-vs-tidyverse-1",
    "href": "Tibble/Tibble.html#syntax-comparison-base-r-vs-tidyverse-1",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "32.4 Syntax Comparison: Base R vs Tidyverse",
    "text": "32.4 Syntax Comparison: Base R vs Tidyverse\nExample 1 What types of vehicles did dodge produce from the mpg data?\n\n32.4.1 Base R syntax\n\nunique(mpg[mpg$manufacturer == \"dodge\", \"class\"])\n#&gt; # A tibble: 3 × 1\n#&gt;   class  \n#&gt;   &lt;chr&gt;  \n#&gt; 1 minivan\n#&gt; 2 pickup \n#&gt; 3 suv\n\nFine, but a little awkward.\n\n\n32.4.2 Tidyverse syntax\n\nmpg %&gt;%\n filter(manufacturer == \"dodge\") %&gt;%\n distinct(class) \n#&gt; # A tibble: 3 × 1\n#&gt;   class  \n#&gt;   &lt;chr&gt;  \n#&gt; 1 minivan\n#&gt; 2 pickup \n#&gt; 3 suv\n\nMuch, much nicer.",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#tidyverse-syntax-and-pipe-operator",
    "href": "Tibble/Tibble.html#tidyverse-syntax-and-pipe-operator",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "32.5 Tidyverse Syntax and Pipe Operator",
    "text": "32.5 Tidyverse Syntax and Pipe Operator\nThe pipe operator %&gt;% is used to build the pipeline.\n\nYou could interpret %&gt;% as then\nPasses result on left into first argument of function on right.\n\n\n\nShortcut to type %&gt;%\n\n\n\n%&gt;% has to come at the end of the line, not the start.",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#check-missing-values",
    "href": "Tibble/Tibble.html#check-missing-values",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "32.6 Check Missing Values",
    "text": "32.6 Check Missing Values\n\nmpg %&gt;% \n  dplyr::select(everything()) %&gt;% # use everything() to select all variables\n  summarize_all(~sum(is.na(.))) # summarize_all() affects every variable\n#&gt; # A tibble: 1 × 11\n#&gt;   manufacturer model displ  year   cyl trans   drv   cty   hwy    fl class\n#&gt;          &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n#&gt; 1            0     0     0     0     0     0     0     0     0     0     0",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#wrangling-graphing-in-tidyverse",
    "href": "Tibble/Tibble.html#wrangling-graphing-in-tidyverse",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "32.7 Wrangling & Graphing in Tidyverse",
    "text": "32.7 Wrangling & Graphing in Tidyverse\nChain the tidyverse pipeline into the ggplot function.\n\n\n\nExample 2\nDraw boxplots of engine displacement (variable displ in mpg) for three vehicle types of dodge.\n\nmpg %&gt;% ### Data wrangling part\n filter(manufacturer == \"dodge\") %&gt;%\n ggplot(aes(x = class, y = displ)) + ### Data visualization part\n geom_boxplot() \n\n\n\n\n\n\n\n\n\n32.7.1 Or equivalently,\n\n### Data wrangling part \nmpg_dodge &lt;- mpg %&gt;% \n  filter(manufacturer == \"dodge\")\n\n### Data visualization part \n  ggplot(mpg_dodge, aes(x = class, y = displ)) + \n  geom_boxplot()",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#tibbles",
    "href": "Tibble/Tibble.html#tibbles",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "32.8 Tibbles",
    "text": "32.8 Tibbles\ntidyverse mainly deals with tibble instead of data.frame. Therefore this is where we start.\ntibble is a data.frame with different attributes and requirements. The package tibble provides support for tibble. It is included in tidyverse.",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#tibble-vs-data-frame",
    "href": "Tibble/Tibble.html#tibble-vs-data-frame",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "32.9 Tibble vs Data Frame",
    "text": "32.9 Tibble vs Data Frame\n\nTibbles are enhanced data frames.\nTibbles are a table format provided by the tibble package, part of the core tidyverse.\nMake working in the tidyverse a little easier.\nWe will compare tibble and data frame on the following aspects:\n\nCreating\nCoercion (i.e. data frame \\(\\longleftrightarrow\\) tibble)\nDifference in printing\nDifference in subsetting\nDifference in recycling rules\nDifference in accepting row names",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#tibble-vs-data-frame-creating-import-a-csv-file",
    "href": "Tibble/Tibble.html#tibble-vs-data-frame-creating-import-a-csv-file",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "32.10 Tibble vs Data Frame – Creating (Import a CSV File)",
    "text": "32.10 Tibble vs Data Frame – Creating (Import a CSV File)\n\n32.10.0.1 Import Data as a Data frame\nRecall: use read.csv() to read the data frame.\n\ndf_workshop &lt;- read.csv(\"DS Workshop Participants List.csv\")\nclass(df_workshop)\n#&gt; [1] \"data.frame\"\nstr(df_workshop)\n#&gt; 'data.frame':    16 obs. of  11 variables:\n#&gt;  $ Name                           : chr  \"Dwayne Johnson\" \"Rihanna\" \"Ellen DeGeneres\" \"Will Smith\" ...\n#&gt;  $ Gender                         : chr  \"M\" \"F\" \"F\" \"M\" ...\n#&gt;  $ Email.Address                  : chr  \"Djohnson@illinois.edu\" \"Rihanna@illinois.edu\" \"Edegeneres@illinois.edu\" \"Wsmith@illinois.edu\" ...\n#&gt;  $ Department                     : chr  \"Statistics\" \"Economics\" \"Biology\" \"Electrical and Computer Engineering\" ...\n#&gt;  $ Info.Source                    : chr  \"Email\" \"Class\" \"Email\" \"Email\" ...\n#&gt;  $ Class.Year                     : chr  \"Undergraduate\" \"Graduate\" \"Undergraduate\" \"Undergraduate\" ...\n#&gt;  $ Major                          : chr  \"Statistics\" \"ECON\" \"Biology\" \"Electrical Engineering\" ...\n#&gt;  $ Related.Courses.Taken          : chr  \"STAT 207, MATH 220\" \"BUS 201, MATH 426\" \"STAT 207\" \"MATH 221, MATH 220\" ...\n#&gt;  $ Programming.Language.Known     : chr  \"R, SAS, Matlab\" \"Python, SAS\" \"R, Python\" \"R, Python, SQL\" ...\n#&gt;  $ Willingness.to.be.the.Presenter: chr  \"Y\" \"N\" \"N\" \"Y\" ...\n#&gt;  $ DS.Years.of.Experience         : num  1 1 0 0 1 NA 2 0.5 0.5 NA ...\n\n\n\n32.10.0.2 Import Data as a Tibble\n\nUse read_csv() (from readr package) to read the tibble.\n\n\ntbl_workshop &lt;- read_csv(\"DS Workshop Participants List.csv\")\n#&gt; Rows: 16 Columns: 11\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr (10): Name, Gender, Email Address, Department, Info Source, Class Year, ...\n#&gt; dbl  (1): DS Years of Experience\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nclass(tbl_workshop)\n#&gt; [1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"\nglimpse(tbl_workshop) \n#&gt; Rows: 16\n#&gt; Columns: 11\n#&gt; $ Name                              &lt;chr&gt; \"Dwayne Johnson\", \"Rihanna\", \"Ellen …\n#&gt; $ Gender                            &lt;chr&gt; \"M\", \"F\", \"F\", \"M\", \"F\", \"M\", \"M\", \"…\n#&gt; $ `Email Address`                   &lt;chr&gt; \"Djohnson@illinois.edu\", \"Rihanna@il…\n#&gt; $ Department                        &lt;chr&gt; \"Statistics\", \"Economics\", \"Biology\"…\n#&gt; $ `Info Source`                     &lt;chr&gt; \"Email\", \"Class\", \"Email\", \"Email\", …\n#&gt; $ `Class Year`                      &lt;chr&gt; \"Undergraduate\", \"Graduate\", \"Underg…\n#&gt; $ Major                             &lt;chr&gt; \"Statistics\", \"ECON\", \"Biology\", \"El…\n#&gt; $ `Related Courses Taken`           &lt;chr&gt; \"STAT 207, MATH 220\", \"BUS 201, MATH…\n#&gt; $ `Programming Language Known`      &lt;chr&gt; \"R, SAS, Matlab\", \"Python, SAS\", \"R,…\n#&gt; $ `Willingness to be the Presenter` &lt;chr&gt; \"Y\", \"N\", \"N\", \"Y\", \"Y\", NA, \"N\", \"N…\n#&gt; $ `DS Years of Experience`          &lt;dbl&gt; 1.0, 1.0, 0.0, 0.0, 1.0, NA, 2.0, 0.…",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#tibble-vs-data-frame-creating-construct-a-data-frame-by-columns",
    "href": "Tibble/Tibble.html#tibble-vs-data-frame-creating-construct-a-data-frame-by-columns",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "32.11 Tibble vs Data Frame – Creating (Construct a Data Frame by Columns)",
    "text": "32.11 Tibble vs Data Frame – Creating (Construct a Data Frame by Columns)\n\n32.11.1 Data frame\n\n\ndata.frame('crazy name' = 1:3, 'not so crazy & name' = c(\"a\", \"b\", \"c\"))\n#&gt;   crazy.name not.so.crazy...name\n#&gt; 1          1                   a\n#&gt; 2          2                   b\n#&gt; 3          3                   c\n\ndata.frame(x = 1:3, y = x + 2)\n#&gt; Error in eval(expr, envir, enclos): object 'x' not found\n\n\n\n32.11.2 Tibble\n\n\ntibble('crazy name' = 1:3, 'not so crazy & name' = c(\"a\", \"b\", \"c\")) \n#&gt; # A tibble: 3 × 2\n#&gt;   `crazy name` `not so crazy & name`\n#&gt;          &lt;int&gt; &lt;chr&gt;                \n#&gt; 1            1 a                    \n#&gt; 2            2 b                    \n#&gt; 3            3 c\n# Tibble allows  non-syntactic variable names. To refer to these variables, please surround them with backticks.\n\ntibble(x = 1:3, y = x + 2) # Tibble allows referring to variables just created\n#&gt; # A tibble: 3 × 2\n#&gt;       x     y\n#&gt;   &lt;int&gt; &lt;dbl&gt;\n#&gt; 1     1     3\n#&gt; 2     2     4\n#&gt; 3     3     5",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#tibble-vs-data-frame-coercion",
    "href": "Tibble/Tibble.html#tibble-vs-data-frame-coercion",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "32.12 Tibble vs Data Frame – Coercion",
    "text": "32.12 Tibble vs Data Frame – Coercion\n\n32.12.1 Data Frame to Tibble\n\nclass(df_workshop)\n#&gt; [1] \"data.frame\"\n\nclass(as_tibble(df_workshop))\n#&gt; [1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n32.12.2 Tibble to Data Frame\n\nclass(tbl_workshop) \n#&gt; [1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"\n\nclass(as.data.frame(tbl_workshop))\n#&gt; [1] \"data.frame\"",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#tibble-vs-data-frame-printing",
    "href": "Tibble/Tibble.html#tibble-vs-data-frame-printing",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "32.13 Tibble vs Data Frame – printing",
    "text": "32.13 Tibble vs Data Frame – printing\n\n32.13.1 Data Frame\n\ndf_workshop\n#&gt;                 Name Gender           Email.Address\n#&gt; 1     Dwayne Johnson      M   Djohnson@illinois.edu\n#&gt; 2            Rihanna      F    Rihanna@illinois.edu\n#&gt; 3    Ellen DeGeneres      F Edegeneres@illinois.edu\n#&gt; 4         Will Smith      M     Wsmith@illinois.edu\n#&gt; 5     Angelina Jolie      F     Ajolie@illinois.edu\n#&gt; 6  Cristiano Ronaldo      M   Cronaldo@illinois.edu\n#&gt; 7  Leonardo DiCaprio      M  Ldicaprio@illinois.edu\n#&gt; 8         Tom Cruise      M    Tcruise@illinois.edu\n#&gt; 9  Robert Downey Jr.      M  RDowneyJr@illinois.edu\n#&gt; 10       Celine Dion      F      Cdion@illinois.edu\n#&gt; 11             Adele      F      Adele@illinois.edu\n#&gt; 12   Serena Williams      F  Swilliams@illinois.edu\n#&gt; 13      Lionel Messi      M     Lmessi@illinois.edu\n#&gt; 14      Taylor Swift      F     Tswift@illinois.edu\n#&gt; 15     J. K. Rowling      F  JKRowling@illinois.edu\n#&gt; 16      LeBron James      M     Ljames@illinois.edu\n#&gt;                             Department        Info.Source        Class.Year\n#&gt; 1                           Statistics              Email     Undergraduate\n#&gt; 2                            Economics              Class          Graduate\n#&gt; 3                              Biology              Email     Undergraduate\n#&gt; 4  Electrical and Computer Engineering              Email     Undergraduate\n#&gt; 5                     Computer Science              Class     Undergraduate\n#&gt; 6                            Economics Friends/Colleagues Faculty and staff\n#&gt; 7                            Economics              Email     Undergraduate\n#&gt; 8                          Mathematics              Class     Undergraduate\n#&gt; 9   mechanical Science and Engineering              Class     Undergraduate\n#&gt; 10                             Biology Friends/Colleagues Faculty and staff\n#&gt; 11                          Statistics              Class     Undergraduate\n#&gt; 12                    Computer Science              Email     Undergraduate\n#&gt; 13                             Biology          Professor          Graduate\n#&gt; 14                             BIology              Flyer     Undergraduate\n#&gt; 15                             Finance              Email     Undergraduate\n#&gt; 16 Electrical and Computer Engineering              Flyer     Undergraduate\n#&gt;                     Major        Related.Courses.Taken\n#&gt; 1              Statistics           STAT 207, MATH 220\n#&gt; 2                    ECON            BUS 201, MATH 426\n#&gt; 3                 Biology                     STAT 207\n#&gt; 4  Electrical Engineering           MATH 221, MATH 220\n#&gt; 5        Computer Science      CS 173, CS 411, CS 210 \n#&gt; 6                    &lt;NA&gt;                         &lt;NA&gt;\n#&gt; 7               Economics  BUS 201, MATH 426, STAT 425\n#&gt; 8             Mathematics MATH 227, STAT 207, STAT 425\n#&gt; 9  Mechanical Engineering           MATH 220, STAT 425\n#&gt; 10                   &lt;NA&gt;                         &lt;NA&gt;\n#&gt; 11             Statistics MATH 220, MATH 426, STAT 425\n#&gt; 12       Computer Science               CS 225, CS 173\n#&gt; 13                Biology                     MATH 257\n#&gt; 14                Biology           MATH 257, MATH 426\n#&gt; 15                Finance             BUS 302, BUS 201\n#&gt; 16                     EE           MATH 227, STAT 425\n#&gt;    Programming.Language.Known Willingness.to.be.the.Presenter\n#&gt; 1              R, SAS, Matlab                               Y\n#&gt; 2                 Python, SAS                               N\n#&gt; 3                   R, Python                               N\n#&gt; 4              R, Python, SQL                               Y\n#&gt; 5                 Python, SAS                               Y\n#&gt; 6                        &lt;NA&gt;                            &lt;NA&gt;\n#&gt; 7     Java, C++, HTML, Matlab                               N\n#&gt; 8                      Matlab                               N\n#&gt; 9              Matlab, Python                               Y\n#&gt; 10                       &lt;NA&gt;                            &lt;NA&gt;\n#&gt; 11          R, Python, Matlab                               Y\n#&gt; 12                  R, Python                               Y\n#&gt; 13                  C++, JAVA                               N\n#&gt; 14                     Python                               Y\n#&gt; 15             R, Hadoop, SAS                               N\n#&gt; 16                     Matlab                               N\n#&gt;    DS.Years.of.Experience\n#&gt; 1                     1.0\n#&gt; 2                     1.0\n#&gt; 3                     0.0\n#&gt; 4                     0.0\n#&gt; 5                     1.0\n#&gt; 6                      NA\n#&gt; 7                     2.0\n#&gt; 8                     0.5\n#&gt; 9                     0.5\n#&gt; 10                     NA\n#&gt; 11                    1.0\n#&gt; 12                    0.5\n#&gt; 13                    2.0\n#&gt; 14                    0.0\n#&gt; 15                    1.5\n#&gt; 16                    0.5\n\n\n\n32.13.2 Tibble\n\ntbl_workshop\n#&gt; # A tibble: 16 × 11\n#&gt;    Name       Gender `Email Address` Department `Info Source` `Class Year` Major\n#&gt;    &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;      &lt;chr&gt;         &lt;chr&gt;        &lt;chr&gt;\n#&gt;  1 Dwayne Jo… M      Djohnson@illin… Statistics Email         Undergradua… Stat…\n#&gt;  2 Rihanna    F      Rihanna@illino… Economics  Class         Graduate     ECON \n#&gt;  3 Ellen DeG… F      Edegeneres@ill… Biology    Email         Undergradua… Biol…\n#&gt;  4 Will Smith M      Wsmith@illinoi… Electrica… Email         Undergradua… Elec…\n#&gt;  5 Angelina … F      Ajolie@illinoi… Computer … Class         Undergradua… Comp…\n#&gt;  6 Cristiano… M      Cronaldo@illin… Economics  Friends/Coll… Faculty and… &lt;NA&gt; \n#&gt;  7 Leonardo … M      Ldicaprio@illi… Economics  Email         Undergradua… Econ…\n#&gt;  8 Tom Cruise M      Tcruise@illino… Mathemati… Class         Undergradua… Math…\n#&gt;  9 Robert Do… M      RDowneyJr@illi… mechanica… Class         Undergradua… Mech…\n#&gt; 10 Celine Di… F      Cdion@illinois… Biology    Friends/Coll… Faculty and… &lt;NA&gt; \n#&gt; 11 Adele      F      Adele@illinois… Statistics Class         Undergradua… Stat…\n#&gt; 12 Serena Wi… F      Swilliams@illi… Computer … Email         Undergradua… Comp…\n#&gt; 13 Lionel Me… M      Lmessi@illinoi… Biology    Professor     Graduate     Biol…\n#&gt; 14 Taylor Sw… F      Tswift@illinoi… BIology    Flyer         Undergradua… Biol…\n#&gt; 15 J. K. Row… F      JKRowling@illi… Finance    Email         Undergradua… Fina…\n#&gt; 16 LeBron Ja… M      Ljames@illinoi… Electrica… Flyer         Undergradua… EE   \n#&gt; # ℹ 4 more variables: `Related Courses Taken` &lt;chr&gt;,\n#&gt; #   `Programming Language Known` &lt;chr&gt;,\n#&gt; #   `Willingness to be the Presenter` &lt;chr&gt;, `DS Years of Experience` &lt;dbl&gt;",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#tibble-vs-data-frame-subsetting",
    "href": "Tibble/Tibble.html#tibble-vs-data-frame-subsetting",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "32.14 Tibble vs Data Frame – Subsetting",
    "text": "32.14 Tibble vs Data Frame – Subsetting\n\n32.14.1 Recall Subsetting in Data Frame\n\ndf_workshop$Major # Returns a vector\n#&gt;  [1] \"Statistics\"             \"ECON\"                   \"Biology\"               \n#&gt;  [4] \"Electrical Engineering\" \"Computer Science\"       NA                      \n#&gt;  [7] \"Economics\"              \"Mathematics\"            \"Mechanical Engineering\"\n#&gt; [10] NA                       \"Statistics\"             \"Computer Science\"      \n#&gt; [13] \"Biology\"                \"Biology\"                \"Finance\"               \n#&gt; [16] \"EE\"\ndf_workshop[, \"Major\"] # Returns a vector\n#&gt;  [1] \"Statistics\"             \"ECON\"                   \"Biology\"               \n#&gt;  [4] \"Electrical Engineering\" \"Computer Science\"       NA                      \n#&gt;  [7] \"Economics\"              \"Mathematics\"            \"Mechanical Engineering\"\n#&gt; [10] NA                       \"Statistics\"             \"Computer Science\"      \n#&gt; [13] \"Biology\"                \"Biology\"                \"Finance\"               \n#&gt; [16] \"EE\"\n\n\n\n32.14.2 Subsetting in tibble – distinguish [] and [[]] in tibble\n\nUsing [] returns a tibble\n\n\ntbl_workshop[,'Major'] \n#&gt; # A tibble: 16 × 1\n#&gt;    Major                 \n#&gt;    &lt;chr&gt;                 \n#&gt;  1 Statistics            \n#&gt;  2 ECON                  \n#&gt;  3 Biology               \n#&gt;  4 Electrical Engineering\n#&gt;  5 Computer Science      \n#&gt;  6 &lt;NA&gt;                  \n#&gt;  7 Economics             \n#&gt;  8 Mathematics           \n#&gt;  9 Mechanical Engineering\n#&gt; 10 &lt;NA&gt;                  \n#&gt; 11 Statistics            \n#&gt; 12 Computer Science      \n#&gt; 13 Biology               \n#&gt; 14 Biology               \n#&gt; 15 Finance               \n#&gt; 16 EE\ntbl_workshop['Major']\n#&gt; # A tibble: 16 × 1\n#&gt;    Major                 \n#&gt;    &lt;chr&gt;                 \n#&gt;  1 Statistics            \n#&gt;  2 ECON                  \n#&gt;  3 Biology               \n#&gt;  4 Electrical Engineering\n#&gt;  5 Computer Science      \n#&gt;  6 &lt;NA&gt;                  \n#&gt;  7 Economics             \n#&gt;  8 Mathematics           \n#&gt;  9 Mechanical Engineering\n#&gt; 10 &lt;NA&gt;                  \n#&gt; 11 Statistics            \n#&gt; 12 Computer Science      \n#&gt; 13 Biology               \n#&gt; 14 Biology               \n#&gt; 15 Finance               \n#&gt; 16 EE\n\n\nUsing [[]] or drop = TRUE returns a vector\n\n\ntbl_workshop[['Major']]\n#&gt;  [1] \"Statistics\"             \"ECON\"                   \"Biology\"               \n#&gt;  [4] \"Electrical Engineering\" \"Computer Science\"       NA                      \n#&gt;  [7] \"Economics\"              \"Mathematics\"            \"Mechanical Engineering\"\n#&gt; [10] NA                       \"Statistics\"             \"Computer Science\"      \n#&gt; [13] \"Biology\"                \"Biology\"                \"Finance\"               \n#&gt; [16] \"EE\"\ntbl_workshop[,'Major', drop = TRUE]\n#&gt;  [1] \"Statistics\"             \"ECON\"                   \"Biology\"               \n#&gt;  [4] \"Electrical Engineering\" \"Computer Science\"       NA                      \n#&gt;  [7] \"Economics\"              \"Mathematics\"            \"Mechanical Engineering\"\n#&gt; [10] NA                       \"Statistics\"             \"Computer Science\"      \n#&gt; [13] \"Biology\"                \"Biology\"                \"Finance\"               \n#&gt; [16] \"EE\"",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#tibble-vs-data-frame-recycling",
    "href": "Tibble/Tibble.html#tibble-vs-data-frame-recycling",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "32.15 Tibble vs Data Frame – Recycling",
    "text": "32.15 Tibble vs Data Frame – Recycling\n\n32.15.1 Data frames – recycling rule is applied automatically\n\ndata.frame(x = 1:6, y = \"STAT\")\n#&gt;   x    y\n#&gt; 1 1 STAT\n#&gt; 2 2 STAT\n#&gt; 3 3 STAT\n#&gt; 4 4 STAT\n#&gt; 5 5 STAT\n#&gt; 6 6 STAT\n\ndata.frame(x = 1:6, y = \"STAT\", z = c(\"Y\", \"N\"))\n#&gt;   x    y z\n#&gt; 1 1 STAT Y\n#&gt; 2 2 STAT N\n#&gt; 3 3 STAT Y\n#&gt; 4 4 STAT N\n#&gt; 5 5 STAT Y\n#&gt; 6 6 STAT N\n\n\n\n32.15.2 Tibble – only values of length 1 are recycled\n\ntibble(x = 1:6, y = \"STAT\")\n#&gt; # A tibble: 6 × 2\n#&gt;       x y    \n#&gt;   &lt;int&gt; &lt;chr&gt;\n#&gt; 1     1 STAT \n#&gt; 2     2 STAT \n#&gt; 3     3 STAT \n#&gt; 4     4 STAT \n#&gt; 5     5 STAT \n#&gt; 6     6 STAT\n\ntibble(x = 1:6, y = \"STAT\", z = c(\"Y\", \"N\"))\n#&gt; Error in `tibble()`:\n#&gt; ! Tibble columns must have compatible sizes.\n#&gt; • Size 6: Existing data.\n#&gt; • Size 2: Column `z`.\n#&gt; ℹ Only values of size one are recycled.\n\n# Correction\ntibble(x = 1:6, y = \"STAT\", z = rep(c(\"Y\", \"N\"), times = 3))\n#&gt; # A tibble: 6 × 3\n#&gt;       x y     z    \n#&gt;   &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n#&gt; 1     1 STAT  Y    \n#&gt; 2     2 STAT  N    \n#&gt; 3     3 STAT  Y    \n#&gt; 4     4 STAT  N    \n#&gt; 5     5 STAT  Y    \n#&gt; 6     6 STAT  N",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#tibble-vs-data-frame-row-names",
    "href": "Tibble/Tibble.html#tibble-vs-data-frame-row-names",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "32.16 Tibble vs Data Frame – Row Names",
    "text": "32.16 Tibble vs Data Frame – Row Names\n\n32.16.1 Data frames accept assigned row names\n\nrownames(df_workshop) &lt;- letters[1:16]\nhead(df_workshop)\n#&gt;                Name Gender           Email.Address\n#&gt; a    Dwayne Johnson      M   Djohnson@illinois.edu\n#&gt; b           Rihanna      F    Rihanna@illinois.edu\n#&gt; c   Ellen DeGeneres      F Edegeneres@illinois.edu\n#&gt; d        Will Smith      M     Wsmith@illinois.edu\n#&gt; e    Angelina Jolie      F     Ajolie@illinois.edu\n#&gt; f Cristiano Ronaldo      M   Cronaldo@illinois.edu\n#&gt;                            Department        Info.Source        Class.Year\n#&gt; a                          Statistics              Email     Undergraduate\n#&gt; b                           Economics              Class          Graduate\n#&gt; c                             Biology              Email     Undergraduate\n#&gt; d Electrical and Computer Engineering              Email     Undergraduate\n#&gt; e                    Computer Science              Class     Undergraduate\n#&gt; f                           Economics Friends/Colleagues Faculty and staff\n#&gt;                    Major   Related.Courses.Taken Programming.Language.Known\n#&gt; a             Statistics      STAT 207, MATH 220             R, SAS, Matlab\n#&gt; b                   ECON       BUS 201, MATH 426                Python, SAS\n#&gt; c                Biology                STAT 207                  R, Python\n#&gt; d Electrical Engineering      MATH 221, MATH 220             R, Python, SQL\n#&gt; e       Computer Science CS 173, CS 411, CS 210                 Python, SAS\n#&gt; f                   &lt;NA&gt;                    &lt;NA&gt;                       &lt;NA&gt;\n#&gt;   Willingness.to.be.the.Presenter DS.Years.of.Experience\n#&gt; a                               Y                      1\n#&gt; b                               N                      1\n#&gt; c                               N                      0\n#&gt; d                               Y                      0\n#&gt; e                               Y                      1\n#&gt; f                            &lt;NA&gt;                     NA\n\n\n\n32.16.2 Tibbles don’t accept assigned row names\n\nrownames(tbl_workshop) &lt;- letters[1:16]\n#&gt; Warning: Setting row names on a tibble is deprecated.",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#more-motivation",
    "href": "Tibble/Tibble.html#more-motivation",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "32.17 More motivation",
    "text": "32.17 More motivation\n\nThe tidyverse has become the industry-standard in the R-using data science community.\nThe tidyverse in R is comparable to the numpy and pandas packages in Python.",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Tibble/Tibble.html#reference",
    "href": "Tibble/Tibble.html#reference",
    "title": "32  Introduction to Tidyverse and Tibbles",
    "section": "32.18 Reference",
    "text": "32.18 Reference\n\n32.18.0.1 Reference books\n\nR for Data Science: https://r4ds.hadley.nz/\nHands-on Programming with R: https://rstudio-education.github.io/hopr/\nR Graphics Cookbook: https://r-graphics.org/\nStatistical Inference via Data Science: A Modern Dive into R and the Tidyverse, by Chester Ismay, Albert Y. Kim\nvignette(\"tibble\") or https://tibble.tidyverse.org/articles/tibble.html#tibbles-vs-data-frames\nAnd some github resources: https://github.com/stmorse/intro-tidyverse\n\nhttps://github.com/rstudio-education/welcome-to-the-tidyverse",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Introduction to Tidyverse and Tibbles</span>"
    ]
  },
  {
    "objectID": "Quiz14/Quiz14.html",
    "href": "Quiz14/Quiz14.html",
    "title": "33  Quiz 14 Instructions",
    "section": "",
    "text": "33.1 Question 1\ncats$S\ntbl_cats$S",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Quiz 14 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz14/Quiz14.html#question-1",
    "href": "Quiz14/Quiz14.html#question-1",
    "title": "33  Quiz 14 Instructions",
    "section": "",
    "text": "[1 pt] Load the cats data frame from the MASS package. Save it as a tibble named tbl_cats.\n[1 pt] Try the codes below to identify another difference between a data frame and a tibble:\n\n\nTibbles are also stricter with $. Tibbles never do partial matching, and will throw a warning and return NULL if the column does not exist.\n\n\nIn this case, Sex is a variable name, but S is not. Data frame does the partial matching and print the Sex column. But tibble gives a warning.\n\n\nInstruction: Please just try the codes below. Before submitting Quiz14.R, please comment out tbl_cats$S to ensure there are no bugs.",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Quiz 14 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz14/Quiz14.html#question-2",
    "href": "Quiz14/Quiz14.html#question-2",
    "title": "33  Quiz 14 Instructions",
    "section": "33.2 Question 2",
    "text": "33.2 Question 2\n\n[1 pt] Please import the CSV data BLACKFRIDAY as a tibble named BlackFriday.\n[1 pt] First, check if BlackFriday is a data frame. Second, use is_tibble() to check if BlackFriday is a tibble.\n\nNote that: As tibble is a modern take on the classic data frame in R, and it inherits from the data frame class. Therefore, for a tibble, if you use is.data.frame function to check, it returns TRUE because a tibble is a specialized form of a data frame with additional features.",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Quiz 14 Instructions</span>"
    ]
  },
  {
    "objectID": "Quiz14/Quiz14.html#question-3",
    "href": "Quiz14/Quiz14.html#question-3",
    "title": "33  Quiz 14 Instructions",
    "section": "33.3 Question 3",
    "text": "33.3 Question 3\nCreate the annoying tibble as follows:\n\nannoying &lt;- tibble(\n`1` = c(8, 5, 3, 9, 6, 7, 10, 7, 10, 4),\n`2` = `1` * 2 + rnorm(length(`1`))\n)\n\n\n[2 pt] Extract the column with the variable name 1 as a tibble. Denote it as tbl_1.\n[2 pt] Extract the column with the variable name 1 as an (atomic) vector (not a list). Denote it as vec_1.\n[1 pt] Create a new column called 3, which is column 2 divided by column 1.\n[1 pt] Please rename the columns to “one”, “two”, and “three”. [Hint: After renaming, be sure to save the new tibble to annoying to replace the original tibble. ]",
    "crumbs": [
      "Part II: R Tidyverse",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Quiz 14 Instructions</span>"
    ]
  }
]