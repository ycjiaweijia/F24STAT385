[
  {
    "objectID": "Transformation/Transformation.html",
    "href": "Transformation/Transformation.html",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "",
    "text": "Workflow in data science, with Tidyverse – https://oliviergimenez.github.io/intro_tidyverse/#1"
  },
  {
    "objectID": "Transformation/Transformation.html#data-science-workflow",
    "href": "Transformation/Transformation.html#data-science-workflow",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "",
    "text": "Workflow in data science, with Tidyverse – https://oliviergimenez.github.io/intro_tidyverse/#1"
  },
  {
    "objectID": "Transformation/Transformation.html#tidy-data",
    "href": "Transformation/Transformation.html#tidy-data",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Tidy Data",
    "text": "Tidy Data\n\nHappy families are all alike; every unhappy family is unhappy in its own way. — Leo Tolstoy\n\n\nTidy datasets are all alike, but every messy dataset is messy in its own way. — Hadley Wickham, author of R for Data Science\n\n\nTidy data is data where:\n\nEvery column is variables.\nEvery row is an observation.\nEvery cell is a single value.\n\n\n\n\nlibrary(tidyverse)\ntable1\n#&gt; # A tibble: 6 × 4\n#&gt;   country      year  cases population\n#&gt;   &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n#&gt; 1 Afghanistan  1999    745   19987071\n#&gt; 2 Afghanistan  2000   2666   20595360\n#&gt; 3 Brazil       1999  37737  172006362\n#&gt; 4 Brazil       2000  80488  174504898\n#&gt; 5 China        1999 212258 1272915272\n#&gt; 6 China        2000 213766 1280428583\ntable2\n#&gt; # A tibble: 12 × 4\n#&gt;    country      year type            count\n#&gt;    &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n#&gt;  1 Afghanistan  1999 cases             745\n#&gt;  2 Afghanistan  1999 population   19987071\n#&gt;  3 Afghanistan  2000 cases            2666\n#&gt;  4 Afghanistan  2000 population   20595360\n#&gt;  5 Brazil       1999 cases           37737\n#&gt;  6 Brazil       1999 population  172006362\n#&gt;  7 Brazil       2000 cases           80488\n#&gt;  8 Brazil       2000 population  174504898\n#&gt;  9 China        1999 cases          212258\n#&gt; 10 China        1999 population 1272915272\n#&gt; 11 China        2000 cases          213766\n#&gt; 12 China        2000 population 1280428583\ntable3\n#&gt; # A tibble: 6 × 3\n#&gt;   country      year rate             \n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan  1999 745/19987071     \n#&gt; 2 Afghanistan  2000 2666/20595360    \n#&gt; 3 Brazil       1999 37737/172006362  \n#&gt; 4 Brazil       2000 80488/174504898  \n#&gt; 5 China        1999 212258/1272915272\n#&gt; 6 China        2000 213766/1280428583\ntable4a\n#&gt; # A tibble: 3 × 3\n#&gt;   country     `1999` `2000`\n#&gt;   &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n#&gt; 1 Afghanistan    745   2666\n#&gt; 2 Brazil       37737  80488\n#&gt; 3 China       212258 213766\ntable4b\n#&gt; # A tibble: 3 × 3\n#&gt;   country         `1999`     `2000`\n#&gt;   &lt;chr&gt;            &lt;dbl&gt;      &lt;dbl&gt;\n#&gt; 1 Afghanistan   19987071   20595360\n#&gt; 2 Brazil       172006362  174504898\n#&gt; 3 China       1272915272 1280428583\n\nWhich table is tidy? Table 1? Table 2? Table 3? Or Table 4?\n\nLearn more about tidy data in vignette(\"tidy-data\")."
  },
  {
    "objectID": "Transformation/Transformation.html#data-transformation",
    "href": "Transformation/Transformation.html#data-transformation",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Data Transformation",
    "text": "Data Transformation\n\n“Pivoting” which converts between long and wide forms\n\npivot_longer() – “lengthens” data\npivot_wider() – “widens” data\n\n“Splitting” and “Combining” – splits or combines character columns\n\nseparate_wider_delim(), separate_wider_position(), separate_wider_regex() – turns a single character column into multiple columns.\nunite() – pastes together multiple columns into one.\n\ninner_join(), left_join(), right_join(), outer_join() – join tables"
  },
  {
    "objectID": "Transformation/Transformation.html#pivot_longer",
    "href": "Transformation/Transformation.html#pivot_longer",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "pivot_longer()",
    "text": "pivot_longer()\npivot_longer() – “lengthens” data, increasing the number of rows and decreasing the number of columns.\n\npivot_longer(data_frame, \n             cols, \n             ### columns selected to pivot into longer format\n             names_to = \"name\", \n             ### original column-names go to the new \"name\" column\n             values_to = \"value\") \n             ### original column-values go to the new \"value\" column"
  },
  {
    "objectID": "Transformation/Transformation.html#example-1",
    "href": "Transformation/Transformation.html#example-1",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Example 1",
    "text": "Example 1\nRecall table4a in the tidyverse package. This table is not tidy as the variable cases is scattered across two columns. In other words,\n\nThe column names (1999 and 2000) should be values of the year variable\nThe values (\\(745, 2666, \\cdots\\)) should be values of the cases variable."
  },
  {
    "objectID": "Transformation/Transformation.html#example-1.1",
    "href": "Transformation/Transformation.html#example-1.1",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Example 1.1",
    "text": "Example 1.1\n\ntable4a\n\nlibrary(tidyverse)\ntable4a\n#&gt; # A tibble: 3 × 3\n#&gt;   country     `1999` `2000`\n#&gt;   &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n#&gt; 1 Afghanistan    745   2666\n#&gt; 2 Brazil       37737  80488\n#&gt; 3 China       212258 213766\n\n\n\nUse pivot_longer() to “lengthen” the data table table4a\n\ntable4a %&gt;% pivot_longer(cols = c(`1999`, `2000`), \n                         names_to = \"year\", \n                         values_to = \"cases\")\n#&gt; # A tibble: 6 × 3\n#&gt;   country     year   cases\n#&gt;   &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt;\n#&gt; 1 Afghanistan 1999     745\n#&gt; 2 Afghanistan 2000    2666\n#&gt; 3 Brazil      1999   37737\n#&gt; 4 Brazil      2000   80488\n#&gt; 5 China       1999  212258\n#&gt; 6 China       2000  213766\n\n\n\nCreate table4 by join the tidy versions of table4a and table4b\n\nUse pivot_longer() to “lengthen” the data table table4a to table4a_tidy (variables: year and cases)\nUse pivot_longer() to “lengthen” the data table table4b to table4b_tidy (variables: year and population)\nThen join the two tidy tables to table4.\n\n\ntable4a_tidy &lt;- table4a %&gt;% pivot_longer(cols = c(`1999`, `2000`), \n                         names_to = \"year\", \n                         values_to = \"cases\")\ntable4b_tidy &lt;- table4b %&gt;% pivot_longer(cols = c(`1999`, `2000`), \n                         names_to = \"year\", \n                         values_to = \"population\")\ntable4 &lt;- left_join(table4a_tidy, table4b_tidy)\ntable4\n#&gt; # A tibble: 6 × 4\n#&gt;   country     year   cases population\n#&gt;   &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n#&gt; 1 Afghanistan 1999     745   19987071\n#&gt; 2 Afghanistan 2000    2666   20595360\n#&gt; 3 Brazil      1999   37737  172006362\n#&gt; 4 Brazil      2000   80488  174504898\n#&gt; 5 China       1999  212258 1272915272\n#&gt; 6 China       2000  213766 1280428583"
  },
  {
    "objectID": "Transformation/Transformation.html#pivot_wider",
    "href": "Transformation/Transformation.html#pivot_wider",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "pivot_wider()",
    "text": "pivot_wider()\npivot_wider() – “widens” data, increasing the number of columns and decreasing the number of rows.\n\npivot_wider(data_frame, \n            names_from = name,\n            values_from = value)\n\n\nnames_from and values_from – a pair of arguments\nnames_from – the original column where the new columns names are from\nvalues_from – the original column where the new columns values are from"
  },
  {
    "objectID": "Transformation/Transformation.html#example-2",
    "href": "Transformation/Transformation.html#example-2",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Example 2",
    "text": "Example 2\nRecall table2. This table is not tidy as an observations is a country in a year, but each observation is spread across two rows. In other words,\n\nThe cases and population should be variable names\nThe values (\\(745, 2666, \\cdots\\)) should be values of the cases or population variable."
  },
  {
    "objectID": "Transformation/Transformation.html#example-2.1",
    "href": "Transformation/Transformation.html#example-2.1",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Example 2.1",
    "text": "Example 2.1\n\ntable2\n\ntable2\n#&gt; # A tibble: 12 × 4\n#&gt;    country      year type            count\n#&gt;    &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n#&gt;  1 Afghanistan  1999 cases             745\n#&gt;  2 Afghanistan  1999 population   19987071\n#&gt;  3 Afghanistan  2000 cases            2666\n#&gt;  4 Afghanistan  2000 population   20595360\n#&gt;  5 Brazil       1999 cases           37737\n#&gt;  6 Brazil       1999 population  172006362\n#&gt;  7 Brazil       2000 cases           80488\n#&gt;  8 Brazil       2000 population  174504898\n#&gt;  9 China        1999 cases          212258\n#&gt; 10 China        1999 population 1272915272\n#&gt; 11 China        2000 cases          213766\n#&gt; 12 China        2000 population 1280428583\n\n\n\nUse pivot_wider() to “widens” the data table table2\n\nlibrary(tidyverse)\n\ntable2 %&gt;% pivot_wider(names_from = type, \n                       values_from = count)\n#&gt; # A tibble: 6 × 4\n#&gt;   country      year  cases population\n#&gt;   &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n#&gt; 1 Afghanistan  1999    745   19987071\n#&gt; 2 Afghanistan  2000   2666   20595360\n#&gt; 3 Brazil       1999  37737  172006362\n#&gt; 4 Brazil       2000  80488  174504898\n#&gt; 5 China        1999 212258 1272915272\n#&gt; 6 China        2000 213766 1280428583"
  },
  {
    "objectID": "Transformation/Transformation.html#separate",
    "href": "Transformation/Transformation.html#separate",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Separate",
    "text": "Separate\nTurns a single character column into multiple columns:\n\nseparate_wider_delim() – splits by delimiter\nseparate_wider_position() – splits at fixed widths\nseparate_wider_regex() – splits with regular expression matches"
  },
  {
    "objectID": "Transformation/Transformation.html#example-3",
    "href": "Transformation/Transformation.html#example-3",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Example 3",
    "text": "Example 3\nRecall table3. This table is not tidy as one column rate contains two variables cases and population. To fix this problem, we’ll need the separate-type functions.\n\n\ntable3 %&gt;% \n  separate_wider_delim(rate, delim = \"/\", names =  c(\"cases\", \"population\"))\n#&gt; # A tibble: 6 × 4\n#&gt;   country      year cases  population\n#&gt;   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     \n#&gt; 1 Afghanistan  1999 745    19987071  \n#&gt; 2 Afghanistan  2000 2666   20595360  \n#&gt; 3 Brazil       1999 37737  172006362 \n#&gt; 4 Brazil       2000 80488  174504898 \n#&gt; 5 China        1999 212258 1272915272\n#&gt; 6 China        2000 213766 1280428583\n\nUsing separate_wider_position() to separate the variable year in table3 to columns century (dropped) and year_last2.\n\ntable3 %&gt;% \n  separate_wider_position(year, c(2, year_last2 = 2))\n#&gt; # A tibble: 6 × 3\n#&gt;   country     year_last2 rate             \n#&gt;   &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;            \n#&gt; 1 Afghanistan 99         745/19987071     \n#&gt; 2 Afghanistan 00         2666/20595360    \n#&gt; 3 Brazil      99         37737/172006362  \n#&gt; 4 Brazil      00         80488/174504898  \n#&gt; 5 China       99         212258/1272915272\n#&gt; 6 China       00         213766/1280428583"
  },
  {
    "objectID": "Transformation/Transformation.html#unite",
    "href": "Transformation/Transformation.html#unite",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "unite()",
    "text": "unite()\nunite() – a convenience function to paste together multiple columns into one.\n\n\nunite(data_frame, \n      cols, \n      ### vector of columns to be combined\n      sep)\n      ### separator"
  },
  {
    "objectID": "Transformation/Transformation.html#example-4",
    "href": "Transformation/Transformation.html#example-4",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Example 4",
    "text": "Example 4\nCombine the century and year values in table5.\n\ntable5\n#&gt; # A tibble: 6 × 4\n#&gt;   country     century year  rate             \n#&gt;   &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan 19      99    745/19987071     \n#&gt; 2 Afghanistan 20      00    2666/20595360    \n#&gt; 3 Brazil      19      99    37737/172006362  \n#&gt; 4 Brazil      20      00    80488/174504898  \n#&gt; 5 China       19      99    212258/1272915272\n#&gt; 6 China       20      00    213766/1280428583\n\nunite() is the inverse of separate: it combines multiple columns into a single column.\nWe combine the century and year values.\n\ntable5 %&gt;% \n  unite(new, century, year)\n#&gt; # A tibble: 6 × 3\n#&gt;   country     new   rate             \n#&gt;   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan 19_99 745/19987071     \n#&gt; 2 Afghanistan 20_00 2666/20595360    \n#&gt; 3 Brazil      19_99 37737/172006362  \n#&gt; 4 Brazil      20_00 80488/174504898  \n#&gt; 5 China       19_99 212258/1272915272\n#&gt; 6 China       20_00 213766/1280428583\n\n\nThere is a understore between century and year above.\nRemove the underscore\n\n\ntable5 %&gt;% \n  unite(new, century, year, sep = \"\")\n#&gt; # A tibble: 6 × 3\n#&gt;   country     new   rate             \n#&gt;   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;            \n#&gt; 1 Afghanistan 1999  745/19987071     \n#&gt; 2 Afghanistan 2000  2666/20595360    \n#&gt; 3 Brazil      1999  37737/172006362  \n#&gt; 4 Brazil      2000  80488/174504898  \n#&gt; 5 China       1999  212258/1272915272\n#&gt; 6 China       2000  213766/1280428583"
  },
  {
    "objectID": "Transformation/Transformation.html#understand-joins",
    "href": "Transformation/Transformation.html#understand-joins",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Understand joins",
    "text": "Understand joins\nIt’s rare that data analysis involves a single table of data. Multiple tables of data are called relational data.\nFor example, in the nycflights13 package, the airlines, airports, planes, weather are related to the flights data in the following way."
  },
  {
    "objectID": "Transformation/Transformation.html#different-join-functions",
    "href": "Transformation/Transformation.html#different-join-functions",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Different join functions",
    "text": "Different join functions\n\ninner_join()\nleft_join()\nright_join()\nfull_join()"
  },
  {
    "objectID": "Transformation/Transformation.html#example-5",
    "href": "Transformation/Transformation.html#example-5",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Example 5",
    "text": "Example 5\nTo learn how joins (left_join, right_join, inner_join, outer_join, etc.) works, we use the toy example and a visual representation below.\n\nx &lt;- tribble(\n  ~key, ~val_x,\n     1, \"x1\",\n     2, \"x2\",\n     3, \"x3\"\n)\ny &lt;- tribble(\n  ~key, ~val_y,\n     1, \"y1\",\n     2, \"y2\",\n     4, \"y3\"\n)\n\n\n\nInner join\n\nx %&gt;% inner_join(y, by = \"key\")\n#&gt; # A tibble: 2 × 3\n#&gt;     key val_x val_y\n#&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n#&gt; 1     1 x1    y1   \n#&gt; 2     2 x2    y2\n\n\n\n\nOuter joins\n\nleft_join()\nright_join()\nfull_join()\n\n\nx %&gt;% left_join(y, by = \"key\")\n#&gt; # A tibble: 3 × 3\n#&gt;     key val_x val_y\n#&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n#&gt; 1     1 x1    y1   \n#&gt; 2     2 x2    y2   \n#&gt; 3     3 x3    &lt;NA&gt;\nx %&gt;% right_join(y, by = \"key\")\n#&gt; # A tibble: 3 × 3\n#&gt;     key val_x val_y\n#&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n#&gt; 1     1 x1    y1   \n#&gt; 2     2 x2    y2   \n#&gt; 3     4 &lt;NA&gt;  y3\nx %&gt;% full_join(y, by = \"key\")\n#&gt; # A tibble: 4 × 3\n#&gt;     key val_x val_y\n#&gt;   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n#&gt; 1     1 x1    y1   \n#&gt; 2     2 x2    y2   \n#&gt; 3     3 x3    &lt;NA&gt; \n#&gt; 4     4 &lt;NA&gt;  y3\n\n\nAnother way to depict the different types of join is with a Venn diagram:"
  },
  {
    "objectID": "Transformation/Transformation.html#example-6",
    "href": "Transformation/Transformation.html#example-6",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Example 6",
    "text": "Example 6\nWorking with two small dataframes: superheroes and publishers.\n\nsuperheroes &lt;- tibble::tribble(\n       ~name, ~alignment,  ~gender,          ~publ,\n   \"Magneto\",      \"bad\",   \"male\",            \"Marvel\",\n     \"Storm\",     \"good\", \"female\",            \"Marvel\",\n  \"Mystique\",      \"bad\", \"female\",            \"Marvel\",\n    \"Batman\",     \"good\",   \"male\",                \"DC\",\n     \"Joker\",      \"bad\",   \"male\",                \"DC\",\n  \"Catwoman\",      \"bad\", \"female\",                \"DC\",\n   \"Hellboy\",     \"good\",   \"male\", \"Dark Horse Comics\"\n  )\n\npublishers &lt;- tibble::tribble(\n  ~publ, ~yr_founded,\n        \"DC\",       1934L,\n    \"Marvel\",       1939L,\n     \"Image\",       1992L\n  )\n\nLet’s display the tibbles.\n\nsuperheroes\n#&gt; # A tibble: 7 × 4\n#&gt;   name     alignment gender publ             \n#&gt;   &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt;            \n#&gt; 1 Magneto  bad       male   Marvel           \n#&gt; 2 Storm    good      female Marvel           \n#&gt; 3 Mystique bad       female Marvel           \n#&gt; 4 Batman   good      male   DC               \n#&gt; 5 Joker    bad       male   DC               \n#&gt; 6 Catwoman bad       female DC               \n#&gt; 7 Hellboy  good      male   Dark Horse Comics\n\npublishers\n#&gt; # A tibble: 3 × 2\n#&gt;   publ   yr_founded\n#&gt;   &lt;chr&gt;       &lt;int&gt;\n#&gt; 1 DC           1934\n#&gt; 2 Marvel       1939\n#&gt; 3 Image        1992\n\n\nThe key variable name is publ, which needs to be exactly the same in the two dataframes."
  },
  {
    "objectID": "Transformation/Transformation.html#quiz",
    "href": "Transformation/Transformation.html#quiz",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Quiz",
    "text": "Quiz\n\nTibbles superheroes and publishers\n\n\n\n\n\n\n\n\n\n\nPlease match the output tables with the join functions used."
  },
  {
    "objectID": "Transformation/Transformation.html#quiz-solution",
    "href": "Transformation/Transformation.html#quiz-solution",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Quiz Solution",
    "text": "Quiz Solution\n\nTibbles superheroes and publishers\n\n\n\n\n\n\n\n\n\n\nPlease match the output tables with the join functions used."
  },
  {
    "objectID": "Transformation/Transformation.html#example-6.1-inner_join",
    "href": "Transformation/Transformation.html#example-6.1-inner_join",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Example 6.1 – inner_join()",
    "text": "Example 6.1 – inner_join()\n\nsuperheroes %&gt;% inner_join(publishers, by = \"publ\")\n#&gt; # A tibble: 6 × 5\n#&gt;   name     alignment gender publ   yr_founded\n#&gt;   &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt;       &lt;int&gt;\n#&gt; 1 Magneto  bad       male   Marvel       1939\n#&gt; 2 Storm    good      female Marvel       1939\n#&gt; 3 Mystique bad       female Marvel       1939\n#&gt; 4 Batman   good      male   DC           1934\n#&gt; 5 Joker    bad       male   DC           1934\n#&gt; 6 Catwoman bad       female DC           1934\n\n\ninner_join returns all rows from superheros where there are matching values in publishers.\nWe lose Hellboy as his publisher Dark Horse Comics does not appear in publishers."
  },
  {
    "objectID": "Transformation/Transformation.html#example-6.2-left_join",
    "href": "Transformation/Transformation.html#example-6.2-left_join",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Example 6.2 – left_join()",
    "text": "Example 6.2 – left_join()\n\nsuperheroes %&gt;% left_join(publishers, by = \"publ\")\n#&gt; # A tibble: 7 × 5\n#&gt;   name     alignment gender publ              yr_founded\n#&gt;   &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt;                  &lt;int&gt;\n#&gt; 1 Magneto  bad       male   Marvel                  1939\n#&gt; 2 Storm    good      female Marvel                  1939\n#&gt; 3 Mystique bad       female Marvel                  1939\n#&gt; 4 Batman   good      male   DC                      1934\n#&gt; 5 Joker    bad       male   DC                      1934\n#&gt; 6 Catwoman bad       female DC                      1934\n#&gt; 7 Hellboy  good      male   Dark Horse Comics         NA\n\n\nleft_join returns all rows from superheros.\nWe get all columns in superheros back, with the addition of variable yr_founded, which is unique to publishers.\nHellboy, whose publisher Dark Horse Comics does not appear in publishers, has an NA for yr_founded."
  },
  {
    "objectID": "Transformation/Transformation.html#example-6.3-right_join",
    "href": "Transformation/Transformation.html#example-6.3-right_join",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Example 6.3 – right_join()",
    "text": "Example 6.3 – right_join()\n\nsuperheroes %&gt;% right_join(publishers, by = \"publ\")\n#&gt; # A tibble: 7 × 5\n#&gt;   name     alignment gender publ   yr_founded\n#&gt;   &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt;       &lt;int&gt;\n#&gt; 1 Magneto  bad       male   Marvel       1939\n#&gt; 2 Storm    good      female Marvel       1939\n#&gt; 3 Mystique bad       female Marvel       1939\n#&gt; 4 Batman   good      male   DC           1934\n#&gt; 5 Joker    bad       male   DC           1934\n#&gt; 6 Catwoman bad       female DC           1934\n#&gt; 7 &lt;NA&gt;     &lt;NA&gt;      &lt;NA&gt;   Image        1992\n\n\nright_join returns all rows from publishers.\nWe get all columns in publishers back, with the addition of variables name, alignment, gender, which is unique to superheroes.\nImage, the publisher has no corresponding superhero, has NAs for name, alignment, gender."
  },
  {
    "objectID": "Transformation/Transformation.html#example-6.4-full_join",
    "href": "Transformation/Transformation.html#example-6.4-full_join",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Example 6.4 – full_join()",
    "text": "Example 6.4 – full_join()\n\nsuperheroes %&gt;% full_join(publishers, by = \"publ\")\n#&gt; # A tibble: 8 × 5\n#&gt;   name     alignment gender publ              yr_founded\n#&gt;   &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;  &lt;chr&gt;                  &lt;int&gt;\n#&gt; 1 Magneto  bad       male   Marvel                  1939\n#&gt; 2 Storm    good      female Marvel                  1939\n#&gt; 3 Mystique bad       female Marvel                  1939\n#&gt; 4 Batman   good      male   DC                      1934\n#&gt; 5 Joker    bad       male   DC                      1934\n#&gt; 6 Catwoman bad       female DC                      1934\n#&gt; 7 Hellboy  good      male   Dark Horse Comics         NA\n#&gt; 8 &lt;NA&gt;     &lt;NA&gt;      &lt;NA&gt;   Image                   1992\n\n\nrull_join returns all rows and columns from superheroes and publishers.\nWhere there are not matching values, use NA."
  },
  {
    "objectID": "Transformation/Transformation.html#reference-books",
    "href": "Transformation/Transformation.html#reference-books",
    "title": "Data Transformation with Pivot, Separate, Unite, and Join",
    "section": "Reference books",
    "text": "Reference books\n\nR for Data Science: https://r4ds.hadley.nz/\nHands-on Programming with R: https://rstudio-education.github.io/hopr/\nR Graphics Cookbook: https://r-graphics.org/\nStatistical Inference via Data Science: A Modern Dive into R and the Tidyverse, by Chester Ismay, Albert Y. Kim\nhttps://stat545.com/join-cheatsheet.html\n\n\nReference resources on tidyverse on github\nhttps://github.com/stmorse/intro-tidyverse\nhttps://github.com/rstudio-education/welcome-to-the-tidyverse"
  },
  {
    "objectID": "Quiz9/Quiz9.html",
    "href": "Quiz9/Quiz9.html",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz9.R.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz9.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz9/Quiz9.html#quiz-9-instructions",
    "href": "Quiz9/Quiz9.html#quiz-9-instructions",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz9.R.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz9.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz9/Quiz9.html#question-1",
    "href": "Quiz9/Quiz9.html#question-1",
    "title": "",
    "section": "Question 1",
    "text": "Question 1\n[2pts] Write an if-else statements within the function is_multiple_of_3 to return TRUE if a number is a multiple of 3, FALSE if not, for any given numeric value. Run the function use x1 = 77. Find y1 = is_multiple_of_3(x1)."
  },
  {
    "objectID": "Quiz9/Quiz9.html#question-2",
    "href": "Quiz9/Quiz9.html#question-2",
    "title": "",
    "section": "Question 2",
    "text": "Question 2\n[2pts] Givenx2 = 1:100, write a for loop to create y2 where each value is TRUE if the corresponding value in x2 is a multiple of 3, and FALSE otherwise, using is_multiple_of_3() function in the previous question."
  },
  {
    "objectID": "Quiz9/Quiz9.html#question-3",
    "href": "Quiz9/Quiz9.html#question-3",
    "title": "",
    "section": "Question 3",
    "text": "Question 3\n[2pts] Use ifelse() to achieve the same objective as the previous question. Creating y3 where each value is TRUE if the corresponding value in x3 = 100:200 is a multiple of 3, and FALSE otherwise."
  },
  {
    "objectID": "Quiz9/Quiz9.html#question-4",
    "href": "Quiz9/Quiz9.html#question-4",
    "title": "",
    "section": "Question 4",
    "text": "Question 4\n\n[2pts] Given the letter grades vector L.Grades below. Write a function Grade.Value() that converts “A” to 4, “B” to 3, “C” to 2, “D” to 1, and “F” to 0.\n\n\nL.Grades &lt;- c(\"B\", \"C\", \"A\", \"C\", \"C\", \"B\", \"F\", \"A\", \n              \"B\", \"A\", \"B\", \"B\", \"A\", \"A\", \"A\", \"B\", \n              \"D\", \"B\", \"B\", \"A\")\n\n\n[2pts] Use sapply() to convert L.Grades to grade values vector G.values."
  },
  {
    "objectID": "Quiz7/Quiz7.html",
    "href": "Quiz7/Quiz7.html",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz7.R.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz7.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz7/Quiz7.html#quiz-7-instructions",
    "href": "Quiz7/Quiz7.html#quiz-7-instructions",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz7.R.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz7.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz7/Quiz7.html#question-1",
    "href": "Quiz7/Quiz7.html#question-1",
    "title": "",
    "section": "Question 1",
    "text": "Question 1\nWe will use iris data frame, which is a data frame in the R package datasets. Please use ?iris to find more information.\n\n[1pt] Please find the number of columns of iris and store the value to object ncol.iris.\n[1pt] Please show the last three rows of iris and save it as Last.3.\n[1pt] Save the data where the species is “setosa” to the object named Setosa.\n[1pt] Find the column names of iris and save the result to colnames.iris.\n[3pts] Find the mean Sepal.Length of each Species. Save the results as mean.setosa, mean.versicolor, and mean.virginica."
  },
  {
    "objectID": "Quiz7/Quiz7.html#question-2",
    "href": "Quiz7/Quiz7.html#question-2",
    "title": "",
    "section": "Question 2",
    "text": "Question 2\n\n[1pt] Create a data frame named df_abcd as follows\n\n\n#&gt;     a b     c   d\n#&gt; 1 5.5 a  TRUE 1.1\n#&gt; 2 4.5 a FALSE 1.2\n#&gt; 3 3.5 b  TRUE 1.3\n#&gt; 4 2.5 b FALSE 1.4\n#&gt; 5 1.5 b  TRUE 1.5\n\n\n[1pt] Write a command that would give you the following data from df_abcd and save the result as df_ac.\n\n\n#&gt;     a     c\n#&gt; 1 5.5  TRUE\n#&gt; 2 4.5 FALSE\n#&gt; 3 3.5  TRUE\n#&gt; 4 2.5 FALSE\n#&gt; 5 1.5  TRUE\n\n\n[1pt] Add a new_column e &lt;- c(1, 1, 1, 1, 1) to df_abcd and save the new data frame as df_new. (Please note that, do not overwrite df_abcd.)\n\n\n#&gt;     a b     c   d e\n#&gt; 1 5.5 a  TRUE 1.1 1\n#&gt; 2 4.5 a FALSE 1.2 1\n#&gt; 3 3.5 b  TRUE 1.3 1\n#&gt; 4 2.5 b FALSE 1.4 1\n#&gt; 5 1.5 b  TRUE 1.5 1"
  },
  {
    "objectID": "Quiz4/Quiz4.html",
    "href": "Quiz4/Quiz4.html",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz4.R to Gradescope.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz4.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz4/Quiz4.html#quiz-4-instructions",
    "href": "Quiz4/Quiz4.html#quiz-4-instructions",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz4.R to Gradescope.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz4.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz4/Quiz4.html#question-1",
    "href": "Quiz4/Quiz4.html#question-1",
    "title": "",
    "section": "Question 1",
    "text": "Question 1\n\n[1pts] Let vec1 &lt;- seq(1, 10, 2). Generate a factor vec1_factor using vec1.\n\n\n\n\n\n\n[1pts] Check if vec1 is a vector? A factor? In addition, use class() function to check the type of vec1.\n\n\n\n\n\n\n[1pts] Check if vec1_factor is a vector? A factor? In addition, use class() function to check the type of vec1_factor.\n\n\n\n\n\n\n[1pts] Generate another factor vec1_factor10 using vec1, but levels = 1:10. Use identical(vec1_factor, vec1_factor10) to compare if the two factors are the same."
  },
  {
    "objectID": "Quiz4/Quiz4.html#question-2",
    "href": "Quiz4/Quiz4.html#question-2",
    "title": "",
    "section": "Question 2",
    "text": "Question 2\n[2pts] The typical 5-point Likert scale includes the following levels:\n\nStrongly Disagree\nDisagree\nNeutral\nAgree\nStrongly Agree\n\n\ny &lt;- c(\n  \"Disagree\", \"Disagree\", \"Agree\", \"Agree\", \"Strongly Agree\",           \n  \"Strongly Agree\", \"Strongly Disagree\", \"Strongly Disagree\", \n  \"Agree\", \"Agree\", \"Neutral\", \"Disagree\",         \n  \"Strongly Disagree\", \"Neutral\", \"Strongly Agree\", \"Agree\",           \n  \"Disagree\", \"Strongly Agree\", \"Strongly Agree\", \"Agree\",            \n  \"Neutral\", \"Agree\", \"Disagree\", \"Agree\", \"Agree\"  \n)\n\nBased on the vector y above, please generate a ordinal factor y_factor, which has the ordered levels as shown above (that is, ‘Strongly Disagree’ &lt; ‘Disagree’ &lt; ‘Neutral’ &lt; ‘Agree’ &lt; ‘Strongly Agree’)."
  },
  {
    "objectID": "Quiz4/Quiz4.html#question-3",
    "href": "Quiz4/Quiz4.html#question-3",
    "title": "",
    "section": "Question 3",
    "text": "Question 3\n\n\ndays_of_week &lt;- c(\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\")\n\nDAYS &lt;- c(\"Saturday\", \"Wednesday\", \"Sunday\", \"Friday\")\n\n\n[1pt] Sort the DAYS vector using sort() function. (Please note that the results are in alphabetical order rather than the order of the weekdays.)\n\n\n\n\n\n[1pt] Encode the vector DAYS into a factor DAYS_f, by using days_of_week above as the levels for the factor.\n\n\n\n\n\n[1pt] Sort DAYS_f using sort() function. (Please note that the results now is in the order of the weekdays.)\n\n\n\n\n\n[1pt] Use the function unclass() to obtain the integer vector associated to DAYS_f."
  },
  {
    "objectID": "Quiz2/Quiz2.html",
    "href": "Quiz2/Quiz2.html",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz2.R to Gradescope.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz2.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz2/Quiz2.html#quiz-2-instructions",
    "href": "Quiz2/Quiz2.html#quiz-2-instructions",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz2.R to Gradescope.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz2.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz2/Quiz2.html#question-1.",
    "href": "Quiz2/Quiz2.html#question-1.",
    "title": "",
    "section": "Question 1.",
    "text": "Question 1.\n[2 pts] Area of trapezoid\nAs you know, the formula for the area of a trapezoid is (base 1 + base 2) /2 \\(\\times\\) height, as seen in the figure below:\n\n\n\n\n\nWrite R code to compute the area of a trapezoid of base1 = 10, base2 = 7, and height = 5. The computed area should be stored in an object area."
  },
  {
    "objectID": "Quiz2/Quiz2.html#question-2.",
    "href": "Quiz2/Quiz2.html#question-2.",
    "title": "",
    "section": "Question 2.",
    "text": "Question 2.\nConsider the scores of a high school student:\n\nMaths – 95\nPhysics – 88.5\nPhysics lab – 79\nEnglish – 92\n\n(a). [1 pt] Use assignments to create variables maths, physics, physicslab, and english with their corresponding amounts.\n(b). [2 pts] Combine the four scores from part (a) into a vector named scores. Use the names() function to label the elements of the scores vector with the names: maths, physics, physicslab, and english.\n(c). [2 pts] Calculate the average of the scores and store the result in an object called avg.\n(d). [4 pts] Based on the scores vector in part (b) and policy table below, create a vector named grades containing the four corresponding grades. Additionally, create an integer vector grade_values with the four grade values. Recall that integer values are of the form 1L.\n\n\n\nRange\nGrade\nGrade Value\n\n\n\n\n[90, 100]\nA\n4\n\n\n[80, 90)\nB\n3\n\n\n[70, 80)\nC\n2\n\n\n[60, 70)\nD\n1\n\n\n&lt;60\nF\n0\n\n\n\n(e). [2 pts] Suppose the credits for Maths, Physics, Physics lab, English are 0.5, 1, 0.5, 1, respectively. Create a credits object.\n(f). [2 pts] Calculate the weighted GPA with\n\\[\\text{High School GPA} = \\sum (\\text{grade value}*\\text{credits})/ \\sum \\text{credits}\\] Save the value to object GPA."
  },
  {
    "objectID": "Quiz18/Quiz18.html",
    "href": "Quiz18/Quiz18.html",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz18.R.\nRemember:\n\nDo not rename external data files or edit them in any way. In other words, don’t modify Urbana Police Incidents Data (2020-2023).csv. Your code won’t work properly on my version of that data set, if you do.\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz18.R\n Don’t forget to use library(tidyverse)at the beginning of Quiz18.R.\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz18/Quiz18.html#quiz-18-instructions",
    "href": "Quiz18/Quiz18.html#quiz-18-instructions",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz18.R.\nRemember:\n\nDo not rename external data files or edit them in any way. In other words, don’t modify Urbana Police Incidents Data (2020-2023).csv. Your code won’t work properly on my version of that data set, if you do.\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz18.R\n Don’t forget to use library(tidyverse)at the beginning of Quiz18.R.\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz18/Quiz18.html#data-source",
    "href": "Quiz18/Quiz18.html#data-source",
    "title": "",
    "section": "Data Source:",
    "text": "Data Source:\nThe Urbana Open Data website Urbana Police Incidents Dataset Link contains police incident data from 1988 up until February 2023, which is when the Urbana Police began using a new computer system.\n\nIn this quiz, we use data exclusively from 2020 to 2023 Urbana Police Incidents Data (2020-2023).csv and concentrate only on the columns related to date and time."
  },
  {
    "objectID": "Quiz18/Quiz18.html#question-1",
    "href": "Quiz18/Quiz18.html#question-1",
    "title": "",
    "section": "Question 1",
    "text": "Question 1\n\n[1 pt] Read in the CSV data as tibble incidents and select the columns from DATE.OCCURRED to TIME.ARRIVED only (8 columns).\n\n\n\n\n\n\n\n\n[2 pts] Select the appropriate lubridate function to convert the variables DATE.OCCURRED, DATE.REPORTED, and DATE.ARRIVED from character to date type.\n\n\n\n\n\n\n\n\n\n[2 pts] Parse the day of the month the incidents occurred. Save the result as a vector named DAY."
  },
  {
    "objectID": "Quiz18/Quiz18.html#question-2",
    "href": "Quiz18/Quiz18.html#question-2",
    "title": "",
    "section": "Question 2",
    "text": "Question 2\n[3 pts] Please\n\ncombine the DATE.OCCURRED and TIME.OCCURRED as DATETIME.OCCURRED;\ncombine the DATE.REPORTED and TIME.REPORTED as DATETIME.REPORTED;\ncombine the DATE.ARRIVED and TIME.ARRIVED as DATETIME.ARRIVED.\n\n[Hint: We can combine the date “2022-01-04” and time “16:00:00” in the following way:\nymd_hms(paste(\"2022-01-04\", \"16:00:00\"), tz = \"America/Chicago\") ]"
  },
  {
    "objectID": "Quiz18/Quiz18.html#question-3",
    "href": "Quiz18/Quiz18.html#question-3",
    "title": "",
    "section": "Question 3",
    "text": "Question 3\n\n[2 pts] Identify the top 5 incidents with the largest time difference between the time reported and the time occurred (i.e. DATETIME.REPORTED - DATETIME.OCCURRED or diff(DATETIME.REPORTED, DATETIME.OCCURRED)). Please make sure to use as.duration() to convert the difftime() object to a Duration object for easier interpretation. Name this difference variable report_occur_diff, and save the subset as a tibble named top5_rodiff.\n\n[Hint: You may use arrange() and head() or slice_head() functions.]\n\n\n\n\n\n\n\n\n[2 pts] Identify the top 5 incidents with the largest time difference between the time arrived and the time reported (i.e. DATETIME.ARRIVED - DATETIME.REPORTED or diff(DATETIME.ARRIVED, DATETIME.REPORTED)). Name this difference variable arrive_report_diff, and save the subset as a tibble named top5_ardiff."
  },
  {
    "objectID": "Quiz16/Quiz16.html",
    "href": "Quiz16/Quiz16.html",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz16.R.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz16.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz16/Quiz16.html#quiz-16-instructions",
    "href": "Quiz16/Quiz16.html#quiz-16-instructions",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz16.R.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz16.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz16/Quiz16.html#install-and-load-the-fivethirtyeight-package",
    "href": "Quiz16/Quiz16.html#install-and-load-the-fivethirtyeight-package",
    "title": "",
    "section": "Install and Load the fivethirtyeight Package",
    "text": "Install and Load the fivethirtyeight Package\nIn this quiz, let’s use a motivating example from the fivethirtyeight package.\nThe fivethirtyeight package (Kim, Ismay, and Chunn 2021) provides access to the datasets used in many articles published by the data journalism website, https://FiveThirtyEight.com. For a complete list of all 129 datasets included in the fivethirtyeight package, check out the package webpage by going to: https://fivethirtyeight-r.netlify.app/articles/fivethirtyeight.html.\n\nif(!require(\"fivethirtyeight\", character.only = TRUE)) install.packages(\"fivethirtyeight\")\nlibrary(fivethirtyeight)\nlibrary(tidyverse)"
  },
  {
    "objectID": "Quiz16/Quiz16.html#question-1",
    "href": "Quiz16/Quiz16.html#question-1",
    "title": "",
    "section": "Question 1",
    "text": "Question 1\nUse the drinks data frame.\ndrinks is a data frame containing results from a survey of the average number of servings of beer, spirits, and wine consumed in 193 countries. This data was originally reported on FiveThirtyEight.com in Mona Chalabi’s article: “Dear Mona Followup: Where Do People Drink The Most Beer, Wine And Spirits?”.\n\n[2 pts] Prepare the data frame drinks_4ctrs:\n\nLet’s apply some of the data wrangling verbs we learned in the previous lectures on the drinks data frame:\n\nfilter() the drinks data frame to only the 4 countries: the United States, China, Italy, and Saudi Arabia, [Hint: Please use unique(drinks$country)to find the corresponding names in the country column.]\nselect() all columns except total_litres_of_pure_alcohol by using the - sign,\nrename() the variables beer_servings, spirit_servings, and wine_servings to beer, spirit, and wine, respectively.\n\nSave the resulting tibble as drinks_4ctrs.\n\n[2 pts] Convert drinks_4ctrs to “tidy” format using pivot_longer(). Let\n\n\nnames_to = \"type\"\nvalues_to = \"servings\"\n\nSave the tidy tibble as drinks_4ctrs_tidy.\n\n[2 pts] Visualize the data frame drinks_4ctrs_tidy by creating a bar-graph with x = country, y = serving, and color the bars using variable type. Please use position = \"dodge\" to place the bars side by side. Save the plot as PlotQ1.png using ggsave(\"PlotQ1.png\", width = 10, height = 8, dpi = 300)."
  },
  {
    "objectID": "Quiz16/Quiz16.html#question-2",
    "href": "Quiz16/Quiz16.html#question-2",
    "title": "",
    "section": "Question 2",
    "text": "Question 2\nairline_safety is another data frame in fivethirtyeight package containing information on different airline companies’ safety records.\nThis data was originally reported on the data journalism website, FiveThirtyEight.com, in Nate Silver’s article, “Should Travelers Avoid Flying Airlines That Have Had Crashes in the Past?”.\n\n[2 pts] Create the tibble df_fatalities with the columns: airline, and all columns starts with fatalities. [Hint: You may use start_with(\"fatalities\").]\n[2 pts] Convert df_fatalities to tidy format as shown below and save the tidy tibble as df_fatalities_tidy. In this process, you need to\n\n\nLengthens the data, so that the new column fatalities_year storing the values fatalities_85_99 or fatalities_00_14, and the new column count storing the cell values.\nUse Seperate_wider_position() to remove the fatalities_ in the fatalities_year column. And the resulting column is named year.\nMake the year column a factor with levels year_level = c(\"85_99\", \"00_14\")\n\n\n#&gt; # A tibble: 112 × 3\n#&gt;    airline               year  count\n#&gt;    &lt;chr&gt;                 &lt;fct&gt; &lt;int&gt;\n#&gt;  1 Aer Lingus            85_99     0\n#&gt;  2 Aer Lingus            00_14     0\n#&gt;  3 Aeroflot              85_99   128\n#&gt;  4 Aeroflot              00_14    88\n#&gt;  5 Aerolineas Argentinas 85_99     0\n#&gt;  6 Aerolineas Argentinas 00_14     0\n#&gt;  7 Aeromexico            85_99    64\n#&gt;  8 Aeromexico            00_14     0\n#&gt;  9 Air Canada            85_99     0\n#&gt; 10 Air Canada            00_14     0\n#&gt; # ℹ 102 more rows\n\n\n[2 pts] Visualize the df_fatalities_tidy tibble by creating a bar-graph with x = airline, y = count, and color the bars using variable year for the airlines “United / Continental”, “Delta / Northwest”, and “American”. You may use position = \"dodge\" to place the bars side by side. Save the plot as PlotQ2.png using ggsave(\"PlotQ2.png\", width = 10, height = 8, dpi = 300)."
  },
  {
    "objectID": "Quiz14/Quiz14.html",
    "href": "Quiz14/Quiz14.html",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz14.R.\nRemember:\n\nDo not rename external data files or edit them in any way. In other words, don’t modify BLACKFRIDAY.csv. Your code won’t work properly on my version of that data set, if you do.\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz14.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz14/Quiz14.html#quiz-14-instructions",
    "href": "Quiz14/Quiz14.html#quiz-14-instructions",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz14.R.\nRemember:\n\nDo not rename external data files or edit them in any way. In other words, don’t modify BLACKFRIDAY.csv. Your code won’t work properly on my version of that data set, if you do.\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz14.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz14/Quiz14.html#question-1",
    "href": "Quiz14/Quiz14.html#question-1",
    "title": "",
    "section": "Question 1",
    "text": "Question 1\n\n[1 pt] Load the cats data frame from the MASS package. Save it as a tibble named tbl_cats.\n[1 pt] Try the codes below to identify another difference between a data frame and a tibble:\n\n\nTibbles are also stricter with $. Tibbles never do partial matching, and will throw a warning and return NULL if the column does not exist.\n\n\nIn this case, Sex is a variable name, but S is not. Data frame does the partial matching and print the Sex column. But tibble gives a warning.\n\n\nInstruction: Please just try the codes below. Before submitting Quiz14.R, please comment out tbl_cats$S to ensure there are no bugs.\n\n\ncats$S\ntbl_cats$S"
  },
  {
    "objectID": "Quiz14/Quiz14.html#question-2",
    "href": "Quiz14/Quiz14.html#question-2",
    "title": "",
    "section": "Question 2",
    "text": "Question 2\n\n[1 pt] Please import the CSV data BLACKFRIDAY as a tibble named BlackFriday.\n[1 pt] First, check if BlackFriday is a data frame. Second, use is_tibble() to check if BlackFriday is a tibble.\n\nNote that: As tibble is a modern take on the classic data frame in R, and it inherits from the data frame class. Therefore, for a tibble, if you use is.data.frame function to check, it returns TRUE because a tibble is a specialized form of a data frame with additional features."
  },
  {
    "objectID": "Quiz14/Quiz14.html#question-3",
    "href": "Quiz14/Quiz14.html#question-3",
    "title": "",
    "section": "Question 3",
    "text": "Question 3\nCreate the annoying tibble as follows:\n\nannoying &lt;- tibble(\n`1` = c(8, 5, 3, 9, 6, 7, 10, 7, 10, 4),\n`2` = `1` * 2 + rnorm(length(`1`))\n)\n\n\n[2 pt] Extract the column with the variable name 1 as a tibble. Denote it as tbl_1.\n[2 pt] Extract the column with the variable name 1 as an (atomic) vector (not a list). Denote it as vec_1.\n[1 pt] Create a new column called 3, which is column 2 divided by column 1.\n[1 pt] Please rename the columns to “one”, “two”, and “three”. [Hint: After renaming, be sure to save the new tibble to annoying to replace the original tibble. ]"
  },
  {
    "objectID": "Quiz11/Quiz11.html",
    "href": "Quiz11/Quiz11.html",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz11.R.\nRemember:\n\nDo not rename external data files or edit them in any way. In other words, don’t modify CLEANDATA.txt, etc. unless specifically requested and instructed below. Your code won’t work properly on my version of that data set, if you do.\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz11.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz11/Quiz11.html#quiz-11-instructions",
    "href": "Quiz11/Quiz11.html#quiz-11-instructions",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz11.R.\nRemember:\n\nDo not rename external data files or edit them in any way. In other words, don’t modify CLEANDATA.txt, etc. unless specifically requested and instructed below. Your code won’t work properly on my version of that data set, if you do.\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz11.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz11/Quiz11.html#data-preparation-practice-converting-xlsx-file-to-csv",
    "href": "Quiz11/Quiz11.html#data-preparation-practice-converting-xlsx-file-to-csv",
    "title": "",
    "section": "Data Preparation – Practice converting XLSX file to CSV",
    "text": "Data Preparation – Practice converting XLSX file to CSV\nPlease review the instructions on “How to convert Excel file to CSV” at https://www.ablebits.com/office-addins-blog/convert-excel-csv/. Then, save the “BLACKFRIDAY” and “COFFEE” spreadsheets from “Datasets.xlsx” as two separate CSV files named “BLACKFRIDAY.csv” and “COFFEE.csv”.\nAfter this step, we will disregard “Datasets.xlsx” and only use the two newly created CSV files for the following questions."
  },
  {
    "objectID": "Quiz11/Quiz11.html#question-1",
    "href": "Quiz11/Quiz11.html#question-1",
    "title": "",
    "section": "Question 1",
    "text": "Question 1\n\n[1pt] Import the first 4 columns of “COFFEE.csv” and save the data frame as COFFEE.PART1. [Hint: You may use nrows for this task.]\n\nThe imported data frame should be\n\n#&gt;   DEMAND PRICE         X Pred_DEMAND\n#&gt; 1   1120   3.0 0.3333333   1088.8869\n#&gt; 2    999   3.1 0.3225806   1015.6815\n#&gt; 3    932   3.2 0.3125000    947.0514\n#&gt; 4    884   3.3 0.3030303    882.5807\n#&gt; 5    807   3.4 0.2941176    821.9024\n#&gt; 6    760   3.5 0.2857143    764.6914\n#&gt; 7    701   3.6 0.2777778    710.6588\n#&gt; 8    688   3.7 0.2702703    659.5469\n\n\n[2pts] Export the regression analysis results to file “REGRESSION_COFFEE_PART1.txt”.\n\n[Hint: You may use cat() and sink() for this task; You may use the following R codes.\n\nlmod &lt;- lm(PRICE ~ DEMAND, data = COFFEE.PART1)\nsummary(lmod)\nanova(lmod)\n\n].\nThe final TXT file “REGRESSION_COFFEE_PART1.txt” should look like:\n\n\n\n\n\n\n[1pt] Import the last 3 columns of “COFFEE.csv” and save the data frame as COFFEE.PART2. Then rename the second column name as inverseP.\n\nThe imported data frame should be: (Below we only show the first and last 3 rows to save space)\n\nhead(COFFEE.PART2, 3)\n#&gt;      P  inverseP     Dhat\n#&gt; 1 3.00 0.3333333 1089.333\n#&gt; 2 3.01 0.3322259 1081.794\n#&gt; 3 3.02 0.3311258 1074.305\ntail(COFFEE.PART2, 3)\n#&gt;       P  inverseP     Dhat\n#&gt; 69 3.68 0.2717391 670.0000\n#&gt; 70 3.69 0.2710027 664.9864\n#&gt; 71 3.70 0.2702703 660.0000\n\n\n[1pt] Use plot(COFFEE.PART2$P, COFFEE.PART2$inverseP) to draw the scatterplot and save the plot as “PLOT_COFFEE_PART2.png”, make sure you use bg = \"transparent\" to set the background to transparent."
  },
  {
    "objectID": "Quiz11/Quiz11.html#question-2",
    "href": "Quiz11/Quiz11.html#question-2",
    "title": "",
    "section": "Question 2",
    "text": "Question 2\n[2pts] Import “BLACKFRIDAY.csv” and save the data frame as BLACKFRIDAY. Filter the data frame with YEARS greater than 10, and save the result as BLACKFRIDAY_gt10. Export data frame BLACKFRIDAY_gt10 to CSV file “BLACKFRIDAY_gt10.csv”. Make sure you use row.names = FALSE to avoid writing the row names."
  },
  {
    "objectID": "Quiz11/Quiz11.html#question-3",
    "href": "Quiz11/Quiz11.html#question-3",
    "title": "",
    "section": "Question 3",
    "text": "Question 3\nUse “CLEANDATA.txt” for this question. Complete the following parts.\n\n[2pts]\n\nStep 1: Skip the first five rows (consider the column names as Row 1) and import “CLEANDATA.txt”. Save the data frame as CLEANDATA.\nStep 2: Scan the column names from “CLEANDATA.txt” as header. Then assemble the data frame CLEANDATA and header.\nThe data frame CLEANDATA should be:\n\n#&gt;    EXP AUTOMATI OUTPUT\n#&gt; 1   &lt;1        M     12\n#&gt; 2   &lt;1        M     10\n#&gt; 3   &lt;1        L      5\n#&gt; 4   &lt;1        L      4\n#&gt; 5   &lt;1        L      8\n#&gt; 6  1-2        H     15\n#&gt; 7  1-2        H     18\n#&gt; 8  1-2        H     17\n#&gt; 9  1-2        M     10\n#&gt; 10 1-2        M     10\n#&gt; 11 1-2        M     12\n#&gt; 12 1-2        L      8\n#&gt; 13 1-2        L     10\n#&gt; 14 1-2        L     10\n#&gt; 15  &gt;2        H     20\n#&gt; 16  &gt;2        H     18\n#&gt; 17  &gt;2        H     19\n#&gt; 18  &gt;2        M     13\n#&gt; 19  &gt;2        M     13\n#&gt; 20  &gt;2        M     14\n#&gt; 21  &gt;2        L     12\n#&gt; 22  &gt;2        L     11\n#&gt; 23  &gt;2        L     13\n\n\n[1pt] Write the CLEANDATA$AUTOMATI, one element per line, to the file “AUTOMATI.txt”."
  },
  {
    "objectID": "Lab8/Lab8.html",
    "href": "Lab8/Lab8.html",
    "title": "Lab 8 Reaction Time Project",
    "section": "",
    "text": "About the Data and Survey\nIn Spring 2024 STAT 425 class, we collected data on Reaction Time from around 150 students. Please find the survey used to collect this data Reaction Time Survey Questions.pdf. There are two datasets for Lab 8:\n\nThe real data – “Reaction Time Survey.csv”\nThe mock data – “Mock Student Information.csv”\n\nIn this lab, please clean and explore the datasets.\n\n\nLab 8 Instruction\n\nIt is strongly recommended to follow the method demonstrated in the lecture video “Projects in R Video – Female Life Expectancy Project” to create an R project and complete this lab.\nAs usual, you are only required to submit the PDF file generated to Gradescope.\n\n\n\nLoad Packages and Read Data\nPlease load the packages you need and import the two data sets:\n\nImport “Reaction Time survey.csv” as survey.\nImport “Mock Student Information.csv” as student.\n\n\n\nQuestion I: Data Cleaning\n[40 pts] Please perform the data cleaning for survey. Some hints are:\n\nYou may rename the variables as\n\n\nc(\"mockID\", \"Reaction.time\", \"Class\", \"Age\", \"Avg.sleep.time\",\n  \"last.night.sleep.time\", \"Awake.hours\", \"Fatigue.level\",\n  \"Stress.level\", \"Distraction\", \"Noise.level\", \"Temp.level\",\n  \"Game.freq\", \"Sport.freq\", \"Avg.hours.exercise\",\n  \"Caffein.intake\", \"Alcohol.intake\", \"Visual.acuity\",\n  \"Primary.hand\", \"Use.primary.hand\", \"Cautious.level\",\n  \"Input.device\", \"Device.OS\", \"WiFi.stable\")\n\n\nTechnically, it’s impossible to have a Reaction Time less than or equal to 100 milliseconds. Remove the observations with Reaction.time less than or equal to 100. [Notes: In reality, we contacted the students to confirm or update their submissions.]\nYou may use separate_wider_delim() to clean up the Visual.acuity so that the variable becomes a factor with the following levels: “Very Poor”, “Poor”, “Average”, “Good”, “Excellent”.\n\n(Use levels = c(\"Very Poor\", \"Poor\", \"Average\", \"Good\", \"Excellent\"))\n\nYou may use separate_wider_delim twice to clean up the Device.OS so that the variable is a character  variable with the possible values: “Desktop computer”, “Laptop”, “iPhone”, “iPad”, “Smartphone”, “Tablet”, “Chromebook”. Please use help(separate_wider_delim) to find solutions for the issue where “Chromebook” does not have “-” or “(” as a delimiter.\nPlease clean up the columns Avg.sleep.time, last.night.sleep.time, Awake.hours, Noise.level, and Avg.hours.exercise so that they become numeric variables. Be cautious of using as.numeric() directly, as it may introduce NAs due to coercion. Instead, handle edge cases like “7h4min”, “7:30”, “1~3” first, then use str_remove_all(..., \"[[:alpha:][:space:]]\") to remove any characters and empty spaces from the responses. Finally, convert the cleaned columns to numeric variables.\nConvert the Class, Fatigue.level, Stress.level, Temp.level, Game.freq, Sport.freq, Cautious.level as factors with levels as follows:\n\n\nclasslevel =  c(\"Freshman\", \"Sophomore\", \"Junior\", \"Senior\", \"Graduate\") \n# Even if there are no freshmen in the data.\nfatiguelevel = c(\"Not fatigued at all\", \"Slightly Fatigued\", \n                 \"Moderately fatigued\", \"Very fatigued\", \"Extremely fatigued\")\nstresslevel = c(\"Very Low\", \"Low\", \"Moderate\", \"High\" , \"Very High\")\ntemplevel = c(\"Very Cold\", \"Cold\", \"Neutral\", \"Warm\", \"Very Warm\")\ngamefreqlevel = c(\"Daily\", \"Several times a week\", \n                  \"Once a week\", \"Several times a month\", \"Rarely\", \"Never\")\nsportfreqlevel =  c(\"Daily\", \"Several times a week\", \"Once a week\", \n                    \"Several times a month\", \"Rarely\", \"Never\")\ncautiouslevel = c(\"Not cautious at all\", \"Slightly cautious\", \n                  \"Moderately cautious\", \"Very cautious\", \"Extremely cautious\")\n\n\nPerform any additional data cleaning you find necessary.\n\nAfter the data cleaning procedure, glimpse(survey) should show something like\n\nglimpse(survey)\n#&gt; Rows: 140\n#&gt; Columns: 24\n#&gt; $ mockID                &lt;chr&gt; \"MJJXGR\", \"JHJZMT\", \"VQTCNE\", \"CKJWEX\", \"MBKMNF\"…\n#&gt; $ Reaction.time         &lt;dbl&gt; 180, 278, 350, 267, 229, 225, 200, 282, 272, 412…\n#&gt; $ Class                 &lt;fct&gt; Sophomore, Sophomore, Senior, Graduate, Sophomor…\n#&gt; $ Age                   &lt;dbl&gt; 20, 19, 22, 24, 20, 20, 20, 20, 19, 21, 20, 21, …\n#&gt; $ Avg.sleep.time        &lt;dbl&gt; 7.0, 7.0, 8.0, 6.0, 7.0, 7.0, 6.0, 10.0, 8.5, 7.…\n#&gt; $ last.night.sleep.time &lt;dbl&gt; 8.0, 7.0, 5.0, 5.0, 6.0, 8.0, 5.0, 8.0, 9.0, 6.0…\n#&gt; $ Awake.hours           &lt;dbl&gt; 10.00, 6.00, 4.00, 6.00, 5.00, 5.00, 1.00, 4.00,…\n#&gt; $ Fatigue.level         &lt;fct&gt; Not fatigued at all, Slightly Fatigued, Slightly…\n#&gt; $ Stress.level          &lt;fct&gt; Very Low, Low, Low, High, Low, Moderate, Moderat…\n#&gt; $ Distraction           &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"Yes\", \"Yes…\n#&gt; $ Noise.level           &lt;dbl&gt; 5, 8, 3, 2, 9, 3, 6, 8, 7, 3, 5, 7, 3, 7, 5, 7, …\n#&gt; $ Temp.level            &lt;fct&gt; Neutral, Warm, Neutral, Neutral, Neutral, Neutra…\n#&gt; $ Game.freq             &lt;fct&gt; Several times a month, Rarely, Daily, Several ti…\n#&gt; $ Sport.freq            &lt;fct&gt; Several times a month, Several times a month, On…\n#&gt; $ Avg.hours.exercise    &lt;dbl&gt; 5.0, 6.0, 5.0, 3.0, 1.0, 10.0, 7.0, 7.0, 2.0, 4.…\n#&gt; $ Caffein.intake        &lt;chr&gt; \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\",…\n#&gt; $ Alcohol.intake        &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", …\n#&gt; $ Visual.acuity         &lt;fct&gt; Excellent, Excellent, Good, Good, Good, Excellen…\n#&gt; $ Primary.hand          &lt;chr&gt; \"Ambidextrous (both hands equally)\", \"Right hand…\n#&gt; $ Use.primary.hand      &lt;chr&gt; \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\",…\n#&gt; $ Cautious.level        &lt;fct&gt; Moderately cautious, Slightly cautious, Slightly…\n#&gt; $ Input.device          &lt;chr&gt; \"Mouse\", \"Trackpad\", \"Mouse\", \"Touch screen\", \"T…\n#&gt; $ Device.OS             &lt;chr&gt; \"Desktop computer\", \"Laptop\", \"Laptop\", \"iPhone\"…\n#&gt; $ WiFi.stable           &lt;chr&gt; \"Stable\", \"Stable\", \"Stable\", \"Stable\", \"Stable\"…\n\n\n\nQuestion II: Join Two tables\n\n[10 pts] Join the two tables and list the students who did not respond to the survey. [Hint: You may use anti_join() for this task. Look up information about anti_join() online if needed.]\n[10 pts] Several students have submitted the survey more than once. To handle this, we should remove the duplicate submissions by keeping only the last submission (assuming the survey is in time order). Follow the steps:\n\n\nArrange the observations in reverse-time order using desc(row_number()).\nApply distinct(mockID, .keep_all = TRUE). [You can use ?distinct() to understand why this approach works.]\n\n\n[10 pts] Join the two tables and keep all information from survey, use mockID as the key. Save the new tibble as survey_student (or a name of your choice).\n\n\n\nQuestion III: Explore the Data survey_student\n[30 pts] Create data visualizations or tables to uncover interesting insights from the data. Please list at least three notable findings.\nHint: You may find it’s helpful to combine some categories into fewer, more concise categories. Here is one example,\n\nsurvey_student %&gt;%\n  mutate(Fatigue.3 = case_when(\n    Fatigue.level %in% c(\"Extremely fatigued\", \"Very fatigued\")~ \"H.Fatigue\",\n    Fatigue.level %in% c(\"Moderately fatigued\") ~ \"M.Fatigue\",\n    Fatigue.level %in% c(\"Not fatigued at all\", \"Slightly Fatigued\")~ \"L.Fatigue\"\n    ),\n    Fatigue.3 = factor(Fatigue.3, levels = c(\"H.Fatigue\", \"M.Fatigue\", \"L.Fatigue\"))\n  )"
  },
  {
    "objectID": "Lab6HelpDoc/Lab6HelpDoc.html#why-vectorization",
    "href": "Lab6HelpDoc/Lab6HelpDoc.html#why-vectorization",
    "title": "",
    "section": "Why Vectorization?",
    "text": "Why Vectorization?\n\nAvoid using for loops in R when possible.\nUse vectorization whenever you can."
  },
  {
    "objectID": "Lab6HelpDoc/Lab6HelpDoc.html#kronecker-product",
    "href": "Lab6HelpDoc/Lab6HelpDoc.html#kronecker-product",
    "title": "",
    "section": "Kronecker Product",
    "text": "Kronecker Product\nIn mathematics, the Kronecker product, sometimes denoted by \\(\\bigotimes\\), is an operation on two matrices of arbitrary size resulting a block matrix. It is a specialization of the tensor product (which is denoted by the same symbol) from vectors to matrices and gives the matrix of the tensor product linear map with respect to a standard choice of basis. The Kronecker product is to be distinguished from the usual matrix multiplication, which is an entirely different operation. The Kronecker product is also sometimes called matrix direct product.\n\nYou can find more information about Kronecker Product on Wikipedia https://en.wikipedia.org/wiki/Kronecker_product."
  },
  {
    "objectID": "Lab6HelpDoc/Lab6HelpDoc.html#mathemetical-definition-of-kronecker-product",
    "href": "Lab6HelpDoc/Lab6HelpDoc.html#mathemetical-definition-of-kronecker-product",
    "title": "",
    "section": "Mathemetical Definition of Kronecker Product",
    "text": "Mathemetical Definition of Kronecker Product\nIf \\(\\mathbf{A}\\) is an \\(m \\times n\\) matrix and \\(\\mathbf{B}\\) is a \\(p \\times q\\) matrix, then the Kronecker product \\(\\mathbf{A}\\bigotimes \\mathbf{B}\\) is the \\(pm \\times qn\\) block matrix:\n\\[\\mathbf{A}\\bigotimes \\mathbf{B} = \\begin{bmatrix}\na_{11}\\mathbf{B}\\quad  \\cdots \\quad a_{1n}\\mathbf{B}\\\\\n\\vdots\\quad  \\ddots\\quad  \\vdots\\\\\na_{m1}\\mathbf{B}\\quad  \\cdots \\quad a_{mn}\\mathbf{B}\n\\end{bmatrix},\\]\nmore explicitly,\n\\[\\mathbf{A}\\bigotimes \\mathbf{B} =\\left[\\begin{array}{cccccccccc}\na_{11}b_{11}&  a_{11}b_{12} & \\cdots & a_{11}b_{1q}& \\cdots& \\cdots& a_{1n}b_{11}&  a_{1n}b_{12} & \\cdots & a_{1n}b_{1q} \\\\\na_{11}b_{21}&  a_{11}b_{22} & \\cdots & a_{11}b_{2q}& \\cdots& \\cdots& a_{1n}b_{21}&  a_{1n}b_{22} & \\cdots & a_{1n}b_{2q} \\\\\n\\vdots& \\vdots&  \\ddots&  \\vdots & & & \\vdots& \\vdots&  \\ddots&  \\vdots \\\\\na_{11}b_{p1}&  a_{11}b_{p2} & \\cdots & a_{11}b_{pq}& \\cdots& \\cdots& a_{1n}b_{p1}&  a_{1n}b_{p2} & \\cdots & a_{1n}b_{pq} \\\\\n\\vdots& \\vdots&  &  \\vdots & \\ddots& & \\vdots  & \\vdots& & \\vdots \\\\\n\\vdots& \\vdots&  &  \\vdots & &\\ddots & \\vdots  & \\vdots& & \\vdots \\\\\na_{m1}b_{11}&  a_{m1}b_{12} & \\cdots & a_{m1}b_{1q}& \\cdots& \\cdots& a_{mn}b_{11}&  a_{mn}b_{12} & \\cdots & a_{mn}b_{1q} \\\\\na_{m1}b_{21}&  a_{m1}b_{22} & \\cdots & a_{m1}b_{2q}& \\cdots& \\cdots& a_{mn}b_{21}&  a_{mn}b_{22} & \\cdots & a_{mn}b_{2q} \\\\\n\\vdots& \\vdots&  \\ddots&  \\vdots & & & \\vdots& \\vdots&  \\ddots&  \\vdots \\\\\na_{m1}b_{p1}&  a_{m1}b_{p2} & \\cdots & a_{m1}b_{pq}& \\cdots& \\cdots& a_{mn}b_{p1}&  a_{mn}b_{p2} & \\cdots & a_{mn}b_{pq}\n\\end{array}\\right],\\]"
  },
  {
    "objectID": "Lab6HelpDoc/Lab6HelpDoc.html#kronecker-product-example",
    "href": "Lab6HelpDoc/Lab6HelpDoc.html#kronecker-product-example",
    "title": "",
    "section": "Kronecker Product Example",
    "text": "Kronecker Product Example\n\\[A = \\begin{bmatrix}\n1 \\quad 3 \\\\\n2 \\quad 4\n\\end{bmatrix}\\]\n\\[B = \\begin{bmatrix}\n0 \\quad 5 \\\\\n6 \\quad 7\n\\end{bmatrix}\\]\nThen\n\\[\\mathbf{A}\\bigotimes \\mathbf{B} = \\left[\\begin{array}{cccc}\n1\\times 0 & 1\\times 5 & 3\\times 0 & 3\\times 5\\\\\n1\\times 6 & 1\\times 7 & 3\\times 6 & 3\\times 7\\\\\n2\\times 0 & 2\\times 5 & 4\\times 0 & 4\\times 5\\\\\n2\\times 6 & 2\\times 7 & 4\\times 6 & 4\\times 7\n\\end{array}\\right] =\n\\left[\\begin{array}{cccc}\n0 & 5 & 0 & 15\\\\\n6 & 7 & 18 & 21\\\\\n0 & 10 & 0 & 20\\\\\n12 & 14 & 24 & 28\n\\end{array}\\right].\\]"
  },
  {
    "objectID": "Lab6HelpDoc/Lab6HelpDoc.html#calculate-kronecker-product-in-r",
    "href": "Lab6HelpDoc/Lab6HelpDoc.html#calculate-kronecker-product-in-r",
    "title": "",
    "section": "Calculate Kronecker Product in R",
    "text": "Calculate Kronecker Product in R\nLet \\(A\\) and \\(B\\) be \\(2 \\times 2\\) matrices as follows:\n\n(A &lt;- matrix(1:4, nrow = 2))\n#&gt;      [,1] [,2]\n#&gt; [1,]    1    3\n#&gt; [2,]    2    4\n(B &lt;- matrix(c(0, 6, 5, 7), nrow = 2))\n#&gt;      [,1] [,2]\n#&gt; [1,]    0    5\n#&gt; [2,]    6    7"
  },
  {
    "objectID": "Lab6HelpDoc/Lab6HelpDoc.html#method-i-the-kronecker-function",
    "href": "Lab6HelpDoc/Lab6HelpDoc.html#method-i-the-kronecker-function",
    "title": "",
    "section": "Method I: The kronecker() Function",
    "text": "Method I: The kronecker() Function\n\nA\n#&gt;      [,1] [,2]\n#&gt; [1,]    1    3\n#&gt; [2,]    2    4\nB\n#&gt;      [,1] [,2]\n#&gt; [1,]    0    5\n#&gt; [2,]    6    7\nkronecker(A, B)\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    0    5    0   15\n#&gt; [2,]    6    7   18   21\n#&gt; [3,]    0   10    0   20\n#&gt; [4,]   12   14   24   28"
  },
  {
    "objectID": "Lab6HelpDoc/Lab6HelpDoc.html#method-ii-for-loop",
    "href": "Lab6HelpDoc/Lab6HelpDoc.html#method-ii-for-loop",
    "title": "",
    "section": "Method II: For Loop",
    "text": "Method II: For Loop\n\\[\\mathbf{A}\\bigotimes \\mathbf{B} = \\left[\\begin{array}{cccc}\n1\\times 0 & 1\\times 5 & 3\\times 0 & 3\\times 5\\\\\n1\\times 6 & 1\\times 7 & 3\\times 6 & 3\\times 7\\\\\n2\\times 0 & 2\\times 5 & 4\\times 0 & 4\\times 5\\\\\n2\\times 6 & 2\\times 7 & 4\\times 6 & 4\\times 7\n\\end{array}\\right] =\n\\left[\\begin{array}{cccc}\n0 & 5 & 0 & 15\\\\\n6 & 7 & 18 & 21\\\\\n0 & 10 & 0 & 20\\\\\n12 & 14 & 24 & 28\n\\end{array}\\right].\\] Locations:\n\n\n\n\n\n\nforloop_kronecker &lt;- function(A, B){\n  Res = matrix(NA, nrow = 2*2, ncol = 2*2)\n  k = 0\n  l = 0\n  \n  for (j in 1:2){\n    k = 0\n    for (i in 1:2){\n      Res[(k+1):(k+2), (l+1):(l+2)] &lt;- A[i, j] * B\n      k = k + 2\n    }\n    l = l + 2\n  }\n  Res\n}\n\nforloop_kronecker(A, B)\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    0    5    0   15\n#&gt; [2,]    6    7   18   21\n#&gt; [3,]    0   10    0   20\n#&gt; [4,]   12   14   24   28"
  },
  {
    "objectID": "Lab6HelpDoc/Lab6HelpDoc.html#method-iii-vectorization-recommended",
    "href": "Lab6HelpDoc/Lab6HelpDoc.html#method-iii-vectorization-recommended",
    "title": "",
    "section": "Method III: Vectorization [Recommended]",
    "text": "Method III: Vectorization [Recommended]\n\nObjective\n\n\n\n\n\n\n\nDeal with A\n\n\n\n\nRecall\n\nrep(1:2, each = 2)\n#&gt; [1] 1 1 2 2\n\n\nA\n#&gt;      [,1] [,2]\n#&gt; [1,]    1    3\n#&gt; [2,]    2    4\n\nA[rep(1:2, each = 2), rep(1:2, each = 2)]\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1    1    3    3\n#&gt; [2,]    1    1    3    3\n#&gt; [3,]    2    2    4    4\n#&gt; [4,]    2    2    4    4\n\n\n\nDeal with B\n\n\n\n\nRecall\n\nrep(1:2, times = 2)\n#&gt; [1] 1 2 1 2\n\n\nB\n#&gt;      [,1] [,2]\n#&gt; [1,]    0    5\n#&gt; [2,]    6    7\nB[rep(1:2, times = 2), rep(1:2, times = 2)]\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    0    5    0    5\n#&gt; [2,]    6    7    6    7\n#&gt; [3,]    0    5    0    5\n#&gt; [4,]    6    7    6    7\n\n\n\nPut Everything Together\n\nrepeated_A &lt;- A[rep(1:2, each = 2), rep(1:2, each = 2)]\nrepeated_B &lt;- B[rep(1:2, times = 2), rep(1:2, times = 2)]\nrepeated_A * repeated_B\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    0    5    0   15\n#&gt; [2,]    6    7   18   21\n#&gt; [3,]    0   10    0   20\n#&gt; [4,]   12   14   24   28\n\n\n\nWrap the Calculation into a Function (for \\(2 \\times 2\\) matrices)\n\nvectorization_kronecker &lt;- function(A, B){\n  repeated_A &lt;- A[rep(1:2, each = 2), rep(1:2, each = 2)]\n  repeated_B &lt;- B[rep(1:2, times = 2), rep(1:2, times = 2)]\n  return(repeated_A * repeated_B)\n}\n\nvectorization_kronecker(A, B)\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    0    5    0   15\n#&gt; [2,]    6    7   18   21\n#&gt; [3,]    0   10    0   20\n#&gt; [4,]   12   14   24   28"
  },
  {
    "objectID": "Lab6HelpDoc/Lab6HelpDoc.html#compare-the-cpu-times-that-expressions-used",
    "href": "Lab6HelpDoc/Lab6HelpDoc.html#compare-the-cpu-times-that-expressions-used",
    "title": "",
    "section": "Compare the CPU Times that Expressions Used",
    "text": "Compare the CPU Times that Expressions Used\n\nmicrobenchmark::microbenchmark(\n  vectorization_kronecker(A,B),\n  kronecker(A, B),\n  forloop_kronecker(A, B),\n  times=10000L\n)\n#&gt; Unit: microseconds\n#&gt;                           expr  min   lq     mean median   uq    max neval\n#&gt;  vectorization_kronecker(A, B)  3.2  3.7  8.14071    4.2  9.2 2891.8 10000\n#&gt;                kronecker(A, B) 25.9 28.0 55.10712   30.6 76.6 2867.7 10000\n#&gt;        forloop_kronecker(A, B)  5.3  6.1 12.59061    6.9 16.3 1587.9 10000"
  },
  {
    "objectID": "Lab6HelpDoc/Lab6HelpDoc.html#what-if-a-and-b-are-not-2-times-2-matrices",
    "href": "Lab6HelpDoc/Lab6HelpDoc.html#what-if-a-and-b-are-not-2-times-2-matrices",
    "title": "",
    "section": "What if A and B are not \\(2 \\times 2\\) matrices?",
    "text": "What if A and B are not \\(2 \\times 2\\) matrices?\nWith the assistance of this instructional document, please proceed with Lab 6.\nIn Lab 6, you will update the forloop_kronecker() and vectorization_kronecker() functions to make them suitable for calculating matrices A and B with arbitrary dimensions. And find result similar to the following.\n\nA1 &lt;- matrix(1:16, nrow = 4, ncol = 4)\nB1 &lt;- matrix(1:20, nrow = 4, ncol = 5)\n\nA2 &lt;- matrix(1:40, nrow = 5, ncol = 8)\nB2 &lt;- matrix(1:50, nrow = 10, ncol = 5)\n\n\nCompare the CPU Times that Expressions Used for A1 and B1\n\n\n# A1 and B1\nmicrobenchmark::microbenchmark(\n  vectorization_kronecker(A1,B1),\n  kronecker(A1, B1),\n  forloop_kronecker(A1, B1),\n  times=10000L\n)\n#&gt; Unit: microseconds\n#&gt;                             expr  min   lq     mean median    uq     max neval\n#&gt;  vectorization_kronecker(A1, B1)  9.1 10.2 18.71851   11.2  23.3  3103.6 10000\n#&gt;                kronecker(A1, B1) 28.1 31.0 65.04437   35.1  85.9 10791.6 10000\n#&gt;        forloop_kronecker(A1, B1) 42.1 45.1 82.55294   48.7 107.2 24297.3 10000\n\n\nCompare the CPU Times that Expressions Used for A2 and B2\n\n\n# A2 and B2\n\nmicrobenchmark::microbenchmark(\n  vectorization_kronecker(A2,B2),\n  kronecker(A2, B2),\n  forloop_kronecker(A2, B2),\n  times=10000L\n)\n#&gt; Unit: microseconds\n#&gt;                             expr   min    lq      mean median     uq     max\n#&gt;  vectorization_kronecker(A2, B2)  19.0  21.2  41.89211   23.8  48.80  7022.5\n#&gt;                kronecker(A2, B2)  39.1  50.5 109.29978   62.9 147.45  7170.1\n#&gt;        forloop_kronecker(A2, B2) 104.2 111.5 203.68557  120.9 266.65 10804.9\n#&gt;  neval\n#&gt;  10000\n#&gt;  10000\n#&gt;  10000"
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html",
    "title": "",
    "section": "",
    "text": "library(tidyverse) # stringr package is part of the tidyverse collection."
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html#illustrate-s3-system-u-of-i-womens-basketball-team-example",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html#illustrate-s3-system-u-of-i-womens-basketball-team-example",
    "title": "",
    "section": "Illustrate S3 System – U of I Women’s Basketball Team example",
    "text": "Illustrate S3 System – U of I Women’s Basketball Team example\n\nEnsure you’ve read the following section before watching this video.\n\nhttps://adv-r.hadley.nz/s3.html#s3-classes\n\nThe main components of S3: classes, generics, and methods\nThree functions used in most classes: constructor, helper, validator.\nGenerics, methods, and dispatch"
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html#u-of-i-womens-basketball-team",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html#u-of-i-womens-basketball-team",
    "title": "",
    "section": "U of I Women’s Basketball Team",
    "text": "U of I Women’s Basketball Team\nhttps://fightingillini.com/sports/womens-basketball/roster\n\nObjective: Display the profile information according to roles\n\nFor player, print the profile information like\n\nAdalia Mckenzie is a player on the U of I Women’s Basketball Team. Her jersey number is 24. Adalia is a student in her Senior year. She is 5-10 tall (177.8 cm). Her position is Guard.\n\nFor staff, print the profile information like\n\nShauna Green is the Head Coach of the U of I Women’s Basketball Team.\nMaya Solomon is a staff member of the U of I Women’s Basketball Team.\n\nFor all other people, like the spectator, print the information like\n\nWeijia Jia is neither a player nor a staff member."
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html#create-player-class",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html#create-player-class",
    "title": "",
    "section": "Create Player Class",
    "text": "Create Player Class\n\nConstructor Function\n\nnew_player = function(x){\n  validate_player(x) # Validator, defined below\n  structure(\n    list(firstname = str_to_title(x$firstname), # str_to_title() is from stringr\n         lastname = str_to_title(x$lastname), # str_to_title() converts to title case\n         jersey = as.character(x$jersey),\n         height_inches = x$height,\n         position = str_to_title(x$position),\n         studentclass = str_to_title(x$class), \n         heightcm = convertHeightToCm(x$height) # Helper function, defined below\n         ),\n    class = \"player\"\n  )\n}\n\n\n\nHelper Function\nConvert the height from the “feet-inches” pattern to centimeters.\n\nconvertHeightToCm &lt;- function(height) {\n    # Split the input string by the dash\n    parts &lt;- str_split(height, \"-\")[[1]] # str_split() is from stringr package\n    \n    # Extract feet and inches as numeric values\n    feet &lt;- as.numeric(parts[1])\n    inches &lt;- as.numeric(parts[2])\n    \n    # Convert feet to inches and then total inches to centimeters\n    height_inches &lt;- (feet * 12) + inches\n    height_cm &lt;- height_inches * 2.54\n    \n    return(height_cm)\n}\n\n\n\nValidator Function\n\nIf any information is missing, print ‘… is missing’.\nIf the pattern of height doesn’t follow the “feet-inches” pattern, print a warning message.\nIf the position is not one of the three categories (Guard, Forward, Center), print a warning message.\nIf the class is not one of the five categories (Freshman, Sophomore, Junior, Senior, Fifth), print a warning message.\n\n\nvalidate_player &lt;- function(x){\n  if(is.na(x$firstname)) print(\"The player's first name is missing.\")\n  if(is.na(x$lastname)) print(\"The player's last name is missing.\")\n  if(is.na(x$jersey)) print(\"The player's jersey information is missing.\")\n  if(is.na(x$height)) print(\"The player's height information is missing.\")\n  if(is.na(x$position)) print(\"The player's position information is missing.\")\n  if(is.na(x$class)) print(\"The player's class information is missing.\")\n  \n  \n  if(!grepl(\"^\\\\d+-\\\\d+$\", x$height)) # grepl() is searching for matches\n    print(\"The player's height does not follow the 'feet-inches' pattern.\")\n  if(!str_to_title(x$position) %in% c(\"Guard\", \"Forward\", \"Center\")) \n    print(\"The player's position information is invalid.\")\n  if(!str_to_title(x$class) %in% c(\"Freshman\", \"Sophomore\", \"Junior\", \"Senior\", \"Fifth\")) \n    print(\"The player's class information is invalid.\")\n}"
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html#create-staff-class",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html#create-staff-class",
    "title": "",
    "section": "Create Staff Class",
    "text": "Create Staff Class\n\nConstructor Function\n\n\nnew_staff = function(x){\n  validate_staff(x)\n  structure(\n    list(name = x$name,\n         role = x$role,\n         role_with_article = article_selector(x$role) \n         ),\n    class = \"staff\"\n  )\n}\n\n\n\nHelper Function\nChoose appropriate article for the role information.\n\narticle_selector &lt;- function(role) {\n title &lt;- switch(\n   role,\n   \"head coach\" = \"the Head Coach\",\n   \"associate head coach\" = \"the Associate Head Coach\",\n   \"assistant coach\" = \"an Assistant Coach\",\n   \"a staff member\"\n  )\n return(title)\n}\n\n\n\nValidator Function\n\nif name or role is missing or not character type, print warning message.\n\n\nvalidate_staff &lt;- function(x){\n  if(is.na(x$name) || !is.character(x$name)) \n    print(\"The staff's name is not valid\")\n  if(is.na(x$role)|| !is.character(x$role)) \n    print(\"The staff's role information is not valid\")\n}"
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html#create-spectator-class",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html#create-spectator-class",
    "title": "",
    "section": "Create Spectator Class",
    "text": "Create Spectator Class\n\n\nnew_spectator = function(x){\n  structure(\n    list(name = x$name),\n    class = \"spectator\"\n  )\n}"
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html#generic-and-methods",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html#generic-and-methods",
    "title": "",
    "section": "Generic and Methods",
    "text": "Generic and Methods\n\nDefine the generic print_profile and the methods.\n\n\nprint_profile = function(x){\n  UseMethod(\"print_profile\")\n}\n\nprint_profile.player = function(x){\n  print(paste0(x$firstname, \" \", x$lastname, \" is a player on the U of I Women's Basketball Team. Her jersey number is \", x$jersey, \". \",  x$firstname, \" is a student in her \", x$studentclass, \" year. She is \", x$height_inches, \" tall (\", x$heightcm,\" cm). Her position is \", x$position, \".\" \n               )\n        )\n}\n\nprint_profile.staff = function(x){\n  print(paste0(x$name, \" is \", x$role_with_article, \n               \" of the U of I Women's Basketball Team.\" ))\n}\n\nprint_profile.default = function(x){\n  print(paste0(x$name, \" is neither a player nor a staff member.\"))\n}"
  },
  {
    "objectID": "Lab5HelpDoc/Lab5HelpDoc.html#test",
    "href": "Lab5HelpDoc/Lab5HelpDoc.html#test",
    "title": "",
    "section": "Test",
    "text": "Test\n\n# Player\n\nMckenzie &lt;- new_player(x = list(\n  firstname = \"Adalia\",\n  lastname = \"Mckenzie\",\n  jersey = \"24\",\n  height = \"5-10\",\n  position = \"guard\",\n  class = \"senior\"\n)\n)\n\n### Incorrect Usage\nBryant &lt;- new_player(x = list(\n  firstname = \"Genesis\",\n  lastname = \"Bryant\",\n  jersey = \"1\",\n  height = \"5'6''\", \n  position = \"guard\",\n  class = \"fifth\"))\n#&gt; [1] \"The player's height does not follow the 'feet-inches' pattern.\"\n#&gt; Warning in convertHeightToCm(x$height): NAs introduced by coercion\n# Corrected\nBryant &lt;- new_player(x = list(\n  firstname = \"Genesis\",\n  lastname = \"Bryant\",\n  jersey = \"1\",\n  height = \"5-6\", \n  position = \"guard\",\n  class = \"fifth\"))\n\n\n# Staff\n\nGreen &lt;- new_staff(x = list(\n  name = \"Shauna Green\", \n  role = \"head coach\"\n  )\n)\n\nSolomon &lt;- new_staff(x = list(\n  name = \"Maya Solomon\", \n  role = \"director of basketball operations\"\n  )\n)\n\n# Spectator\n\nJia &lt;- new_spectator(x = list(\n  name = \"Weijia Jia\"\n  ))\nprint_profile(Mckenzie)\n#&gt; [1] \"Adalia Mckenzie is a player on the U of I Women's Basketball Team. Her jersey number is 24. Adalia is a student in her Senior year. She is 5-10 tall (177.8 cm). Her position is Guard.\"\nprint_profile(Bryant)\n#&gt; [1] \"Genesis Bryant is a player on the U of I Women's Basketball Team. Her jersey number is 1. Genesis is a student in her Fifth year. She is 5-6 tall (167.64 cm). Her position is Guard.\"\nprint_profile(Green)\n#&gt; [1] \"Shauna Green is the Head Coach of the U of I Women's Basketball Team.\"\nprint_profile(Solomon)\n#&gt; [1] \"Maya Solomon is a staff member of the U of I Women's Basketball Team.\"\nprint_profile(Jia)\n#&gt; [1] \"Weijia Jia is neither a player nor a staff member.\""
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Preface",
    "section": "",
    "text": "These are the assignments for STAT 385: Statistics Programming Methods, offered in the Fall of 2024 at UIUC. If you have any comments/suggestions/concerns about the notes please contact me at wjia@illinois.edu."
  },
  {
    "objectID": "dplyr/dplyr.html",
    "href": "dplyr/dplyr.html",
    "title": "Data Manipulation with dplyr",
    "section": "",
    "text": "Core member in tidyverse\nA package that transforms data\ndplyr implements a grammar for transforming tabular data.\ndplyr cheat sheet https://nyu-cdsc.github.io/learningr/assets/data-transformation.pdf"
  },
  {
    "objectID": "dplyr/dplyr.html#dplyr",
    "href": "dplyr/dplyr.html#dplyr",
    "title": "Data Manipulation with dplyr",
    "section": "",
    "text": "Core member in tidyverse\nA package that transforms data\ndplyr implements a grammar for transforming tabular data.\ndplyr cheat sheet https://nyu-cdsc.github.io/learningr/assets/data-transformation.pdf"
  },
  {
    "objectID": "dplyr/dplyr.html#commonly-used-commands-in-dplyr",
    "href": "dplyr/dplyr.html#commonly-used-commands-in-dplyr",
    "title": "Data Manipulation with dplyr",
    "section": "Commonly used commands in dplyr",
    "text": "Commonly used commands in dplyr\n\nselect() – extract variables\n\nRecommended to always use dplyr::select()\n\nfilter() – extract cases\narrange() – reorder cases\nmutate() – create new variables\n\nn() – number of values/rows\nn_distinct() – number of unique\n\ngroup_by() – group cases\nsummarize() – summarize variables\n\nNote: summarise() and summarize() are synonyms.\nRecommended to always use dplyr::summarize()\n\ncount() – count number of rows in each group"
  },
  {
    "objectID": "dplyr/dplyr.html#select-extract-columns-variables-by-name",
    "href": "dplyr/dplyr.html#select-extract-columns-variables-by-name",
    "title": "Data Manipulation with dplyr",
    "section": "select() – Extract columns (variables) by name",
    "text": "select() – Extract columns (variables) by name\n\nSelect variables var1 and var3 from the data frame df\n\n\nselect(df, var1, var3)\n\n\nSelect range of variables var1, var2, var3 from the data frame df\n\n\nselect(df, var1:var3)\n\n\nSelect every column but variables var1 and var2 from the data frame df\n\n\nselect(df, -c(var1, var2))\n\n\nSelect every column\n\n\nselect(df, everything())\n\n\nselect(df, var7, everything()) – Place var7 first, followed by all other variables"
  },
  {
    "objectID": "dplyr/dplyr.html#example-1",
    "href": "dplyr/dplyr.html#example-1",
    "title": "Data Manipulation with dplyr",
    "section": "Example 1",
    "text": "Example 1\nLet’s use the mpg tibble in ggplot2. Please use help(mpg) for the variable definitions.\n\nlibrary(tidyverse)\nmpg\n#&gt; # A tibble: 234 × 11\n#&gt;    manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n#&gt;    &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n#&gt;  1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n#&gt;  2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n#&gt;  3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n#&gt;  4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n#&gt;  5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n#&gt;  6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n#&gt;  7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n#&gt;  8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n#&gt;  9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n#&gt; 10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n#&gt; # ℹ 224 more rows\n\n\nRecall: check missing values code chunk – from the previous lecture\n\nmpg %&gt;% \n  dplyr::select(everything()) %&gt;% # use everything() to select all variables\n  summarize_all(~sum(is.na(.))) # summarize_all() affects every variable\n#&gt; # A tibble: 1 × 11\n#&gt;   manufacturer model displ  year   cyl trans   drv   cty   hwy    fl class\n#&gt;          &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n#&gt; 1            0     0     0     0     0     0     0     0     0     0     0"
  },
  {
    "objectID": "dplyr/dplyr.html#example-2",
    "href": "dplyr/dplyr.html#example-2",
    "title": "Data Manipulation with dplyr",
    "section": "Example 2",
    "text": "Example 2\nList the distinct model names (using the variable model) in the mpg tibble.\n\nmpg %&gt;% \n  dplyr::select(model) %&gt;% \n  distinct()\n#&gt; # A tibble: 38 × 1\n#&gt;    model             \n#&gt;    &lt;chr&gt;             \n#&gt;  1 a4                \n#&gt;  2 a4 quattro        \n#&gt;  3 a6 quattro        \n#&gt;  4 c1500 suburban 2wd\n#&gt;  5 corvette          \n#&gt;  6 k1500 tahoe 4wd   \n#&gt;  7 malibu            \n#&gt;  8 caravan 2wd       \n#&gt;  9 dakota pickup 4wd \n#&gt; 10 durango 4wd       \n#&gt; # ℹ 28 more rows\n\n\nThere are 38 distinct model names!"
  },
  {
    "objectID": "dplyr/dplyr.html#example-3",
    "href": "dplyr/dplyr.html#example-3",
    "title": "Data Manipulation with dplyr",
    "section": "Example 3",
    "text": "Example 3\nThe model variable has too many categories to be useful. Please remove the column model and save the new tibble as mpg1.\n\nmpg1 &lt;- mpg %&gt;% \n  dplyr::select(-model)\nnames(mpg1)\n#&gt;  [1] \"manufacturer\" \"displ\"        \"year\"         \"cyl\"          \"trans\"       \n#&gt;  [6] \"drv\"          \"cty\"          \"hwy\"          \"fl\"           \"class\""
  },
  {
    "objectID": "dplyr/dplyr.html#filter-extract-rows-by-logical-criteria",
    "href": "dplyr/dplyr.html#filter-extract-rows-by-logical-criteria",
    "title": "Data Manipulation with dplyr",
    "section": "filter() – Extract rows by logical criteria",
    "text": "filter() – Extract rows by logical criteria\nExtract rows that meet logical criteria from the data frame df\n\nfilter(df, logical_criteria)\n\n\nLogical Tests and Boolean Operators"
  },
  {
    "objectID": "dplyr/dplyr.html#example-4",
    "href": "dplyr/dplyr.html#example-4",
    "title": "Data Manipulation with dplyr",
    "section": "Example 4",
    "text": "Example 4\nFrom the mpg1 tibble, create a sub-tibble named DODGE with the manufacture being dodge only.\n\nDODGE &lt;- mpg1 %&gt;% \n  filter(manufacturer == \"dodge\")\ndim(DODGE)\n#&gt; [1] 37 10"
  },
  {
    "objectID": "dplyr/dplyr.html#example-5",
    "href": "dplyr/dplyr.html#example-5",
    "title": "Data Manipulation with dplyr",
    "section": "Example 5",
    "text": "Example 5\nFrom the mpg1 tibble, create a sub-tibble named DODGE_SUV with the manufacture being dodge and vehicle class being suv.\n\nDODGE_SUV &lt;- mpg1 %&gt;% \n  filter(manufacturer == \"dodge\" & class == 'suv')\n\n# Or equivalently,\nDODGE_SUV &lt;- mpg1 %&gt;% \n  filter(manufacturer == \"dodge\", class == 'suv')\n\ndim(DODGE_SUV)\n#&gt; [1]  7 10"
  },
  {
    "objectID": "dplyr/dplyr.html#example-6",
    "href": "dplyr/dplyr.html#example-6",
    "title": "Data Manipulation with dplyr",
    "section": "Example 6",
    "text": "Example 6\nDraw a scatterplot of hwy vs displ (highway mileage vs engine displacement in liters) for the Japanese cars only (the Japanese manufacturers are honda, nissan, subaru, or toyota), colored by manufacturer.\n\nExample 6.1\nFrom the mpg1 tibble, create a sub-tibble named Japanese_car.\n\nJapanese_car &lt;- mpg1 %&gt;% filter(manufacturer %in% c(\"honda\", \"nissan\", \"subaru\", \"toyota\"))\ndim(Japanese_car)\n#&gt; [1] 70 10\n\n\n\nExample 6.2\nUse the Japanese_car tibble to draw the scatterplot of hwy vs displ. Recall that, geom_point() could be used.\n\nggplot(Japanese_car, aes(x = displ, y = hwy, col = manufacturer)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\nCombine the Example 6.1 and 6.2\n\nmpg1 %&gt;% \n  filter(manufacturer %in% c(\"honda\", \"nissan\", \"subaru\", \"toyota\")) %&gt;% \n  ggplot(aes(x=displ, y=hwy, col= manufacturer)) +\n  geom_point()"
  },
  {
    "objectID": "dplyr/dplyr.html#arrange-reorder-rows-by-the-value-of-one-or-more-columns-variables",
    "href": "dplyr/dplyr.html#arrange-reorder-rows-by-the-value-of-one-or-more-columns-variables",
    "title": "Data Manipulation with dplyr",
    "section": "arrange() – reorder rows by the value of one or more columns (variables)",
    "text": "arrange() – reorder rows by the value of one or more columns (variables)\n\narrange() is used to reorder rows of data.\nOrder will be based on values in a specified column.\nThe default order will be ascending order.\nTo achieve descending order desc() will be used within arrange()."
  },
  {
    "objectID": "dplyr/dplyr.html#example-7",
    "href": "dplyr/dplyr.html#example-7",
    "title": "Data Manipulation with dplyr",
    "section": "Example 7",
    "text": "Example 7\nIn the workshop data (i.e. DS Workshop Participants List.csv), select the variables Name, Department, Major only, sort depend on the Major variable.\n\nStep 1. Import the workshop data in csv into R, using read_csv() command in readr package.\n\ntbl_workshop = read_csv(\"DS Workshop Participants List.csv\")\ntbl_workshop\n#&gt; # A tibble: 16 × 11\n#&gt;    Name       Gender `Email Address` Department `Info Source` `Class Year` Major\n#&gt;    &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;      &lt;chr&gt;         &lt;chr&gt;        &lt;chr&gt;\n#&gt;  1 Dwayne Jo… M      Djohnson@illin… Statistics Email         Undergradua… Stat…\n#&gt;  2 Rihanna    F      Rihanna@illino… Economics  Class         Graduate     ECON \n#&gt;  3 Ellen DeG… F      Edegeneres@ill… Biology    Email         Undergradua… Biol…\n#&gt;  4 Will Smith M      Wsmith@illinoi… Electrica… Email         Undergradua… Elec…\n#&gt;  5 Angelina … F      Ajolie@illinoi… Computer … Class         Undergradua… Comp…\n#&gt;  6 Cristiano… M      Cronaldo@illin… Economics  Friends/Coll… Faculty and… &lt;NA&gt; \n#&gt;  7 Leonardo … M      Ldicaprio@illi… Economics  Email         Undergradua… Econ…\n#&gt;  8 Tom Cruise M      Tcruise@illino… Mathemati… Class         Undergradua… Math…\n#&gt;  9 Robert Do… M      RDowneyJr@illi… mechanica… Class         Undergradua… Mech…\n#&gt; 10 Celine Di… F      Cdion@illinois… Biology    Friends/Coll… Faculty and… &lt;NA&gt; \n#&gt; 11 Adele      F      Adele@illinois… Statistics Class         Undergradua… Stat…\n#&gt; 12 Serena Wi… F      Swilliams@illi… Computer … Email         Undergradua… Comp…\n#&gt; 13 Lionel Me… M      Lmessi@illinoi… Biology    Professor     Graduate     Biol…\n#&gt; 14 Taylor Sw… F      Tswift@illinoi… BIology    Flyer         Undergradua… Biol…\n#&gt; 15 J. K. Row… F      JKRowling@illi… Finance    Email         Undergradua… Fina…\n#&gt; 16 LeBron Ja… M      Ljames@illinoi… Electrica… Flyer         Undergradua… EE   \n#&gt; # ℹ 4 more variables: `Related Courses Taken` &lt;chr&gt;,\n#&gt; #   `Programming Language Known` &lt;chr&gt;,\n#&gt; #   `Willingness to be the Presenter` &lt;chr&gt;, `DS Years of Experience` &lt;dbl&gt;\n\n\n\nStep 2. Select the columns Name, Department, Major only.\n\n\nStep 3. Sort the tibble by Major.\n\ntbl_workshop %&gt;% \n  dplyr::select(Name, Department, Major) %&gt;% \n  arrange(Major) \n#&gt; # A tibble: 16 × 3\n#&gt;    Name              Department                          Major                 \n#&gt;    &lt;chr&gt;             &lt;chr&gt;                               &lt;chr&gt;                 \n#&gt;  1 Ellen DeGeneres   Biology                             Biology               \n#&gt;  2 Lionel Messi      Biology                             Biology               \n#&gt;  3 Taylor Swift      BIology                             Biology               \n#&gt;  4 Angelina Jolie    Computer Science                    Computer Science      \n#&gt;  5 Serena Williams   Computer Science                    Computer Science      \n#&gt;  6 Rihanna           Economics                           ECON                  \n#&gt;  7 LeBron James      Electrical and Computer Engineering EE                    \n#&gt;  8 Leonardo DiCaprio Economics                           Economics             \n#&gt;  9 Will Smith        Electrical and Computer Engineering Electrical Engineering\n#&gt; 10 J. K. Rowling     Finance                             Finance               \n#&gt; 11 Tom Cruise        Mathematics                         Mathematics           \n#&gt; 12 Robert Downey Jr. mechanical Science and Engineering  Mechanical Engineering\n#&gt; 13 Dwayne Johnson    Statistics                          Statistics            \n#&gt; 14 Adele             Statistics                          Statistics            \n#&gt; 15 Cristiano Ronaldo Economics                           &lt;NA&gt;                  \n#&gt; 16 Celine Dion       Biology                             &lt;NA&gt;\n\nNote that:\n\nThe tibble is sorted by Major in alphabetical order, in ascending order.\nMissing values (i.e. NA) are always sorted at the end."
  },
  {
    "objectID": "dplyr/dplyr.html#example-7-continue",
    "href": "dplyr/dplyr.html#example-7-continue",
    "title": "Data Manipulation with dplyr",
    "section": "Example 7 (continue)",
    "text": "Example 7 (continue)\nIn the workshop data (i.e. DS Workshop Participants List.csv), select the variables Name, Department, Major only, sort depend on the Major variable.\n\nIf sort the tibble by Major in descending order is preferred…\n\ntbl_workshop %&gt;% \n  dplyr::select(Name, Department, Major) %&gt;% \n  arrange(desc(Major)) ### Use desc() to re-order in descending order\n#&gt; # A tibble: 16 × 3\n#&gt;    Name              Department                          Major                 \n#&gt;    &lt;chr&gt;             &lt;chr&gt;                               &lt;chr&gt;                 \n#&gt;  1 Dwayne Johnson    Statistics                          Statistics            \n#&gt;  2 Adele             Statistics                          Statistics            \n#&gt;  3 Robert Downey Jr. mechanical Science and Engineering  Mechanical Engineering\n#&gt;  4 Tom Cruise        Mathematics                         Mathematics           \n#&gt;  5 J. K. Rowling     Finance                             Finance               \n#&gt;  6 Will Smith        Electrical and Computer Engineering Electrical Engineering\n#&gt;  7 Leonardo DiCaprio Economics                           Economics             \n#&gt;  8 LeBron James      Electrical and Computer Engineering EE                    \n#&gt;  9 Rihanna           Economics                           ECON                  \n#&gt; 10 Angelina Jolie    Computer Science                    Computer Science      \n#&gt; 11 Serena Williams   Computer Science                    Computer Science      \n#&gt; 12 Ellen DeGeneres   Biology                             Biology               \n#&gt; 13 Lionel Messi      Biology                             Biology               \n#&gt; 14 Taylor Swift      BIology                             Biology               \n#&gt; 15 Cristiano Ronaldo Economics                           &lt;NA&gt;                  \n#&gt; 16 Celine Dion       Biology                             &lt;NA&gt;"
  },
  {
    "objectID": "dplyr/dplyr.html#example-8",
    "href": "dplyr/dplyr.html#example-8",
    "title": "Data Manipulation with dplyr",
    "section": "Example 8",
    "text": "Example 8\nFrom the mpg1 tibble, draw a bar graph of the vehicle classes (variable class) to go in descending order.\n\nExample 8.1\nDraw a bar graph of vehicle classes.\n\nggplot(mpg1, aes(class)) +\n  geom_bar()"
  },
  {
    "objectID": "dplyr/dplyr.html#example-8-1",
    "href": "dplyr/dplyr.html#example-8-1",
    "title": "Data Manipulation with dplyr",
    "section": "Example 8",
    "text": "Example 8\nFrom the mpg1 tibble, draw a bar graph of the vehicle classes (variable class) to go in descending order.\n\nExample 8.2\nUse arrange() to sort the bar graph in descending order.\n\nStep 1. Find the counts for each class type\n\nmpg1 %&gt;% count(class)\n#&gt; # A tibble: 7 × 2\n#&gt;   class          n\n#&gt;   &lt;chr&gt;      &lt;int&gt;\n#&gt; 1 2seater        5\n#&gt; 2 compact       47\n#&gt; 3 midsize       41\n#&gt; 4 minivan       11\n#&gt; 5 pickup        33\n#&gt; 6 subcompact    35\n#&gt; 7 suv           62\n\n\n\nStep 2. Use arrange() to sort the counts\n\nmpg1 %&gt;% count(class) %&gt;% \n  arrange(desc(n)) ## desc() means in descending order\n#&gt; # A tibble: 7 × 2\n#&gt;   class          n\n#&gt;   &lt;chr&gt;      &lt;int&gt;\n#&gt; 1 suv           62\n#&gt; 2 compact       47\n#&gt; 3 midsize       41\n#&gt; 4 subcompact    35\n#&gt; 5 pickup        33\n#&gt; 6 minivan       11\n#&gt; 7 2seater        5\n\n\n\nStep 3. Chain the code to ggplot with geom_col()\n\nmpg1 %&gt;% count(class) %&gt;% \n  arrange(desc(n)) %&gt;%\n  ggplot(aes(class, n))+\n  geom_col() \n\n\n\n\n\n\n\n\nQ: arrange() has been used. Why still not sorted?"
  },
  {
    "objectID": "dplyr/dplyr.html#example-8-2",
    "href": "dplyr/dplyr.html#example-8-2",
    "title": "Data Manipulation with dplyr",
    "section": "Example 8",
    "text": "Example 8\nDraw a bar graph of the vehicle classes (variable class) to go in descending order.\n\nExample 8.2 (continue)\nQ: arrange() has been used. Why the bar graph created is still not sorted?\nA: You need to save the order.\n\nCode from the previous slide\n\nmpg1 %&gt;% count(class) %&gt;%\n  arrange(desc(n)) %&gt;%\n  ggplot(aes(class, n))+\n  geom_col() \n\n\n\nOutput after using arrange()\n\nmpg1 %&gt;% count(class) %&gt;%\n  arrange(desc(n))\n#&gt; # A tibble: 7 × 2\n#&gt;   class          n\n#&gt;   &lt;chr&gt;      &lt;int&gt;\n#&gt; 1 suv           62\n#&gt; 2 compact       47\n#&gt; 3 midsize       41\n#&gt; 4 subcompact    35\n#&gt; 5 pickup        33\n#&gt; 6 minivan       11\n#&gt; 7 2seater        5\n\n\n\nThen use fct_inorder() to keep this descending order.\n\nfct_inorder() – Reorder factor levels by the order in which they first appear.\n\n\nmpg1 %&gt;% count(class) %&gt;%\n  arrange(desc(n)) %&gt;%\n  mutate(class = fct_inorder(class))%&gt;% ### save the order\n  ggplot(aes(class, n))+\n  geom_col()"
  },
  {
    "objectID": "dplyr/dplyr.html#example-9.-sort-the-data-by-multiple-variables",
    "href": "dplyr/dplyr.html#example-9.-sort-the-data-by-multiple-variables",
    "title": "Data Manipulation with dplyr",
    "section": "Example 9. Sort the data by multiple variables",
    "text": "Example 9. Sort the data by multiple variables\nFrom the mpg1 tibble, create a tibble that satisfies:\n\nthe manufacture is toyota,\nselect variables class, year, displ only,\nsort the tibble depend on class, year, and displ, where class and year are in ascending order, displ is in descending order.\n\n\nmpg1 %&gt;% filter(manufacturer == \"toyota\") %&gt;% \n  dplyr::select(class, year, displ) %&gt;% \n  arrange(class, year, desc(displ)) %&gt;% \n  print(n=15) ### Print 15 rows\n#&gt; # A tibble: 34 × 3\n#&gt;    class    year displ\n#&gt;    &lt;chr&gt;   &lt;int&gt; &lt;dbl&gt;\n#&gt;  1 compact  1999   3  \n#&gt;  2 compact  1999   3  \n#&gt;  3 compact  1999   2.2\n#&gt;  4 compact  1999   2.2\n#&gt;  5 compact  1999   1.8\n#&gt;  6 compact  1999   1.8\n#&gt;  7 compact  1999   1.8\n#&gt;  8 compact  2008   3.3\n#&gt;  9 compact  2008   2.4\n#&gt; 10 compact  2008   2.4\n#&gt; 11 compact  2008   1.8\n#&gt; 12 compact  2008   1.8\n#&gt; 13 midsize  1999   3  \n#&gt; 14 midsize  1999   3  \n#&gt; 15 midsize  1999   2.2\n#&gt; # ℹ 19 more rows\n\n\nFrom the output above, it seems like the displ values increase as the year grow for the compact vehicle type. Is it true for the other vehicle types?\nWe could create a scatterplot to visualize the change.\n\nmpg %&gt;% filter(manufacturer == \"toyota\") %&gt;% \n  dplyr::select(class, year, displ) %&gt;% \n  ggplot(aes(x = year, y = displ))+\n  geom_jitter(size = 3, height = 0, width = 0.3, alpha = 0.5)+\n  geom_smooth(se = FALSE) +\n  facet_wrap(~class)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n–&gt;"
  },
  {
    "objectID": "dplyr/dplyr.html#mutate",
    "href": "dplyr/dplyr.html#mutate",
    "title": "Data Manipulation with dplyr",
    "section": "mutate()",
    "text": "mutate()\n\nUse mutate() to add new variables and preserves existing ones."
  },
  {
    "objectID": "dplyr/dplyr.html#example-10",
    "href": "dplyr/dplyr.html#example-10",
    "title": "Data Manipulation with dplyr",
    "section": "Example 10",
    "text": "Example 10\nPlease create a new column combined_mpg in mpg using the formula of\n\ncombined_mpg = 0.55 * cty + 0.45 * hwy\n\n\nmpg %&gt;% mutate(combined_mpg = 0.55*cty + 0.45*hwy) %&gt;% \n  print(width = Inf) ## use print(width = Inf) to display all the columns\n#&gt; # A tibble: 234 × 12\n#&gt;    manufacturer model      displ  year   cyl trans      drv     cty   hwy fl   \n#&gt;    &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;      &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;\n#&gt;  1 audi         a4           1.8  1999     4 auto(l5)   f        18    29 p    \n#&gt;  2 audi         a4           1.8  1999     4 manual(m5) f        21    29 p    \n#&gt;  3 audi         a4           2    2008     4 manual(m6) f        20    31 p    \n#&gt;  4 audi         a4           2    2008     4 auto(av)   f        21    30 p    \n#&gt;  5 audi         a4           2.8  1999     6 auto(l5)   f        16    26 p    \n#&gt;  6 audi         a4           2.8  1999     6 manual(m5) f        18    26 p    \n#&gt;  7 audi         a4           3.1  2008     6 auto(av)   f        18    27 p    \n#&gt;  8 audi         a4 quattro   1.8  1999     4 manual(m5) 4        18    26 p    \n#&gt;  9 audi         a4 quattro   1.8  1999     4 auto(l5)   4        16    25 p    \n#&gt; 10 audi         a4 quattro   2    2008     4 manual(m6) 4        20    28 p    \n#&gt;    class   combined_mpg\n#&gt;    &lt;chr&gt;          &lt;dbl&gt;\n#&gt;  1 compact         23.0\n#&gt;  2 compact         24.6\n#&gt;  3 compact         25.0\n#&gt;  4 compact         25.0\n#&gt;  5 compact         20.5\n#&gt;  6 compact         21.6\n#&gt;  7 compact         22.0\n#&gt;  8 compact         21.6\n#&gt;  9 compact         20.0\n#&gt; 10 compact         23.6\n#&gt; # ℹ 224 more rows"
  },
  {
    "objectID": "dplyr/dplyr.html#example-11",
    "href": "dplyr/dplyr.html#example-11",
    "title": "Data Manipulation with dplyr",
    "section": "Example 11",
    "text": "Example 11\nPlease compare the frequency and engine displacement average (variable displ) between the two transmissions (auto vs manual).\n\nExample 11.1\nLet’s first find the distinct transmission types (with sub types).\n\nUse distinct() to display the distinct transmission types (with sub types) – variable trans.\nUse n_distinct to find how many transmission types (with sub types)."
  },
  {
    "objectID": "dplyr/dplyr.html#example-11-1",
    "href": "dplyr/dplyr.html#example-11-1",
    "title": "Data Manipulation with dplyr",
    "section": "Example 11",
    "text": "Example 11\nPlease compare the frequency and engine displacement average (variable displ) between the two transmissions (auto vs manual).\n\nExample 11.1\nLet’s first find the distinct transmission types with sub types.\n\nUse distinct() to display the distinct transmission types (with sub types) – variable trans.\nUse n_distinct to find how many transmission types (with sub types).\n\n\nmpg %&gt;% \n  select(trans) %&gt;%\n  distinct()\n#&gt; # A tibble: 10 × 1\n#&gt;    trans     \n#&gt;    &lt;chr&gt;     \n#&gt;  1 auto(l5)  \n#&gt;  2 manual(m5)\n#&gt;  3 manual(m6)\n#&gt;  4 auto(av)  \n#&gt;  5 auto(s6)  \n#&gt;  6 auto(l4)  \n#&gt;  7 auto(l3)  \n#&gt;  8 auto(l6)  \n#&gt;  9 auto(s5)  \n#&gt; 10 auto(s4)\n\n### Find just the count of distinct categories\nmpg %&gt;% \n  select(trans) %&gt;%\n  n_distinct()\n#&gt; [1] 10\n\n\nThere are 10 distinct transmission types with sub types.\nBut we only need to compare auto and manual transmission types."
  },
  {
    "objectID": "dplyr/dplyr.html#example-11-2",
    "href": "dplyr/dplyr.html#example-11-2",
    "title": "Data Manipulation with dplyr",
    "section": "Example 11",
    "text": "Example 11\nPlease compare the frequency and engine displacement average (variable displ) between the two transmissions (auto vs manual).\n\nExample 11.2\nUse mutate() function to create a new variable trans with transmission type only, without sub types."
  },
  {
    "objectID": "dplyr/dplyr.html#example-11-3",
    "href": "dplyr/dplyr.html#example-11-3",
    "title": "Data Manipulation with dplyr",
    "section": "Example 11",
    "text": "Example 11\nPlease compare the frequency and engine displacement average (variable displ) between the two transmissions (auto vs manual).\n\nExample 11.2\nUse mutate() function to create a new variable trans_type with transmission type only, without sub types.\n\nmpg_transtype &lt;- mpg %&gt;%\n  rowwise() %&gt;% ## rowwise() groups the data by row. \n  mutate(trans_type = str_split(trans, \"\\\\(\")[[1]][1]) %&gt;%\n  ungroup() ## Use ungroup() to drop the rowwise behavior. \n\n\nmpg_transtype %&gt;% distinct(trans_type)\n#&gt; # A tibble: 2 × 1\n#&gt;   trans_type\n#&gt;   &lt;chr&gt;     \n#&gt; 1 auto      \n#&gt; 2 manual\n\n\n\nDo you have questions about the code above?\nPlease find the illustration in the next two slides of\n\nstr_split(trans, \"\\\\(\")[[1]][1]\nrowwise()"
  },
  {
    "objectID": "dplyr/dplyr.html#example-11.2-code-illustration-of-str_split",
    "href": "dplyr/dplyr.html#example-11.2-code-illustration-of-str_split",
    "title": "Data Manipulation with dplyr",
    "section": "Example 11.2 code – illustration of str_split()",
    "text": "Example 11.2 code – illustration of str_split()\n\nstr_split() is from stringr package. The function can be used to split a string into multiple pieces.\n\n\nstr_split(string, pattern)\n\nwhere\n* string is a character vector,\n* pattern is the pattern to split on.\n\nIn this example,\n\nyou type \\\\( to match (, which is the separator.\n\n\n\n\n\nPlease refer to the stringr cheat sheet for more information.\n\n\n\nstr_split(\"auto(l5)\", \"\\\\(\")\n#&gt; [[1]]\n#&gt; [1] \"auto\" \"l5)\"\n\n\nWe only need “auto” in this example. Therefore,\n\nUse [[1]] to get the first element in this list – result in a vector,\nThen use [1] get the first value of the vector.\n\n\n\nstr_split(\"auto(l5)\", \"\\\\(\")[[1]]\n#&gt; [1] \"auto\" \"l5)\"\n\n\n\nstr_split(\"auto(l5)\", \"\\\\(\")[[1]][1]\n#&gt; [1] \"auto\""
  },
  {
    "objectID": "dplyr/dplyr.html#example-11.2-code-illustration-of-rowwise",
    "href": "dplyr/dplyr.html#example-11.2-code-illustration-of-rowwise",
    "title": "Data Manipulation with dplyr",
    "section": "Example 11.2 code – illustration of rowwise()",
    "text": "Example 11.2 code – illustration of rowwise()\nIf rowwise() is not used,\n\nmpg %&gt;% \n  mutate(trans_type = str_split(trans, \"\\\\(\")[[1]][1]) %&gt;% \n  dplyr::select(trans_type, trans)\n#&gt; # A tibble: 234 × 2\n#&gt;    trans_type trans     \n#&gt;    &lt;chr&gt;      &lt;chr&gt;     \n#&gt;  1 auto       auto(l5)  \n#&gt;  2 auto       manual(m5)\n#&gt;  3 auto       manual(m6)\n#&gt;  4 auto       auto(av)  \n#&gt;  5 auto       auto(l5)  \n#&gt;  6 auto       manual(m5)\n#&gt;  7 auto       auto(av)  \n#&gt;  8 auto       manual(m5)\n#&gt;  9 auto       auto(l5)  \n#&gt; 10 auto       manual(m6)\n#&gt; # ℹ 224 more rows\n\nAll are `auto’s in the trans column!\n\nTherefore, we need to perform the calculation by row to get the values for variable trans.\nAfter the mutate() function, use ungroup() to drop the rowwise behavior."
  },
  {
    "objectID": "dplyr/dplyr.html#summarize-information-by-groups",
    "href": "dplyr/dplyr.html#summarize-information-by-groups",
    "title": "Data Manipulation with dplyr",
    "section": "Summarize information by groups",
    "text": "Summarize information by groups\n\nFind summary statistics by group\n\n\n\n\n\n\n\n\nUseful function\n\nCenter: mean(), median()\nSpread: sd(), IQR(), mad()\nRange: min(), max(), quantile()\nPosition: first(), last(), nth()\nCount: n(), n_distinct()\nLogical: any(), all()"
  },
  {
    "objectID": "dplyr/dplyr.html#example-11-4",
    "href": "dplyr/dplyr.html#example-11-4",
    "title": "Data Manipulation with dplyr",
    "section": "Example 11",
    "text": "Example 11\nPlease compare the frequency and engine displacement average (variable displ) between the two transmissions (auto vs manual).\n\nExample 11.3\nUse group_by(), summarize() and n() to find the frequency of the two transmission types.\n\nFrequency table\n\nmpg_transtype %&gt;% \n  group_by(trans_type) %&gt;%\n  dplyr::summarize(freq = n())\n#&gt; # A tibble: 2 × 2\n#&gt;   trans_type  freq\n#&gt;   &lt;chr&gt;      &lt;int&gt;\n#&gt; 1 auto         157\n#&gt; 2 manual        77\n\n### Or equivalently,\nmpg_transtype %&gt;% count(trans_type)\n#&gt; # A tibble: 2 × 2\n#&gt;   trans_type     n\n#&gt;   &lt;chr&gt;      &lt;int&gt;\n#&gt; 1 auto         157\n#&gt; 2 manual        77\n\n\n\nBar graph\nWe could show the counts visually using ggplot.\n\nmpg_transtype %&gt;% \n  group_by(trans_type) %&gt;%\n  dplyr::summarize(freq = n()) %&gt;%\n  ggplot(aes(trans_type, freq)) +\n  geom_col()"
  },
  {
    "objectID": "dplyr/dplyr.html#example-11-5",
    "href": "dplyr/dplyr.html#example-11-5",
    "title": "Data Manipulation with dplyr",
    "section": "Example 11",
    "text": "Example 11\nPlease compare the frequency and engine displacement average (variable displ) between the two transmissions (auto vs manual).\n\nExample 11.4\nUse mean() to compare the engine displacement average between the two transmissions (auto, manual).\n\nmpg_transtype %&gt;% \n  group_by(trans_type) %&gt;%\n  dplyr::summarize(displ_avg = mean(displ))\n#&gt; # A tibble: 2 × 2\n#&gt;   trans_type displ_avg\n#&gt;   &lt;chr&gt;          &lt;dbl&gt;\n#&gt; 1 auto            3.72\n#&gt; 2 manual          2.97\n\n### or Visually using ggplot\nmpg_transtype %&gt;% \n  group_by(trans_type) %&gt;%\n  dplyr::summarize(displ_avg = mean(displ)) %&gt;%\n  ggplot(aes(trans_type, displ_avg))+\n  geom_col()"
  },
  {
    "objectID": "dplyr/dplyr.html#example-11.5",
    "href": "dplyr/dplyr.html#example-11.5",
    "title": "Data Manipulation with dplyr",
    "section": "Example 11.5",
    "text": "Example 11.5\nIf you need to\n\ngroup by multiple variables, or\ncalculate several grouped summary statistics\n\nPlease read Example 11.5 on the next slide."
  },
  {
    "objectID": "dplyr/dplyr.html#example-11.5-1",
    "href": "dplyr/dplyr.html#example-11.5-1",
    "title": "Data Manipulation with dplyr",
    "section": "Example 11.5",
    "text": "Example 11.5\nGet a list of grouped summary statistics (min, Q1, median, Q3, max, mean, std. dev., missing) by transmission type (without sub group) and class type.\n\n\ndispl_summary &lt;- mpg_transtype %&gt;%\n  group_by(trans_type, class)%&gt;%\n  dplyr::summarize(\n    min = min(displ, na.rm = TRUE),\n    q1 = quantile(displ, 0.25, na.rm = TRUE),\n    median = quantile(displ, 0.5, na.rm = TRUE),\n    q3 = quantile(displ, 0.75, na.rm = TRUE),\n    max = max(displ, na.rm = TRUE),\n    mean = mean(displ, na.rm = TRUE),\n    sd = sd(displ, na.rm = TRUE),\n    missing = sum(is.na(displ))\n  )\n\ndispl_summary\n#&gt; # A tibble: 13 × 10\n#&gt; # Groups:   trans_type [2]\n#&gt;    trans_type class        min    q1 median    q3   max  mean    sd missing\n#&gt;    &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;int&gt;\n#&gt;  1 auto       2seater      5.7  5.82   5.95  6.08   6.2  5.95 0.354       0\n#&gt;  2 auto       compact      1.8  2      2.3   2.8    3.3  2.35 0.485       0\n#&gt;  3 auto       midsize      1.8  2.4    3.1   3.5    5.3  3.08 0.750       0\n#&gt;  4 auto       minivan      2.4  3.3    3.3   3.8    4    3.39 0.453       0\n#&gt;  5 auto       pickup       2.7  4.15   4.7   5.2    5.9  4.61 0.789       0\n#&gt;  6 auto       subcompact   1.6  1.87   2.1   2.98   4.6  2.6  1.05        0\n#&gt;  7 auto       suv          2.5  4      4.7   5.4    6.5  4.64 0.964       0\n#&gt;  8 manual     2seater      5.7  5.95   6.2   6.6    7    6.3  0.656       0\n#&gt;  9 manual     compact      1.8  2      2.2   2.65   3.1  2.3  0.425       0\n#&gt; 10 manual     midsize      1.8  2.35   2.45  2.85   3.5  2.54 0.470       0\n#&gt; 11 manual     pickup       2.7  3.7    4.2   4.7    5.2  4.13 0.835       0\n#&gt; 12 manual     subcompact   1.6  1.95   2.2   3.25   5.4  2.71 1.17        0\n#&gt; 13 manual     suv          2.5  2.5    2.7   3.35   4    2.99 0.590       0"
  },
  {
    "objectID": "3-MoreVectors/3-MoreVectors.html",
    "href": "3-MoreVectors/3-MoreVectors.html",
    "title": "3. Slides - More About Vectors",
    "section": "",
    "text": "Please make sue you’ve read the following sections in the textbook: R Coding Basics, https://www.gastonsanchez.com/R-coding-basics/\n\nSection 3. Creating Vectors\nSection 4. More About Vectors"
  },
  {
    "objectID": "3-MoreVectors/3-MoreVectors.html#reading-assignments",
    "href": "3-MoreVectors/3-MoreVectors.html#reading-assignments",
    "title": "3. Slides - More About Vectors",
    "section": "",
    "text": "Please make sue you’ve read the following sections in the textbook: R Coding Basics, https://www.gastonsanchez.com/R-coding-basics/\n\nSection 3. Creating Vectors\nSection 4. More About Vectors"
  },
  {
    "objectID": "3-MoreVectors/3-MoreVectors.html#the-colon-operator-seq-rep",
    "href": "3-MoreVectors/3-MoreVectors.html#the-colon-operator-seq-rep",
    "title": "3. Slides - More About Vectors",
    "section": "The colon operator “:”, seq(), rep()",
    "text": "The colon operator “:”, seq(), rep()\n\nColon operator “:”\n\nGenerate integer vector, if starting and ending values are whole numbers\n\n\nints = 1:5 # integer vector\nints\n#&gt; [1] 1 2 3 4 5\ntypeof(ints)\n#&gt; [1] \"integer\"\n\n\n\n\n\n\n\nGenerate double vector, if starting value is not whole number\n\n\ndbls = 5.2:1.2 # descending order; double vector\ndbls\n#&gt; [1] 5.2 4.2 3.2 2.2 1.2\ntypeof(dbls)\n#&gt; [1] \"double\"\n\n\none-unit step\n\n\n1.1:5\n#&gt; [1] 1.1 2.1 3.1 4.1\n\n\n\nseq() function\n\nBelow are equivalent\n\nseq(from = 1, to = 5)\nseq(from = 1, to = 5, by = 1)\nseq(1, 5)\nseq(1, 5, 1)\n1:5\n\nOdd numbers between 1 to 10\n\n\nseq(from = 1, to = 10, by = 2) \n#&gt; [1] 1 3 5 7 9\n\n\nThe first 10 odd numbers\n\n\nseq(from = 1, by = 2, length.out = 10) # Total length of the vector is 10\n#&gt;  [1]  1  3  5  7  9 11 13 15 17 19\n\n\n\nrep() function\n\ntimes vs each\n\n\nrep(c(1,2), times = 3) # Repeat the entire vector 3 times\n#&gt; [1] 1 2 1 2 1 2\n\nrep(c(1,2), each = 2) # Each element repeated twice\n#&gt; [1] 1 1 2 2\n\n\nlength.out – set the total length\n\n\nrep(c(1,2), length.out = 5) # Repeat the vector until reaching the total length\n#&gt; [1] 1 2 1 2 1\n\n\nIf times & each are both specified\n\n\nrep(c(3,2,1), times = 3, each = 2) # \"each\" is performed first.\n#&gt;  [1] 3 3 2 2 1 1 3 3 2 2 1 1 3 3 2 2 1 1"
  },
  {
    "objectID": "3-MoreVectors/3-MoreVectors.html#vector-coercion",
    "href": "3-MoreVectors/3-MoreVectors.html#vector-coercion",
    "title": "3. Slides - More About Vectors",
    "section": "Vector Coercion",
    "text": "Vector Coercion\nHierarchy Rule: \ncharacter &gt; double &gt; integer &gt; logical\n\ncharacters have priority over other data types: as long as one element is a character, all other elements are coerced into characters\n\n\nmixed &lt;- c(TRUE, 1L, 2.0, \"three\")\nmixed\n#&gt; [1] \"TRUE\"  \"1\"     \"2\"     \"three\"\n\n\nRecall v1 – v4 from Lecture 2\n\n# v1 is a logical vector\nv1 &lt;- c(FALSE, TRUE)\ntypeof(v1)\n#&gt; [1] \"logical\"\n# v2 is an integer vector\nv2 &lt;- c(0L, 1L)\ntypeof(v2)\n#&gt; [1] \"integer\"\n# v3 is a double vector\nv3 &lt;- c(0, 1)\ntypeof(v3)\n#&gt; [1] \"double\"\n# v4 is a character vector\nv4 &lt;- c('0', '1') # Equivalently, v4 &lt;- c(\"0\", \"1\")\ntypeof(v4)\n#&gt; [1] \"character\"\n\n\n\nCoercion Examples\n\nv5 &lt;- c(v1, v2)\ntypeof(v5)\n#&gt; [1] \"integer\"\n\nv6 &lt;- c(v5, v3)\ntypeof(v6)\n#&gt; [1] \"double\"\n\nv7 &lt;- c(v6, v4)\ntypeof(v7)\n#&gt; [1] \"character\""
  },
  {
    "objectID": "3-MoreVectors/3-MoreVectors.html#vectorization",
    "href": "3-MoreVectors/3-MoreVectors.html#vectorization",
    "title": "3. Slides - More About Vectors",
    "section": "Vectorization",
    "text": "Vectorization\n\nVectorization is essential in R. Many operations in R are vectorized.\nVectorized operations are essentially operations that are performed in an element by element fashion.\n\n\nx = c(1, 2, 3, 4, 5)\ny = c(5, 4, 3, 2, 1)\nx + y\n#&gt; [1] 6 6 6 6 6\n\n\nc(1 + 5, 2 + 4, 3 + 3, 4 + 2, 5 + 1)\n\n\nVectorization vs for loop\nIn other languages (e.g. C, python), vectorization is not typically a native feature.\n\n\nExample 4.2\n\ndeposit &lt;- 1000\nrate &lt;- 0.02\nyears &lt;- 1:10  # vector of years\namounts &lt;- deposit * (1 + rate)^years\n\nInput: years Output: amounts Function: deposit * (1 + rate)^years \\(\\leftarrow\\) the code is vectorized\n\nyears\n#&gt;  [1]  1  2  3  4  5  6  7  8  9 10\namounts \n#&gt;  [1] 1020.000 1040.400 1061.208 1082.432 1104.081 1126.162 1148.686 1171.659\n#&gt;  [9] 1195.093 1218.994\n\n\n\nOther examples of vectorized operator\n\nsqrt(amounts)\n#&gt;  [1] 31.93744 32.25523 32.57619 32.90034 33.22771 33.55834 33.89227 34.22951\n#&gt;  [9] 34.57011 34.91410\nlog(amounts)\n#&gt;  [1] 6.927558 6.947361 6.967163 6.986966 7.006768 7.026571 7.046374 7.066176\n#&gt;  [9] 7.085979 7.105782\n\n\n\nExamples of not-vectorized operator\n\nmax(amounts)\n#&gt; [1] 1218.994\nmean(amounts)\n#&gt; [1] 1116.872\nlength(amounts)\n#&gt; [1] 10"
  },
  {
    "objectID": "3-MoreVectors/3-MoreVectors.html#recycling",
    "href": "3-MoreVectors/3-MoreVectors.html#recycling",
    "title": "3. Slides - More About Vectors",
    "section": "Recycling",
    "text": "Recycling\nTakes the short vector, recycles its content to matches the longer vector.\n\nc(1, 1, 2, 2, 3, 3) + c(0.5, 0.1)\n#&gt; [1] 1.5 1.1 2.5 2.1 3.5 3.1\n\nc(1, 2, 3) + c(0.5, 0.1) # Warning Message!\n#&gt; [1] 1.5 2.1 3.5"
  },
  {
    "objectID": "3-MoreVectors/3-MoreVectors.html#subsetting",
    "href": "3-MoreVectors/3-MoreVectors.html#subsetting",
    "title": "3. Slides - More About Vectors",
    "section": "Subsetting",
    "text": "Subsetting\n\nCreating the vector\n\n# Example from Exercise 2.7\nrates &lt;- c(0.02, 0.03, 0.04)\nnames(rates) &lt;- c(\"savings\", \"market\", \"certif\")\n\n# Equivalently\nrates &lt;- c(\n  \"savings\" = 0.02,\n  \"market\" = 0.03,\n  \"certif\" = 0.04\n)\n\n\n\nSubsetting\nBracket Notation: []\nUse (square) brackets [ ] to get access to the elements of a vector.\n\nrates[2] # The second element\n#&gt; market \n#&gt;   0.03\nrates[2:3] # The second to third elements\n#&gt; market certif \n#&gt;   0.03   0.04\nrates[-3] # All elements except the 3rd element\n#&gt; savings  market \n#&gt;    0.02    0.03\nrates[c(1,2)] # The 1st and 2nd elements\n#&gt; savings  market \n#&gt;    0.02    0.03\nrates[\"certif\"] # The element with name \"certif\"\n#&gt; certif \n#&gt;   0.04\nrates[c(\"savings\", \"certif\")]\n#&gt; savings  certif \n#&gt;    0.02    0.04\nrates[rates &gt; 0.02] # All elements greater than 0.02\n#&gt; market certif \n#&gt;   0.03   0.04\nrates[rates &lt;= 0.03] # All elements less than or equal to 0.03\n#&gt; savings  market \n#&gt;    0.02    0.03\nrates[rates != 0.04] # All elements not equal to 0.04\n#&gt; savings  market \n#&gt;    0.02    0.03"
  },
  {
    "objectID": "1-Intro/1-Intro.html",
    "href": "1-Intro/1-Intro.html",
    "title": "R, RStudio, and R Packages",
    "section": "",
    "text": "Visit the website, download and install R and RStudio (selecting the appropriate version for your OS)\n\nhttps://posit.co/download/rstudio-desktop/\n\nAlternatively, you may use Posit Cloud: https://posit.cloud/ to try all the functions introduced below.\n\n\n\n\n\nR is a programming language and open source software environment for predictive analytics and data visualization.\nRStudio is the premier IDE for R.\nR may be used without RStudio, but Rstudio may not be used with R.\nLaunch RStudio program, just as you would open any program, by clicking on its icon or by typing ``RStudio’’ at the Windows Run prompt.\n\n\nFour primary panes of RStudio User interface - from https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html\n\n\n\n\nR is a powerful tools because tons of R packages are used to extend the capabilities of base R.\n\n\n\n\n\nExtensive collection of packages designed for statistical analysis.\nDynamic and reproducible documents with R Markdown.\nTidyverse \\(\\leftarrow\\) A collection of R packages designed for data science\n\nData visualization with ggplot2\nData transformation with dplyr\nData tidying with tidyr\nData import with readr, readxl\nManipulate lists with purr\nString manipulation with stringr\n\nInteractive web apps with Shiny\n\\(\\cdots\\)\n\n\n\n\n\n\n\nRun Install.packages(\"the-package-name\")\n\nExample Install package tidyverse.\n\ninstall.packages(\"tidyverse\")\n\nNote that, R Markdown is automatically installed and loaded in RStudio IDE. So you don’t need to explicitly install rmarkdown package if using R Studio.\n\nClick Tools \\(\\rightarrow\\) Install Packages \\(\\rightarrow\\) Type in package name and install.\nRefer to the pane that has the tabs Files, Plots, Packages. Click on the tab Packages, and then click on the button Install to install the package needed.\n\n\n\n\nExample After installation, load package tidyverse.\n\nlibrary(tidyverse)\n\nYou only need to install a package once (like buying a tool from the hardware store and adding it to your toolbox), but you need to reload it every time you start a new session (like grabbing the specific tool you need for the task at hand).\n\n\n\nTry the following codes in the R console.\n\ncheddar # The data set cannot be found, as the package \"faraway\" is not installed and/or loaded.\n# install.packages(\"faraway\") # Install the package\nlibrary(faraway) # Load the package\ncheddar # Now you can use the dataset\n\n### You may specify a dataset from a package by using\nfaraway::cheddar\n\n\n\n\n\n\nCreate an R script file (with extension .R) by clicking File \\(\\rightarrow\\) New File \\(\\rightarrow\\) R Script. (Shortcut is Ctrl + Shift + C (windows), command + shift + N (Mac))\nCreate an R Markdown file (with extension .Rmd) by clicking File \\(\\rightarrow\\) New File \\(\\rightarrow\\) R Markdown.\n\n\n\n\nThe following workflow is from R Markdown Cheat Sheet\n\n\n\nIf you want to generate PDF output, you will need to install TinyTex. Please run the following codes in the R Console.\n\ninstall.packages('tinytex')\ntinytex::install_tinytex()  # install TinyTeX\n\n\n\n\n\n\nUse Ctrl + L to clear Console (windows), Cmd + L (Mac)\nDefault comment/uncomment codes selection is Ctrl + Shift + C (windows), Command + Shift + C (Mac). You may change the shortcut to Ctrl + /.\n\n(You can do so by clicking Tools \\(\\rightarrow\\) Modify Keyboard Shortcuts \\(\\rightarrow\\) Search “comment” \\(\\rightarrow\\) Change the shortcut \\(\\rightarrow\\) Apply.)"
  },
  {
    "objectID": "1-Intro/1-Intro.html#download-and-install-r-and-rstudio",
    "href": "1-Intro/1-Intro.html#download-and-install-r-and-rstudio",
    "title": "R, RStudio, and R Packages",
    "section": "",
    "text": "Visit the website, download and install R and RStudio (selecting the appropriate version for your OS)\n\nhttps://posit.co/download/rstudio-desktop/\n\nAlternatively, you may use Posit Cloud: https://posit.cloud/ to try all the functions introduced below."
  },
  {
    "objectID": "1-Intro/1-Intro.html#r-vs-rstudio",
    "href": "1-Intro/1-Intro.html#r-vs-rstudio",
    "title": "R, RStudio, and R Packages",
    "section": "",
    "text": "R is a programming language and open source software environment for predictive analytics and data visualization.\nRStudio is the premier IDE for R.\nR may be used without RStudio, but Rstudio may not be used with R.\nLaunch RStudio program, just as you would open any program, by clicking on its icon or by typing ``RStudio’’ at the Windows Run prompt.\n\n\nFour primary panes of RStudio User interface - from https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html"
  },
  {
    "objectID": "1-Intro/1-Intro.html#popular-r-packages-for-data-science",
    "href": "1-Intro/1-Intro.html#popular-r-packages-for-data-science",
    "title": "R, RStudio, and R Packages",
    "section": "",
    "text": "R is a powerful tools because tons of R packages are used to extend the capabilities of base R."
  },
  {
    "objectID": "1-Intro/1-Intro.html#r-packages",
    "href": "1-Intro/1-Intro.html#r-packages",
    "title": "R, RStudio, and R Packages",
    "section": "",
    "text": "Extensive collection of packages designed for statistical analysis.\nDynamic and reproducible documents with R Markdown.\nTidyverse \\(\\leftarrow\\) A collection of R packages designed for data science\n\nData visualization with ggplot2\nData transformation with dplyr\nData tidying with tidyr\nData import with readr, readxl\nManipulate lists with purr\nString manipulation with stringr\n\nInteractive web apps with Shiny\n\\(\\cdots\\)"
  },
  {
    "objectID": "1-Intro/1-Intro.html#install-and-preload-packages-in-r-example",
    "href": "1-Intro/1-Intro.html#install-and-preload-packages-in-r-example",
    "title": "R, RStudio, and R Packages",
    "section": "",
    "text": "Run Install.packages(\"the-package-name\")\n\nExample Install package tidyverse.\n\ninstall.packages(\"tidyverse\")\n\nNote that, R Markdown is automatically installed and loaded in RStudio IDE. So you don’t need to explicitly install rmarkdown package if using R Studio.\n\nClick Tools \\(\\rightarrow\\) Install Packages \\(\\rightarrow\\) Type in package name and install.\nRefer to the pane that has the tabs Files, Plots, Packages. Click on the tab Packages, and then click on the button Install to install the package needed.\n\n\n\n\nExample After installation, load package tidyverse.\n\nlibrary(tidyverse)\n\nYou only need to install a package once (like buying a tool from the hardware store and adding it to your toolbox), but you need to reload it every time you start a new session (like grabbing the specific tool you need for the task at hand).\n\n\n\nTry the following codes in the R console.\n\ncheddar # The data set cannot be found, as the package \"faraway\" is not installed and/or loaded.\n# install.packages(\"faraway\") # Install the package\nlibrary(faraway) # Load the package\ncheddar # Now you can use the dataset\n\n### You may specify a dataset from a package by using\nfaraway::cheddar"
  },
  {
    "objectID": "1-Intro/1-Intro.html#creat-.r-and-.rmd-file",
    "href": "1-Intro/1-Intro.html#creat-.r-and-.rmd-file",
    "title": "R, RStudio, and R Packages",
    "section": "",
    "text": "Create an R script file (with extension .R) by clicking File \\(\\rightarrow\\) New File \\(\\rightarrow\\) R Script. (Shortcut is Ctrl + Shift + C (windows), command + shift + N (Mac))\nCreate an R Markdown file (with extension .Rmd) by clicking File \\(\\rightarrow\\) New File \\(\\rightarrow\\) R Markdown."
  },
  {
    "objectID": "1-Intro/1-Intro.html#r-markdown-file",
    "href": "1-Intro/1-Intro.html#r-markdown-file",
    "title": "R, RStudio, and R Packages",
    "section": "",
    "text": "The following workflow is from R Markdown Cheat Sheet\n\n\n\nIf you want to generate PDF output, you will need to install TinyTex. Please run the following codes in the R Console.\n\ninstall.packages('tinytex')\ntinytex::install_tinytex()  # install TinyTeX"
  },
  {
    "objectID": "1-Intro/1-Intro.html#some-useful-tips",
    "href": "1-Intro/1-Intro.html#some-useful-tips",
    "title": "R, RStudio, and R Packages",
    "section": "",
    "text": "Use Ctrl + L to clear Console (windows), Cmd + L (Mac)\nDefault comment/uncomment codes selection is Ctrl + Shift + C (windows), Command + Shift + C (Mac). You may change the shortcut to Ctrl + /.\n\n(You can do so by clicking Tools \\(\\rightarrow\\) Modify Keyboard Shortcuts \\(\\rightarrow\\) Search “comment” \\(\\rightarrow\\) Change the shortcut \\(\\rightarrow\\) Apply.)"
  },
  {
    "objectID": "4-Factors/4-Factors.html",
    "href": "4-Factors/4-Factors.html",
    "title": "4. Factors",
    "section": "",
    "text": "Please make sue you’ve read the following sections in the textbook: R Coding Basics, https://www.gastonsanchez.com/R-coding-basics/\n\nSection 5 Factors"
  },
  {
    "objectID": "4-Factors/4-Factors.html#reading-assignments",
    "href": "4-Factors/4-Factors.html#reading-assignments",
    "title": "4. Factors",
    "section": "",
    "text": "Please make sue you’ve read the following sections in the textbook: R Coding Basics, https://www.gastonsanchez.com/R-coding-basics/\n\nSection 5 Factors"
  },
  {
    "objectID": "4-Factors/4-Factors.html#creating-factors",
    "href": "4-Factors/4-Factors.html#creating-factors",
    "title": "4. Factors",
    "section": "Creating Factors",
    "text": "Creating Factors\nfactor() can convert a vector (numerical, character, or logical) to a factor\nExamples:\n\nnum_vector &lt;- c(1, 2, 3, 1, 2, 3, 2)\nfactor(num_vector)\n#&gt; [1] 1 2 3 1 2 3 2\n#&gt; Levels: 1 2 3\n\nstr_vector &lt;- c('a', 'b', 'c', 'b', 'c', 'a', 'c', 'b')\nfactor(str_vector)\n#&gt; [1] a b c b c a c b\n#&gt; Levels: a b c\n\nlog_vector &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE)\nfactor(log_vector)\n#&gt; [1] TRUE  FALSE TRUE  TRUE  FALSE\n#&gt; Levels: FALSE TRUE"
  },
  {
    "objectID": "4-Factors/4-Factors.html#why-factors",
    "href": "4-Factors/4-Factors.html#why-factors",
    "title": "4. Factors",
    "section": "Why factors?",
    "text": "Why factors?\nFactors are used to handle categorical data\nFactors vs Character\n\nFactors have levels; Character doesn’t have levels\n\nUse factors when your data represents categories or groups with a limited set of values (e.g., “red,” “green,” “blue” for colors).\nUse character vectors if your data consists of plain strings without specific meaning (e.g., names, labels, or arbitrary text).\n\nAs factors have predefined levels, factors are particularly useful in the following cases.\nCase 1: You get error message (and NA generated) when adding a new value not in the predefined levels (help prevent typos)\n\n\nfirst_factor &lt;- factor(num_vector)\nfirst_factor\n#&gt; [1] 1 2 3 1 2 3 2\n#&gt; Levels: 1 2 3\nfirst_factor[1] &lt;- 6\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, 1, value = 6): invalid factor level, NA\n#&gt; generated\nfirst_factor\n#&gt; [1] &lt;NA&gt; 2    3    1    2    3    2   \n#&gt; Levels: 1 2 3\n\nCase 2: when you tabulate a factor you’ll get counts of all categories, even unobserved ones.\n\nsex_char &lt;- c(\"m\", \"m\", \"m\")\nsex_factor &lt;- factor(sex_char, levels = c(\"m\", \"f\"))\n\ntable(sex_char)\n#&gt; sex_char\n#&gt; m \n#&gt; 3\ntable(sex_factor)\n#&gt; sex_factor\n#&gt; m f \n#&gt; 3 0\n\nCase 3: Compare to character, factors allow for efficient memory storage\nWhy? The way R stores factors is as vectors of integer values.\n\nsecond_factor &lt;- factor(str_vector)\nsecond_factor\n#&gt; [1] a b c b c a c b\n#&gt; Levels: a b c\ntypeof(second_factor)\n#&gt; [1] \"integer\"\nunclass(second_factor)\n#&gt; [1] 1 2 3 2 3 1 3 2\n#&gt; attr(,\"levels\")\n#&gt; [1] \"a\" \"b\" \"c\"\n\nunclass() is equivalent to as.numeric() or as.integer()."
  },
  {
    "objectID": "4-Factors/4-Factors.html#how-r-treats-factors",
    "href": "4-Factors/4-Factors.html#how-r-treats-factors",
    "title": "4. Factors",
    "section": "How R treats factors",
    "text": "How R treats factors\nFactors are built on top of an integer vector with two attributes:\n\nclass, “factor”, which makes it behave differently from regular integer vectors\nlevels, which defines the set of allowed values.\n\n\n# Recall second_factor defined above\nsecond_factor\n#&gt; [1] a b c b c a c b\n#&gt; Levels: a b c\nattributes(second_factor)\n#&gt; $levels\n#&gt; [1] \"a\" \"b\" \"c\"\n#&gt; \n#&gt; $class\n#&gt; [1] \"factor\"\ntypeof(second_factor)\n#&gt; [1] \"integer\""
  },
  {
    "objectID": "4-Factors/4-Factors.html#ordinal-factor",
    "href": "4-Factors/4-Factors.html#ordinal-factor",
    "title": "4. Factors",
    "section": "Ordinal Factor",
    "text": "Ordinal Factor\n\nOrdinal factors are a minor variation of factors.\nOrdinal factors behave like regular factors, but the order of the levels is meaningful (low, medium, high) (a property that is automatically leveraged by some modelling and visualization functions)\n\n\n\nConvert to Ordinal Factor\nTwo equivalent ways below to convert vectors (numerical, character, logical) or unordered factors to ordinal factors\n\n# Two equivalent ways to get Ordinal factors\nfactor(num_vector, ordered = TRUE)\n#&gt; [1] 1 2 3 1 2 3 2\n#&gt; Levels: 1 &lt; 2 &lt; 3\nordered(num_vector)\n#&gt; [1] 1 2 3 1 2 3 2\n#&gt; Levels: 1 &lt; 2 &lt; 3\n\n\n\nNominal Factor vs Ordinal Factor\n\n# Nominal factor or Unordered factor\nfirst_factor &lt;- factor(num_vector)\nfirst_factor\n#&gt; [1] 1 2 3 1 2 3 2\n#&gt; Levels: 1 2 3\n\n# Ordinal factor\nfirst_factor_o &lt;- factor(num_vector, ordered = TRUE)\nfirst_factor_o\n#&gt; [1] 1 2 3 1 2 3 2\n#&gt; Levels: 1 &lt; 2 &lt; 3\n\n\n\nOrdinal Factor or not? – is.ordered()\n\nis.ordered(num_vector) # Recall num_vector is a numerical vector\n#&gt; [1] FALSE\nis.ordered(first_factor) # first_factor is an unordered factor\n#&gt; [1] FALSE\nis.ordered(first_factor_o) # first_factor_o is an ordinal factor\n#&gt; [1] TRUE"
  },
  {
    "objectID": "ggplot2/ggplot2.html",
    "href": "ggplot2/ggplot2.html",
    "title": "Data Visualization with ggplot2",
    "section": "",
    "text": "R is nowadays equipped with two independent (incompatible, yet coexisting) systems for graphics generation:\n\nTraditional System – base graphics\n\nBuilt-in functionality for creating charts and graphs in R.\nEasier to learn and use.\nDiscussed before.\n\nNewer System – grid\n\nggplot2 – an open-source data visualization package.\nVery flexible and gaining popularity rapidly nowadays.\nVery brief introduction to ggplot in this lecture.\nR Graph Gallery https://r-graph-gallery.com/\nggplot Cheatsheet https://rstudio.github.io/cheatsheets/html/data-visualization.html"
  },
  {
    "objectID": "ggplot2/ggplot2.html#data-visualization-in-r",
    "href": "ggplot2/ggplot2.html#data-visualization-in-r",
    "title": "Data Visualization with ggplot2",
    "section": "",
    "text": "R is nowadays equipped with two independent (incompatible, yet coexisting) systems for graphics generation:\n\nTraditional System – base graphics\n\nBuilt-in functionality for creating charts and graphs in R.\nEasier to learn and use.\nDiscussed before.\n\nNewer System – grid\n\nggplot2 – an open-source data visualization package.\nVery flexible and gaining popularity rapidly nowadays.\nVery brief introduction to ggplot in this lecture.\nR Graph Gallery https://r-graph-gallery.com/\nggplot Cheatsheet https://rstudio.github.io/cheatsheets/html/data-visualization.html"
  },
  {
    "objectID": "ggplot2/ggplot2.html#five-basic-graphs",
    "href": "ggplot2/ggplot2.html#five-basic-graphs",
    "title": "Data Visualization with ggplot2",
    "section": "Five Basic Graphs",
    "text": "Five Basic Graphs\nVisualization using ggplot2 will be introduced and compared with Base R Graphics.\n\nscatterplot\nlinegraph\nhistogram\nboxplot\nbarplot"
  },
  {
    "objectID": "ggplot2/ggplot2.html#recall-base-r-graphics",
    "href": "ggplot2/ggplot2.html#recall-base-r-graphics",
    "title": "Data Visualization with ggplot2",
    "section": "Recall: Base R Graphics",
    "text": "Recall: Base R Graphics\n\nScatterplot Example\nExample: Draw scatterplot of wind vs pressure of the data set storms (in the tidyverse package).\n\n# Plot scatter plot with x = pressure, y = wind\nplot(storms$pressure, storms$wind, col = \"blue\", \n     main = \"Scatterplot of Wind vs Pressure\")\n\n\n\n\n\n\n\n\n\n\nScatterplot Matrices Example\nExample: Draw scatterplot matrix of first 4 variables of the data frame iris (in the datasets package).\n\n#&gt;   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n#&gt; 1          5.1         3.5          1.4         0.2  setosa\n#&gt; 2          4.9         3.0          1.4         0.2  setosa\n#&gt; 3          4.7         3.2          1.3         0.2  setosa\n#&gt; 4          4.6         3.1          1.5         0.2  setosa\n#&gt; 5          5.0         3.6          1.4         0.2  setosa\n#&gt; 6          5.4         3.9          1.7         0.4  setosa\n\n\n# pch = 19 stands for points symbols type 19,\n# which is solid circle\npairs(iris[,1:4], pch=19)\n\n\n\n\n\n\n\n\n\n\nLinegraph Example – Draw a linegraph of the Data Science search counts vs Month.\n\n#&gt;   Month_Since_2004 DataScience MachineLearning\n#&gt; 1                1          12              16\n#&gt; 2                2          10              14\n#&gt; 3                3           7              12\n#&gt; 4                4           7              16\n#&gt; 5                5           5              14\n#&gt; 6                6           7              11\n\n\npar(mfrow=c(1,2)) # 1 row, 2 columns (row-wise filling)\nplot(ds$Month_Since_2004, ds$DataScience, type=\"l\",\n     main = \"Line Plot for Data Science\",\n     xlab = \"Number of Months Since 2004\",\n     ylab = \"Data Science Search Counts\") # type=\"l\" represents lines\n\n### Plot with points and line\nplot(ds$Month_Since_2004, ds$DataScience, type=\"b\", # type=\"b\" represents both\n     main = \"Line and Point Plot for Data Science\",\n     xlab = \"Number of Months Since 2004\",\n     ylab = \"Data Science Search Counts\") \n\n\n\n\n\n\n\n\npar(mfrow=c(1,1)) # reset to default\n\n\n\nMultiple linegraphs Example\nExample: We could place multiple linegraphs on one plot. Draw two linegraphs (DataScience vs Month_Since_2004, MachineLearning vs Month_Since_2004) on a single plot.\n\nplot(ds$Month_Since_2004, ds$DataScience, type=\"l\", col=\"red\")\nlines(ds$Month_Since_2004, ds$MachineLearning, col=\"blue\")\n\n\n\n\n\n\n\n\n\n\nHistogram Example\nExample: Draw histogram of variable Sepal.Width in the data frame iris (in the datasets package).\n\ndata(iris)\nhist(iris$Sepal.Width)\n\n\n\n\n\n\n\n\n\n\nHistogram Matrices Example\n\nlibrary(Hmisc)\nhist.data.frame(iris[,1:4])\n\n\n\n\n\n\n\n\n\n\nBoxplot Example\nExample:\n\nDraw a boxplot of the variable wind in the data frame storms (in the tidyverse package).\nDraw a boxplot of wind vs category of the data frame storms.\n\n\npar(mfrow=c(2,2)) # Arrange the plots in 2*2 graphical matrix\n\n### (a) boxplot of wind\nboxplot(storms$wind, main = \"(a) Vertical\")\nboxplot(storms$wind, horizontal = TRUE, main = \"(a) Horizontal\")\n### (b) boxplot of wind over levels of category\n### vertical boxplot by default\nboxplot(wind ~ category, data = storms, main = \"(b) Vertical\")\n\n### horizontal boxplot\nboxplot(wind ~ category, data = storms, horizontal = TRUE, main = \"(b) Horizontal\")\n\n\n\n\n\n\n\n\npar(mfrow=c(1,1))\n\n\n\nBarplot Example\nExample: In the storms dataset,\n\nDraw a barplot of variable status.\nDraw a barplot of variable of status and category.\n\n\n### (a) Barplot\ncounts = table(storms$status)\nbarplot(counts)\n\n\n\n\n\n\n\n\ncounts\n#&gt; \n#&gt;            disturbance          extratropical              hurricane \n#&gt;                    171                   2151                   4803 \n#&gt;              other low subtropical depression      subtropical storm \n#&gt;                   1453                    151                    298 \n#&gt;    tropical depression         tropical storm          tropical wave \n#&gt;                   3569                   6830                    111\n\n# Horizontal barplot\nbarplot(counts, horiz=TRUE)\n\n\n\n\n\n\n\n\n### (b) Barplot of two variables\ncounts = table(storms$category, storms$status)\ncounts\n#&gt;    \n#&gt;     disturbance extratropical hurricane other low subtropical depression\n#&gt;   0           0             0         0         0                      0\n#&gt;   1           0             0      2548         0                      0\n#&gt;   2           0             0       993         0                      0\n#&gt;   3           0             0       593         0                      0\n#&gt;   4           0             0       553         0                      0\n#&gt;   5           0             0       116         0                      0\n#&gt;    \n#&gt;     subtropical storm tropical depression tropical storm tropical wave\n#&gt;   0                 0                   0              1             0\n#&gt;   1                 0                   0              0             0\n#&gt;   2                 0                   0              0             0\n#&gt;   3                 0                   0              0             0\n#&gt;   4                 0                   0              0             0\n#&gt;   5                 0                   0              0             0\n\nbarplot(counts, col= c(\"steelblue\", \"firebrick\", \"lightblue\", \"mistyrose\", \"lightcyan\",\n  \"lavender\", \"cornsilk\"), besid=TRUE, legend = rownames(counts),\n  args.legend=list(title=\"Category\"))\n\n\n\n\n\n\n\n\n\ncategory variable in storms represents the Saffir-Simpson storm category (range from 1 to 5), which the scale based only on a hurricane’s maximum sustained wind speed."
  },
  {
    "objectID": "ggplot2/ggplot2.html#ggplot2",
    "href": "ggplot2/ggplot2.html#ggplot2",
    "title": "Data Visualization with ggplot2",
    "section": "ggplot2",
    "text": "ggplot2"
  },
  {
    "objectID": "ggplot2/ggplot2.html#why-ggplot",
    "href": "ggplot2/ggplot2.html#why-ggplot",
    "title": "Data Visualization with ggplot2",
    "section": "Why ggplot",
    "text": "Why ggplot\n\nLooks good!\n\n\nlibrary(ggplot2) is used by fivethirtyeight, Financial Times, BBC, the Urban Institute, and more.\n\n\nFlexible and expressive\n\n\nConstructing a visualization using library(ggplot2) is like playing a set of building blocks (it’s fun!)\nAdd different layers of component parts to the plot.\n\n\nReproducible and scalable\n\n\nOnce you have the plot-building-pipelines built, feed the data, select the code, Ctrl + Enter, then all done!\nIt’s almost as easy to make the 100th chart as it is to make the 2nd chart.\n\n\nEssential in analysis workflow"
  },
  {
    "objectID": "ggplot2/ggplot2.html#ggplot2-five-important-graphs-summary",
    "href": "ggplot2/ggplot2.html#ggplot2-five-important-graphs-summary",
    "title": "Data Visualization with ggplot2",
    "section": "ggplot2– five important graphs – Summary",
    "text": "ggplot2– five important graphs – Summary\nAssume we have the variables xvar, yvar in the data frame df.\n\n### scatterplot\nggplot(data=df, mapping=aes(x=xvar, y=yvar)) +\n  geom_point()\n\n### linegraph\nggplot(data=df, mapping=aes(x=xvar, y=yvar)) +\n  geom_line()\n\n  #linegraph with dots\n  ggplot(data=df, mapping=aes(x=xvar, y=yvar)) +\n    geom_line() +\n    geom_point()\n\n### histogram\nggplot(data=df, mapping=aes(x=xvar)) +\n  geom_histogram()\n\n### boxplot\n  # boxplot of one variable yvar\n  ggplot(data=df, mapping=aes(y=yvar)) +\n    geom_boxplot()\n  # boxplot of the yvar vs xvar\n  ggplot(data=df, mapping=aes(x=xvar, y=yvar)) +\n    geom_boxplot()\n\n### barplot of variable x\n  # If not pre-counted, use geom_bar()\n  ggplot(data=df, mapping=aes(x=xvar))+\n   geom_bar()\n  # If precounted, use geom_col()\n  ggplot(data=df_counted, mapping=aes(x=xvar,y=counts))+\n    geom_col()"
  },
  {
    "objectID": "ggplot2/ggplot2.html#ggplot2-scatterplot-example",
    "href": "ggplot2/ggplot2.html#ggplot2-scatterplot-example",
    "title": "Data Visualization with ggplot2",
    "section": "ggplot2 – scatterplot – Example",
    "text": "ggplot2 – scatterplot – Example\nFunction: geom_point(x,y)\nExample: Draw scatterplot of wind vs pressure of the data set storms (in the tidyverse package).\n\n# Data preparation\nlibrary(tidyverse)\ndata(storms) # data frame in tidyverse package\n\nstorms[6923, \"category\"]=0 #Fixed one error value\nstorms$category = as.factor(storms$category)\n\n\n# load the data set storms (in the tidyverse package)\nggplot(data = storms, mapping = aes(x=pressure, y=wind))+\n  geom_point()\n\n\n\n\n\n\n\n\n\nTake a quick peek on dealing with overplotting\n\n\n # Changing the transparency\nggplot(storms, mapping = aes(x=pressure, y=wind)) + \n  geom_jitter(alpha=0.2)"
  },
  {
    "objectID": "ggplot2/ggplot2.html#ggplot2-scatterplot-matrices-example",
    "href": "ggplot2/ggplot2.html#ggplot2-scatterplot-matrices-example",
    "title": "Data Visualization with ggplot2",
    "section": "ggplot2 – scatterplot matrices – Example",
    "text": "ggplot2 – scatterplot matrices – Example\nFunction: ggpairs(df)\nExample: Draw scatterplot matrix of first 4 variables of the data frame iris (in the datasets package).\n\ndata(iris)\n\nlibrary(GGally)\n#&gt; Registered S3 method overwritten by 'GGally':\n#&gt;   method from   \n#&gt;   +.gg   ggplot2\nggpairs(iris[,1:4])"
  },
  {
    "objectID": "ggplot2/ggplot2.html#ggplot2-linegraph-example",
    "href": "ggplot2/ggplot2.html#ggplot2-linegraph-example",
    "title": "Data Visualization with ggplot2",
    "section": "ggplot2 – linegraph – Example",
    "text": "ggplot2 – linegraph – Example\nFunction: geom_line()\nExample: From https://trends.google.com/, we downloaded the time series data set GoogleTrendDataScience.csv with three variables Month_Since_2004, DataScience, MachineLearning.\n\nDraw a linegraph of the Data Science search counts vs Month.\nDraw a linegraph with points.\n\n\nds = read.csv(\"GoogleTrendDataScience.csv\")\n\n### Plot with line only\np1 = ggplot(ds, aes(x = Month_Since_2004, y = DataScience)) +\n  geom_line()\n\n### Plot with points and line\np2= ggplot(ds, aes(x = Month_Since_2004, y = DataScience)) +\n  geom_line() +\n  geom_point(size=1.5)\n\nlibrary(gridExtra)\ngrid.arrange(p1, p2, nrow = 1, ncol = 2)"
  },
  {
    "objectID": "ggplot2/ggplot2.html#ggplot2-multiple-linegraphs-example",
    "href": "ggplot2/ggplot2.html#ggplot2-multiple-linegraphs-example",
    "title": "Data Visualization with ggplot2",
    "section": "ggplot2 – Multiple linegraphs – Example",
    "text": "ggplot2 – Multiple linegraphs – Example\nFunction: geom_line()\nExample: We could place multiple linegraphs on one plot. Draw two linegraphs (DataScience vs Month_Since_2004, MachineLearning vs Month_Since_2004) on one plot.\n\nggplot(ds) +\n  geom_line(aes(x=Month_Since_2004, y=DataScience), col = \"tomato3\", size = 1.5) +\n  geom_line(aes(x=Month_Since_2004, y=MachineLearning), col=\"steelblue\", size = 1.5)"
  },
  {
    "objectID": "ggplot2/ggplot2.html#ggplot2-histogram-example",
    "href": "ggplot2/ggplot2.html#ggplot2-histogram-example",
    "title": "Data Visualization with ggplot2",
    "section": "ggplot2 – histogram – Example",
    "text": "ggplot2 – histogram – Example\nFunction: geom_histogram()\nExample: Draw histogram of variable Sepal.Width in the data frame iris (in the datasets package).\n\n## Illini orange and blue!\nggplot(iris, aes(x=Sepal.Width)) +\n  geom_histogram(binwidth=0.2, color=\"#13294B\", fill=\"#FF5F05\")"
  },
  {
    "objectID": "ggplot2/ggplot2.html#ggplot2-boxplot-example",
    "href": "ggplot2/ggplot2.html#ggplot2-boxplot-example",
    "title": "Data Visualization with ggplot2",
    "section": "ggplot2 – boxplot – Example",
    "text": "ggplot2 – boxplot – Example\nFunctions: geom_boxplot()\nExample:\n\nDraw a boxplot of the variable wind in the data frame storms (in the tidyverse package).\nDraw a boxplot of wind vs category of the data frame storms .\n\n\n\n### (a) boxplot of wind\np1 = ggplot(storms, aes(y=wind))+\n  geom_boxplot()\n\n\n\n### (b) boxplot of wind over levels of category\n### vertical boxplot by default\np2 = ggplot(storms, aes(x = category, y = wind))+\n  geom_boxplot()\n\n### horizontal boxplot\np3 = ggplot(storms, aes(y = category, x = wind))+\n  geom_boxplot()\n# Or\np4 = ggplot(storms, aes(x = category, y = wind))+\n  geom_boxplot()+\n  coord_flip()\n\ngrid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)"
  },
  {
    "objectID": "ggplot2/ggplot2.html#ggplot2-barplot-example",
    "href": "ggplot2/ggplot2.html#ggplot2-barplot-example",
    "title": "Data Visualization with ggplot2",
    "section": "ggplot2 – barplot – Example",
    "text": "ggplot2 – barplot – Example\nFunctions: geom_bar(), geom_col()\nExample: In the storms dataset,\n\nDraw a barplot of variable status.\nDraw a barplot of variable of status and category\n\n\n### Barplot\n    # If not pre-counted, use geom_bar()\n    ggplot(storms, aes(x = status))+\n      geom_bar()+\n      scale_x_discrete(guide = guide_axis(angle = 45)) ### Rotate the x axis label\n\n\n\n\n\n\n\n\n    # If precounted, use geom_col()\n    storms %&gt;% \n      group_by(status) %&gt;%\n      summarise(count = n())%&gt;%\n      ggplot(aes(x = status, y = count)) +\n      geom_col()+\n      scale_x_discrete(guide = guide_axis(angle = 45)) ### Rotate the x axis label\n\n\n\n\n\n\n\n\n# Horizontal barplot\nggplot(storms, aes(y=status))+\n  geom_bar()\n\n\n\n\n\n\n\n\n### Barplot of two variables\nggplot(storms, aes(x = status, fill = factor(category)))+\n  geom_bar(position = \"dodge\")+\n  scale_x_discrete(guide = guide_axis(angle = 45)) ### Rotate the x axis label\n\n\n\n\n\n\n\n\n\ncategory variable in storms represents the Saffir-Simpson storm category (range from 1 to 5), which the scale based only on a hurricane’s maximum sustained wind speed.\n\n\n### Barplot\np1 = ggplot(storms, aes(x = status))+\n  geom_bar()+\n  scale_x_discrete(guide = guide_axis(angle = 45)) ### Rotate the x axis label\n\n# Horizontal barplot\np2 = ggplot(storms, aes(y = status))+\n  geom_bar()\n\n### Barplot of two variables\np3 = ggplot(storms, aes(x = status, fill = factor(category))) +\n  geom_bar(position = \"dodge\")+\n  scale_x_discrete(guide = guide_axis(angle = 45)) ### Rotate the x axis label\n\ngrid.arrange(p1, p2, p3, layout_matrix = rbind(c(1,2), c(3,3)))"
  },
  {
    "objectID": "ggplot2/ggplot2.html#want-to-save-your-ggplot",
    "href": "ggplot2/ggplot2.html#want-to-save-your-ggplot",
    "title": "Data Visualization with ggplot2",
    "section": "Want to save your ggplot?",
    "text": "Want to save your ggplot?\n\nggplot(storms, aes(x = status, fill = factor(category))) +\n  geom_bar(position = \"dodge\")+\n  scale_x_discrete(guide = guide_axis(angle = 45))\n\nggsave(\"The Barplots.png\") ### Save the last plot\nggsave(\"p1.png\", plot = p1) ### Save the plot specified"
  },
  {
    "objectID": "ggplot2/ggplot2.html#comments",
    "href": "ggplot2/ggplot2.html#comments",
    "title": "Data Visualization with ggplot2",
    "section": "Comments",
    "text": "Comments\n\nIf a graph could be done with ggplot2, it could probably be done with base R graphics, and vice versa.\nTo take a quick look at the data, the one-line base R graphics functions are quick and easy.\nFor data visualization, ggplot2 is much easier to code and with a much better output."
  },
  {
    "objectID": "ggplot2/ggplot2.html#resources",
    "href": "ggplot2/ggplot2.html#resources",
    "title": "Data Visualization with ggplot2",
    "section": "Resources",
    "text": "Resources\n\nR Graph Gallery https://r-graph-gallery.com/\nRstudio Cheatsheets https://www.rstudio.com/resources/cheatsheets/\nReference Books (Free online books with excellent material)\n\nR for Data Science: https://r4ds.had.co.nz/index.html\nHands-on Programming with R: https://rstudio-education.github.io/hopr/\nR Graphics Cookbook: https://r-graphics.org/"
  },
  {
    "objectID": "Lab5/Lab5.html",
    "href": "Lab5/Lab5.html",
    "title": "",
    "section": "",
    "text": "Please ensure you review the document Illustrate S3 System – U of I Women’s Basketball Team example on Canvas under Week 5 Module or visit the weblink https://ycjiaweijia.github.io/STAT-385-Assignments/Lab5HelpDoc/Lab5HelpDoc for helpful guidance on this lab.\nPlease complete the following questions and submit your Lab 5 to Gradescope."
  },
  {
    "objectID": "Lab5/Lab5.html#lab-5-s3-for-workshop-participants-instruction",
    "href": "Lab5/Lab5.html#lab-5-s3-for-workshop-participants-instruction",
    "title": "",
    "section": "",
    "text": "Please ensure you review the document Illustrate S3 System – U of I Women’s Basketball Team example on Canvas under Week 5 Module or visit the weblink https://ycjiaweijia.github.io/STAT-385-Assignments/Lab5HelpDoc/Lab5HelpDoc for helpful guidance on this lab.\nPlease complete the following questions and submit your Lab 5 to Gradescope."
  },
  {
    "objectID": "Lab5/Lab5.html#background",
    "href": "Lab5/Lab5.html#background",
    "title": "",
    "section": "Background",
    "text": "Background\nSuppose a university is hosting a campus-wide data science workshop with undergraduate and graduate student participants, along with many faculty members showing interest in the series of workshops. Develop S3 classes for students, faculty, etc., incorporating validators and necessary helper functions."
  },
  {
    "objectID": "Lab5/Lab5.html#question-1",
    "href": "Lab5/Lab5.html#question-1",
    "title": "",
    "section": "Question 1",
    "text": "Question 1\n\n[10 pts] Create the constructor function new_student() to generate objects of the “student” class. Student participants provide the following information: name, major, department, classYear (Freshman, Sophomore, Junior, Senior, or Graduate), UofI_email, and dsExperience which represents years of experience in data science.\n[10 pts] Create the validator function validate_student(). Below is a list of validations to include.\n\nValidations:\n\nIf any of the information required above is missing, print a warning message.\nIf dsExperience is not numeric, or the length is not 1, or the years is lower than 0 or greater than 20, print warning message that: The data science experience years information is not valid. Please use || for “or”.\nIf classYear doesn’t belong in one of the five categories, print the warning message that: The student’s class information is invalid.\nIf UofI_emailprovided is not character type, print the warning message: The student’s email information is invalid.\n\n\n[10 pts] Define a helper function to fill in or complete an email address. This is necessary because some students might only provide their NetID instead of a full email address. The completeEmail() function should take UofI_email as input and add @illinois.edu if needed. The output of completeEmail() function is saved as Complete_UofI_email.\n\n[Hint:\n\nConsider using an if-else statement to decide whether to append the domain.\nThe regular expression grepl(\"@illinois\\\\.edu\", UofI_email), checking if UofI_email contains @illinois.edu, might be helpful. ]"
  },
  {
    "objectID": "Lab5/Lab5.html#question-2",
    "href": "Lab5/Lab5.html#question-2",
    "title": "",
    "section": "Question 2",
    "text": "Question 2\n\n[10 pts] Create the constructor function new_faculty() to generate objects of the “faculty” class. Faculty participants have the following information: name and department.\n[10 pts] Create the constructor function new_other() to generate objects of the “Other” class. Other participants have the following information: name."
  },
  {
    "objectID": "Lab5/Lab5.html#question-3",
    "href": "Lab5/Lab5.html#question-3",
    "title": "",
    "section": "Question 3",
    "text": "Question 3\n[30 pts] Define generic and methods using the constructors from Question 1 and 2 to create classes for student, faculty, and other participants. Implement a participantInfo() function that prints specific information based on the class of the object.\nFor example,\n\nSwift &lt;- new_student(x = list(\n  name = \"Taylor Swift\",\n  major = \"Fisheries and Wildlife\",\n  department = \"Biological Sciences\",\n  classYear = \"Junior\", \n  UofI_email = \"Tswift\",\n  dsExperience = 1.5))\nparticipantInfo(Swift)\n\n\nRonaldo &lt;- new_faculty(x = list(\n  name = \"Cristiano Ronaldo\", \n  department = \"Applied Health Science\"\n  )\n)\nparticipantInfo(Ronaldo)\n\n\nSomeone &lt;- new_other(x = list(\n  name = \"Someone Else\"\n  )\n)\nparticipantInfo(Someone)\n\nshould show the following:\n\nFor student\n\nExample: “Taylor Swift is a Fisheries And Wildlife major. The email address is Tswift@illinois.edu. The student has 1.5 years of experience in data science.”\n\nFor faculty\n\nExample: “Cristiano Ronaldo is from the Applied Health Science Department.”\n\nFor other people\n\nExample: “Someone Else is neither a faculty member nor a student.”"
  },
  {
    "objectID": "Lab6/Lab6.html",
    "href": "Lab6/Lab6.html",
    "title": "",
    "section": "",
    "text": "Please ensure you review the document STAT 385 Lab 6 Help Document – Kronecker Product Illustration on Canvas under Week 5 Module or visit the weblink https://ycjiaweijia.github.io/STAT-385-Assignments/Lab6HelpDoc/Lab6HelpDoc for helpful guidance on this lab.\nPlease complete the following questions and submit your Lab 6 to Gradescope."
  },
  {
    "objectID": "Lab6/Lab6.html#lab-6-instruction",
    "href": "Lab6/Lab6.html#lab-6-instruction",
    "title": "",
    "section": "",
    "text": "Please ensure you review the document STAT 385 Lab 6 Help Document – Kronecker Product Illustration on Canvas under Week 5 Module or visit the weblink https://ycjiaweijia.github.io/STAT-385-Assignments/Lab6HelpDoc/Lab6HelpDoc for helpful guidance on this lab.\nPlease complete the following questions and submit your Lab 6 to Gradescope."
  },
  {
    "objectID": "Lab6/Lab6.html#mathemetical-definition-of-kronecker-product",
    "href": "Lab6/Lab6.html#mathemetical-definition-of-kronecker-product",
    "title": "",
    "section": "Mathemetical Definition of Kronecker Product",
    "text": "Mathemetical Definition of Kronecker Product\nIn mathematics, the Kronecker product, sometimes denoted by \\(\\bigotimes\\), is an operation on two matrices of arbitrary size resulting a block matrix. It is a specialization of the tensor product (which is denoted by the same symbol) from vectors to matrices and gives the matrix of the tensor product linear map with respect to a standard choice of basis. The Kronecker product is to be distinguished from the usual matrix multiplication, which is an entirely different operation. The Kronecker product is also sometimes called matrix direct product.\n\nYou can find more information about Kronecker Product on Wikipedia https://en.wikipedia.org/wiki/Kronecker_product.\n\nIf \\(\\mathbf{A}\\) is an \\(m \\times n\\) matrix and \\(\\mathbf{B}\\) is a \\(p \\times q\\) matrix, then the Kronecker product \\(\\mathbf{A}\\bigotimes \\mathbf{B}\\) is the \\(pm \\times qn\\) block matrix:\n\\[\\mathbf{A}\\bigotimes \\mathbf{B} = \\begin{bmatrix}\na_{11}\\mathbf{B}\\quad  \\cdots \\quad a_{1n}\\mathbf{B}\\\\\n\\vdots\\quad  \\ddots\\quad  \\vdots\\\\\na_{m1}\\mathbf{B}\\quad  \\cdots \\quad a_{mn}\\mathbf{B}\n\\end{bmatrix},\\]\nmore explicitly,\n\\[\\mathbf{A}\\bigotimes \\mathbf{B} =\\left[\\begin{array}{cccccccccc}\na_{11}b_{11}&  a_{11}b_{12} & \\cdots & a_{11}b_{1q}& \\cdots& \\cdots& a_{1n}b_{11}&  a_{1n}b_{12} & \\cdots & a_{1n}b_{1q} \\\\\na_{11}b_{21}&  a_{11}b_{22} & \\cdots & a_{11}b_{2q}& \\cdots& \\cdots& a_{1n}b_{21}&  a_{1n}b_{22} & \\cdots & a_{1n}b_{2q} \\\\\n\\vdots& \\vdots&  \\ddots&  \\vdots & & & \\vdots& \\vdots&  \\ddots&  \\vdots \\\\\na_{11}b_{p1}&  a_{11}b_{p2} & \\cdots & a_{11}b_{pq}& \\cdots& \\cdots& a_{1n}b_{p1}&  a_{1n}b_{p2} & \\cdots & a_{1n}b_{pq} \\\\\n\\vdots& \\vdots&  &  \\vdots & \\ddots& & \\vdots  & \\vdots& & \\vdots \\\\\n\\vdots& \\vdots&  &  \\vdots & &\\ddots & \\vdots  & \\vdots& & \\vdots \\\\\na_{m1}b_{11}&  a_{m1}b_{12} & \\cdots & a_{m1}b_{1q}& \\cdots& \\cdots& a_{mn}b_{11}&  a_{mn}b_{12} & \\cdots & a_{mn}b_{1q} \\\\\na_{m1}b_{21}&  a_{m1}b_{22} & \\cdots & a_{m1}b_{2q}& \\cdots& \\cdots& a_{mn}b_{21}&  a_{mn}b_{22} & \\cdots & a_{mn}b_{2q} \\\\\n\\vdots& \\vdots&  \\ddots&  \\vdots & & & \\vdots& \\vdots&  \\ddots&  \\vdots \\\\\na_{m1}b_{p1}&  a_{m1}b_{p2} & \\cdots & a_{m1}b_{pq}& \\cdots& \\cdots& a_{mn}b_{p1}&  a_{mn}b_{p2} & \\cdots & a_{mn}b_{pq}\n\\end{array}\\right],\\]"
  },
  {
    "objectID": "Lab6/Lab6.html#question-1",
    "href": "Lab6/Lab6.html#question-1",
    "title": "",
    "section": "Question 1",
    "text": "Question 1\n[20 pts] Please define the function forloop_kronecker(), using for loop, to calculate the Kronecker product of matrices A and B with arbitrary dimensions."
  },
  {
    "objectID": "Lab6/Lab6.html#question-2",
    "href": "Lab6/Lab6.html#question-2",
    "title": "",
    "section": "Question 2",
    "text": "Question 2\n[20 pts] Please define the function vectorization_kronecker(), using vectorization, to calculate the Kronecker product of matrices A and B with arbitrary dimensions."
  },
  {
    "objectID": "Lab6/Lab6.html#question-3",
    "href": "Lab6/Lab6.html#question-3",
    "title": "",
    "section": "Question 3",
    "text": "Question 3\n[20 pts] Compare the CPU times for three Kronecker product calculation methods below for matrices A1 and B1, A2 and B2, and other pairs of matrices you choose to test. Use times = 10000L for each calculation. Discuss the computational efficiency of the three methods based on your findings.\n\nvectorization_kronecker()\nkronecker()\nforloop_kronecker()\n\n\n(A1 &lt;- matrix(1:16, nrow = 4, ncol = 4))\n#&gt;      [,1] [,2] [,3] [,4]\n#&gt; [1,]    1    5    9   13\n#&gt; [2,]    2    6   10   14\n#&gt; [3,]    3    7   11   15\n#&gt; [4,]    4    8   12   16\n(B1 &lt;- matrix(1:20, nrow = 4, ncol = 5))\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]    1    5    9   13   17\n#&gt; [2,]    2    6   10   14   18\n#&gt; [3,]    3    7   11   15   19\n#&gt; [4,]    4    8   12   16   20\n\n(A2 &lt;- matrix(1:40, nrow = 5, ncol = 8))\n#&gt;      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n#&gt; [1,]    1    6   11   16   21   26   31   36\n#&gt; [2,]    2    7   12   17   22   27   32   37\n#&gt; [3,]    3    8   13   18   23   28   33   38\n#&gt; [4,]    4    9   14   19   24   29   34   39\n#&gt; [5,]    5   10   15   20   25   30   35   40\n(B2 &lt;- matrix(1:50, nrow = 10, ncol = 5))\n#&gt;       [,1] [,2] [,3] [,4] [,5]\n#&gt;  [1,]    1   11   21   31   41\n#&gt;  [2,]    2   12   22   32   42\n#&gt;  [3,]    3   13   23   33   43\n#&gt;  [4,]    4   14   24   34   44\n#&gt;  [5,]    5   15   25   35   45\n#&gt;  [6,]    6   16   26   36   46\n#&gt;  [7,]    7   17   27   37   47\n#&gt;  [8,]    8   18   28   38   48\n#&gt;  [9,]    9   19   29   39   49\n#&gt; [10,]   10   20   30   40   50"
  },
  {
    "objectID": "Lab7/Lab7.html",
    "href": "Lab7/Lab7.html",
    "title": "STAT 385 Lab 7 Data Manipulation and Visualization Practice",
    "section": "",
    "text": "library(tidyverse)\nlibrary(babynames)\nlibrary(nycflights13)"
  },
  {
    "objectID": "Lab7/Lab7.html#load-the-packages",
    "href": "Lab7/Lab7.html#load-the-packages",
    "title": "STAT 385 Lab 7 Data Manipulation and Visualization Practice",
    "section": "",
    "text": "library(tidyverse)\nlibrary(babynames)\nlibrary(nycflights13)"
  },
  {
    "objectID": "Lab7/Lab7.html#question-1",
    "href": "Lab7/Lab7.html#question-1",
    "title": "STAT 385 Lab 7 Data Manipulation and Visualization Practice",
    "section": "Question 1",
    "text": "Question 1\nWe use the babynames tibble from the babynames package for this question. The tibble contains names of male and female babies born in the US from 1880 to 2017. There are 1.9M rows and 5 columns.\n\n[10 pts] Please draw a line chart of proportion of boys with the name Garrett (or a name and gender you choose) across the years.\n[10 pts] Find all the names that were used by exactly \\(5\\) or \\(6\\) children during the 1980s, i.e. 1980-1989. [Hint: You may need to use distinct().]\n[10 pts] Filter babynames to just boys born in 2015, select the name and n columns, arrange those columns so that the most popular names appear near the top."
  },
  {
    "objectID": "Lab7/Lab7.html#question-2",
    "href": "Lab7/Lab7.html#question-2",
    "title": "STAT 385 Lab 7 Data Manipulation and Visualization Practice",
    "section": "Question 2",
    "text": "Question 2\nRe-create the R code necessary to generate the following graphs. The dataset is mpg from ggplot2 package.\n\n[10 pts] [Hint: You may use geom_smooth(formula = y ~ x, method = \"loess\") to add the smoothed line(s) for the questions.]\n\n\n\n\n\n\n\n\n\n\n\n[10 pts]\n\n[Hint: You may use color = drv.]"
  },
  {
    "objectID": "Lab7/Lab7.html#question-3",
    "href": "Lab7/Lab7.html#question-3",
    "title": "STAT 385 Lab 7 Data Manipulation and Visualization Practice",
    "section": "Question 3",
    "text": "Question 3\n\n[10 pts] Use flights dataset from the nycflights13 package. Find the average departure delay by month.\n[10 pts] Visualize the average departure delay by month from part (a) by drawing a bar-plot. Which three months have the worst average departure delays? [Hint: You may need to convert month to factor type using as.factor().]\n[10 pts] Currently, the dep_time and sched_dep_time are convenient to look at, but hard to compute with because they’re not really continuous numbers. Please convert them to a more convenient representation of number of minutes since midnight. Denote the two new variables as dep_time_minutes and sched_dep_time_minutes, respectively.\n\nFor example, 1755 corresponds to 5:55 pm. We can convert 1755 to minutes as \\(17*60 + 55 = 1075\\) minutes from midnight. You may consider using integer division operator \\(\\%/\\%\\) and modulus operator \\(\\%\\%\\)."
  },
  {
    "objectID": "Quiz1/Quiz1.html",
    "href": "Quiz1/Quiz1.html",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz1.R to Gradescope.\nRemember:\n\nDo not rename external data files or edit them in any way. In other words, don’t modify data.csv. Your code won’t work properly on modified version of the data set.\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. The autograder checks them only after it has run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz1.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz1/Quiz1.html#quiz-1-instructions",
    "href": "Quiz1/Quiz1.html#quiz-1-instructions",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz1.R to Gradescope.\nRemember:\n\nDo not rename external data files or edit them in any way. In other words, don’t modify data.csv. Your code won’t work properly on modified version of the data set.\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. The autograder checks them only after it has run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz1.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz1/Quiz1.html#question-1.",
    "href": "Quiz1/Quiz1.html#question-1.",
    "title": "",
    "section": "Question 1.",
    "text": "Question 1.\nMake a vector called myVector and have it store the integers \\(1,2,3\\)"
  },
  {
    "objectID": "Quiz1/Quiz1.html#question-2.",
    "href": "Quiz1/Quiz1.html#question-2.",
    "title": "",
    "section": "Question 2.",
    "text": "Question 2.\nMake a string called myString and have it store “Hello STAT 385!”."
  },
  {
    "objectID": "Quiz1/Quiz1.html#question-3.",
    "href": "Quiz1/Quiz1.html#question-3.",
    "title": "",
    "section": "Question 3.",
    "text": "Question 3.\nRead in the data set called data.csv and store the data frame as myDataFrame."
  },
  {
    "objectID": "Quiz12/Quiz12.html",
    "href": "Quiz12/Quiz12.html",
    "title": "",
    "section": "",
    "text": "Please complete the following questions using Base R Graphics. Do not use ggplot. And submit a file named Quiz12.R.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz12.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz12/Quiz12.html#quiz-12-instructions",
    "href": "Quiz12/Quiz12.html#quiz-12-instructions",
    "title": "",
    "section": "",
    "text": "Please complete the following questions using Base R Graphics. Do not use ggplot. And submit a file named Quiz12.R.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz12.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz12/Quiz12.html#data-preparation",
    "href": "Quiz12/Quiz12.html#data-preparation",
    "title": "",
    "section": "Data Preparation",
    "text": "Data Preparation\nIn this quiz, we will use the data frames flights and weather from the package nycflights13. This data frame contains info of on-time data for all flights that departed NYC (i.e. JFK, LGA or EWR) in 2013. The description of the variables:\n\nyear, month, day – Date of departure.\ndep_time, arr_time – Actual departure and arrival times (format HHMM or HMM), local tz.\nsched_dep_time, sched_arr_time – Scheduled departure and arrival times (format HHMM or HMM), local tz.\ndep_delay, arr_delay – Departure and arrival delays, in minutes. Negative times represent early departures/arrivals.\ncarrier – Two letter carrier abbreviation. See airlines to get name.\nflight – Flight number.\ntailnum – Plane tail number. See planes for additional metadata.\norigin, dest – Origin and destination. See airports for additional metadata.\nair_time – Amount of time spent in the air, in minutes.\ndistance – Distance between airports, in miles.\nhour, minute – Time of scheduled departure broken into hour and minutes.\ntime_hour – Scheduled date and hour of the flight as a POSIXct date. Along with origin, can be used to join flights data to weather data.\n\nPlease install and load the package nycflights13 beforehand. Then load the data frames flights and weather. Additionally, we could filter the data and create two new data frames, alaska_flights and early_january_weather, which will be used in the subsequent question.\nPlease make sure you copy and paste the code chunk below, for data preparation, at the beginning of your Quiz12.R script.\n\nif(!require(\"nycflights13\", character.only = TRUE)) install.packages(\"nycflights13\")\nlibrary(nycflights13)\ndata(flights)\ndata(weather)\n\n# Define new data frame alaska_flights\nalaska_flights &lt;- flights[flights$carrier == \"AS\",]\n\n### Define new data frame early_january_weather\nearly_january_weather &lt;- weather[weather$origin == \"EWR\" & weather$month == 1 & weather$day &lt;= 15,]"
  },
  {
    "objectID": "Quiz12/Quiz12.html#question-1",
    "href": "Quiz12/Quiz12.html#question-1",
    "title": "",
    "section": "Question 1",
    "text": "Question 1\n\n[2 pts] Draw a scatter plot to visualize the relationship between the variables dep_delay and arr_delay in the alaska_flights data frame (defined above). Change the label for the x-axis as Departure Delay, the label for y-axis as Arrival Delay, and the plot title as Relationship between Departure and Arrival Delay.\n\nSave the generated plot as PlotQ1a.png. Recall that, you can do so using the way below.\n\n\npng(\"PlotQ1a.png\")\n\n# [Code to generate the plot here]\n\ndev.off()\n\n\n\n\n\n[2 pts] Draw a scatterplot matrices of variables dep_time, sched_dep_time, dep_delay, arr_time, sched_arr_time, arr_delay in the data frame alaska_flights. Save the created plot as PlotQ1b.png."
  },
  {
    "objectID": "Quiz12/Quiz12.html#question-2",
    "href": "Quiz12/Quiz12.html#question-2",
    "title": "",
    "section": "Question 2",
    "text": "Question 2\n[2 pts] Create a time series plot (line graph) of the hourly temperature (variable temp) vs the time time_hour saved in the early_january_weather data frame (defined above). Change the label for the x-axis as Date and Hour, the label for y-axis as Temperature, and the plot title as Line Graph of Temperature vs Date and Hour. Save the created plot as PlotQ2.png."
  },
  {
    "objectID": "Quiz12/Quiz12.html#question-3",
    "href": "Quiz12/Quiz12.html#question-3",
    "title": "",
    "section": "Question 3",
    "text": "Question 3\n[2 pts] Draw histogram of temperature (variable temp) in the data frame weather. Change the bar color to blue. What’s more, use border = \"white\" to change the border color to white. Save the created plot as PlotQ3.png."
  },
  {
    "objectID": "Quiz12/Quiz12.html#question-4",
    "href": "Quiz12/Quiz12.html#question-4",
    "title": "",
    "section": "Question 4",
    "text": "Question 4\n[2 pts] Draw the two plot side by side (i.e. 1 row and 2 columns).\n\nPlot 1: Draw a boxplot of the variable temp in the data frame weather.\nPlot 2: Draw a boxplot of temp vs month of the data frame weather.\n\nSave the created plot as PlotQ4.png."
  },
  {
    "objectID": "Quiz12/Quiz12.html#question-5",
    "href": "Quiz12/Quiz12.html#question-5",
    "title": "",
    "section": "Question 5",
    "text": "Question 5\n[2 pts] Draw a bar plot of carrier from the dataset flights. Save the created plot as PlotQ5.png."
  },
  {
    "objectID": "Quiz15/Quiz15.html",
    "href": "Quiz15/Quiz15.html",
    "title": "",
    "section": "",
    "text": "Please complete the following questions using ggplot. And submit a file named Quiz15.R.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz15.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz15/Quiz15.html#quiz-15-instructions",
    "href": "Quiz15/Quiz15.html#quiz-15-instructions",
    "title": "",
    "section": "",
    "text": "Please complete the following questions using ggplot. And submit a file named Quiz15.R.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz15.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz15/Quiz15.html#data-preparation",
    "href": "Quiz15/Quiz15.html#data-preparation",
    "title": "",
    "section": "Data Preparation",
    "text": "Data Preparation\nIn this quiz, we will use the data frames flights and weather from the package nycflights13. This data frame contains info of on-time data for all flights that departed NYC (i.e. JFK, LGA or EWR) in 2013. The description of the variables:\n\nyear, month, day – Date of departure.\ndep_time, arr_time – Actual departure and arrival times (format HHMM or HMM), local tz.\nsched_dep_time, sched_arr_time – Scheduled departure and arrival times (format HHMM or HMM), local tz.\ndep_delay, arr_delay – Departure and arrival delays, in minutes. Negative times represent early departures/arrivals.\ncarrier – Two letter carrier abbreviation. See airlines to get name.\nflight – Flight number.\ntailnum – Plane tail number. See planes for additional metadata.\norigin, dest – Origin and destination. See airports for additional metadata.\nair_time – Amount of time spent in the air, in minutes.\ndistance – Distance between airports, in miles.\nhour, minute – Time of scheduled departure broken into hour and minutes.\ntime_hour – Scheduled date and hour of the flight as a POSIXct date. Along with origin, can be used to join flights data to weather data.\n\nPlease install and load the package nycflights13 beforehand. Then load the data frames flights and weather. Additionally, we could filter the data and create two new data frames, alaska_flights and early_january_weather, which will be used in the subsequent question.\nPlease make sure you copy and paste the code chunk below, for data preparation, at the beginning of your Quiz15.R script.\n\nif(!require(\"nycflights13\", character.only = TRUE)) install.packages(\"nycflights13\")\nlibrary(nycflights13)\nlibrary(tidyverse)\ndata(flights)\ndata(weather)\n\n# Define new data frame alaska_flights\nalaska_flights &lt;- flights %&gt;%\n  filter(carrier == \"AS\")\n\n### Define new data frame early_january_weather\nearly_january_weather &lt;- weather %&gt;%\n  filter(origin == \"EWR\" & month == 1 & day &lt;= 15)"
  },
  {
    "objectID": "Quiz15/Quiz15.html#question-1",
    "href": "Quiz15/Quiz15.html#question-1",
    "title": "",
    "section": "Question 1",
    "text": "Question 1\n\n[2 pts] Using ggplot, draw a scatter plot to visualize the relationship between the variables dep_delay and arr_delay in the alaska_flights data frame (defined above). Change the label for the x-axis as Departure Delay, the label for y-axis as Arrival Delay, and the plot title as Relationship between Departure and Arrival Delay. [Hint: On the ggplot2 cheat sheet, you may find helpful information in the Labels and Legends section.]\n\nSave the generated plot as PlotQ1a.png. Recall that, you can do so using ggsave().\n\n\n\nPlease use ggsave(..., , width = 10, height = 8, dpi = 300) for all questions in Quiz 15 to adjust the parameters to fit the plot size better.\n\n\n\n\n[2 pts] Using function in GGally, draw a scatterplot matrices of variables dep_time, sched_dep_time, dep_delay, arr_time, sched_arr_time, arr_delay in the data frame alaska_flights. Save the created plot as PlotQ1b.png."
  },
  {
    "objectID": "Quiz15/Quiz15.html#question-2",
    "href": "Quiz15/Quiz15.html#question-2",
    "title": "",
    "section": "Question 2",
    "text": "Question 2\n[2 pts] Using ggplot, create a time series plot (line graph) of the hourly temperature (variable temp) vs the time time_hour saved in the early_january_weather data frame (defined above). Change the label for the x-axis as Date and Hour, the label for y-axis as Temperature, and the plot title as Line Graph of Temperature vs Date and Hour. Save the created plot as PlotQ2.png."
  },
  {
    "objectID": "Quiz15/Quiz15.html#question-3",
    "href": "Quiz15/Quiz15.html#question-3",
    "title": "",
    "section": "Question 3",
    "text": "Question 3\n[2 pts] Using ggplot, draw histogram of temperature (variable temp on \\(x\\) axis) in the data frame weather. Change the bar color to blue and the border color to white.Save the created plot as PlotQ3.png."
  },
  {
    "objectID": "Quiz15/Quiz15.html#question-4",
    "href": "Quiz15/Quiz15.html#question-4",
    "title": "",
    "section": "Question 4",
    "text": "Question 4\n[2 pts] Using ggplot and grid.arrange, draw the two plot side by side (i.e. 1 row and 2 columns).\n\nPlot 1: Draw a vertical boxplot of the variable temp in the data frame weather.\nPlot 2: Draw a vertical boxplot of temp vs month of the data frame weather. (You may need as.factor() to convert month to factor type.)\n\nSave the created plot as PlotQ4.png."
  },
  {
    "objectID": "Quiz15/Quiz15.html#question-5",
    "href": "Quiz15/Quiz15.html#question-5",
    "title": "",
    "section": "Question 5",
    "text": "Question 5\n[2 pts] Using ggplot, draw a bar plot of carrier from the dataset flights. Save the created plot as PlotQ5.png."
  },
  {
    "objectID": "Quiz17/Quiz17.html",
    "href": "Quiz17/Quiz17.html",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz17.R.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz17.R\n Don’t forget to use library(tidyverse)at the beginning of Quiz17.R.\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs.\n\n\n\nPlease download the CSV data survey_visual_device for this quiz."
  },
  {
    "objectID": "Quiz17/Quiz17.html#quiz-17-instructions",
    "href": "Quiz17/Quiz17.html#quiz-17-instructions",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz17.R.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz17.R\n Don’t forget to use library(tidyverse)at the beginning of Quiz17.R.\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs.\n\n\n\nPlease download the CSV data survey_visual_device for this quiz."
  },
  {
    "objectID": "Quiz17/Quiz17.html#question-1",
    "href": "Quiz17/Quiz17.html#question-1",
    "title": "",
    "section": "Question 1",
    "text": "Question 1\n\n[2 pts] Use fct_relevel() to reorder the levels of Visual.acuity to c(\"Very Poor\", \"Poor\", \"Average\", \"Good\", \"Excellent\"). Find and save the count summary table of Visual.acuity as visual_acuity_count. The table should look like:\n\n\n#&gt; # A tibble: 5 × 2\n#&gt;   Visual.acuity     n\n#&gt;   &lt;fct&gt;         &lt;int&gt;\n#&gt; 1 Very Poor         1\n#&gt; 2 Poor              4\n#&gt; 3 Average          15\n#&gt; 4 Good             53\n#&gt; 5 Excellent        67\n\n\n[2 pts] Use fct_rev() to reverse the order of the levels of Visual.acuity from (a). Find and save the count summary table as visual_acuity_rev_count."
  },
  {
    "objectID": "Quiz17/Quiz17.html#question-2",
    "href": "Quiz17/Quiz17.html#question-2",
    "title": "",
    "section": "Question 2",
    "text": "Question 2\nOn the Reaction Time Statistics page, it suggests: mobile device “taps” tend to be a bit slower than “clicks”. Is it true according to survey_visual_device data?\n\n[2 pts] Use fct_collapse() to combine the “Touch screen” and “Trackpad” categories into “tap”, and merge the remaining three categories (“Mouse”, “Keyboard”, “Game controller”) into “click”. Name the new variable as tapclick.\n\n\n[2 pts] Use ggplot to create a box-plot with tapclick on the x-axis, and Reaction.time on the y-axis. Label the \\(x\\)-axis as Input Device and the \\(y\\)-axis as Reaction Time. Save the plot as tapclick_boxplot.png using ggsave(...,  width = 10, height = 8, dpi = 300)."
  },
  {
    "objectID": "Quiz17/Quiz17.html#question-3",
    "href": "Quiz17/Quiz17.html#question-3",
    "title": "",
    "section": "Question 3",
    "text": "Question 3\n\n[2 pts] Draw a bar chart of the frequency of different Device.OS values, ensuring the bars are arranged in descending order. You may use fct_infreq() to achieve this. Label the \\(x\\)-axis as Device OS and the \\(y\\)-axis as Count. Save the plot as device_barchart.png using ggsave(...,  width = 10, height = 8, dpi = 300).\n\n\n[2 pts] From the bar chart in (a), we can see several small counts. Please use fct_lump_min() to lumps levels appear fewer than 10 times as “Other”. Save the new variable as device_lump and count the frequency of each category. Save the summary table as device_lump_count.\n\n\n[2 pts] Draw a bar chart of the frequency of different device_lump values, ensuring the bars are in descending order. Label the \\(x\\)-axis as Device OS and the \\(y\\)-axis as Count. Save the plot as device_lump_barchart.png using ggsave(...,  width = 10, height = 8, dpi = 300)"
  },
  {
    "objectID": "Quiz19/Quiz19.html",
    "href": "Quiz19/Quiz19.html",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named app.R. [Please note the update! For the Shiny app quizzes, submit only the “app.R” only.]\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission app.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs.\n\nlibrary(tidyverse) ### We'll use some functions from stringr."
  },
  {
    "objectID": "Quiz19/Quiz19.html#quiz-19-instructions",
    "href": "Quiz19/Quiz19.html#quiz-19-instructions",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named app.R. [Please note the update! For the Shiny app quizzes, submit only the “app.R” only.]\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission app.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs.\n\nlibrary(tidyverse) ### We'll use some functions from stringr."
  },
  {
    "objectID": "Quiz19/Quiz19.html#summary-statistics-shiny-app-design",
    "href": "Quiz19/Quiz19.html#summary-statistics-shiny-app-design",
    "title": "",
    "section": "Summary Statistics Shiny App Design",
    "text": "Summary Statistics Shiny App Design\nPlease create a Shiny app that calculate the summary statistics of any input vector, which may contain missing values. Please use the following functions (from Quiz 8, slightly modified) for the design. When you design the app,\n\n[1 pt] Please use textInput() for the vector input (inputID: vec_Input). Please set the initial value as “1, 2, 3, 4, 5”.\n[1 pt] Please add an actionButton (inputID: calculate).\n[3 pt] Please create an output using verbatimTextOutput() with the outputID: summary_statistic in the mainPanel of the page.\n\n\nsquared_sum &lt;- function(x){\n  return(sum(x^2, na.rm=TRUE))\n}\n\n\nsummary_stats &lt;- function(x){\n  if (!is.numeric(x)){\n    stop(\"Input vector must be numeric!\")\n  }\n  \n  stats &lt;- list(\n    n = length(x),\n    mean = mean(x, na.rm = TRUE),\n    median = median(x, na.rm = TRUE),\n    sd = sd(x, na.rm = TRUE),\n    min = min(x, na.rm = TRUE),\n    max = max(x, na.rm = TRUE),\n    Q1 = unname(quantile(x, 0.25, na.rm = TRUE)),\n    Q3 = unname(quantile(x, 0.75, na.rm = TRUE)),\n    sq.sum = squared_sum(x),\n    num.missing = sum(is.na(x))\n  )\n  return(stats)\n}\n\n\n\nas.numeric(unlist(strsplit(input$vec_Input, \",\")))"
  },
  {
    "objectID": "Quiz3/Quiz3.html",
    "href": "Quiz3/Quiz3.html",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz3.R.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz3.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs.\n\n\n\n\n\nCreate the vector vec1 with the values shown below, using the function seq().\n\n#&gt;   [1]  1.1  1.3  1.5  1.7  1.9  2.1  2.3  2.5  2.7  2.9  3.1  3.3  3.5  3.7  3.9\n#&gt;  [16]  4.1  4.3  4.5  4.7  4.9  5.1  5.3  5.5  5.7  5.9  6.1  6.3  6.5  6.7  6.9\n#&gt;  [31]  7.1  7.3  7.5  7.7  7.9  8.1  8.3  8.5  8.7  8.9  9.1  9.3  9.5  9.7  9.9\n#&gt;  [46] 10.1 10.3 10.5 10.7 10.9 11.1 11.3 11.5 11.7 11.9 12.1 12.3 12.5 12.7 12.9\n#&gt;  [61] 13.1 13.3 13.5 13.7 13.9 14.1 14.3 14.5 14.7 14.9 15.1 15.3 15.5 15.7 15.9\n#&gt;  [76] 16.1 16.3 16.5 16.7 16.9 17.1 17.3 17.5 17.7 17.9 18.1 18.3 18.5 18.7 18.9\n#&gt;  [91] 19.1 19.3 19.5 19.7 19.9 20.1 20.3 20.5 20.7 20.9\n\n\n\n\n\n\n\nFind out how to use the colon operator : to create the vector vec2 with values below.\n\n#&gt;  [1]  8.5  7.5  6.5  5.5  4.5  3.5  2.5  1.5  0.5 -0.5 -1.5 -2.5 -3.5 -4.5 -5.5\n#&gt; [16] -6.5 -7.5 -8.5\n\n\n\n\n\n\n\nFind out how to use the function rep() and the input vector 1:3 to create the vector vec3 with the values below, which has twenty 1, ten 2, and forty 3.\n\n#&gt;  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3\n#&gt; [39] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n\n\n\n\n\n\n\nUse the function sum() to show that \\(1 + 2 + \\cdots + 1000 = 500500.\\) That is, create vector vec4 with values \\(1, 2, \\cdots, 1000\\). Then calculate the sum.\n\n\n\n\n\n\nLoad the R package MASS and use the data frame cats. Obtain vectors sex and bwt from the data frame with sex &lt;- cats$Sex, bwt &lt;- cats$Bwt. Show the body weights of female cats by creating vector bwtF. How many female cats are there in the data set? Please save the length value in object len.\n\n\n\nlibrary(MASS)\nsex &lt;- cats$Sex\nbwt &lt;- cats$Bwt\nbwtF&lt;- bwt[sex==\"F\"]\nbwtF\n#&gt;  [1] 2.0 2.0 2.0 2.1 2.1 2.1 2.1 2.1 2.1 2.1 2.1 2.1 2.2 2.2 2.2 2.2 2.2 2.2 2.3\n#&gt; [20] 2.3 2.3 2.3 2.3 2.3 2.3 2.3 2.3 2.3 2.3 2.3 2.4 2.4 2.4 2.4 2.5 2.5 2.6 2.6\n#&gt; [39] 2.6 2.7 2.7 2.7 2.9 2.9 2.9 3.0 3.0\nlen &lt;- length(bwtF)\nlen &lt;- sum(sex==\"F\")\nlen\n#&gt; [1] 47"
  },
  {
    "objectID": "Quiz3/Quiz3.html#quiz-3-instructions",
    "href": "Quiz3/Quiz3.html#quiz-3-instructions",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz3.R.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz3.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs.\n\n\n\n\n\nCreate the vector vec1 with the values shown below, using the function seq().\n\n#&gt;   [1]  1.1  1.3  1.5  1.7  1.9  2.1  2.3  2.5  2.7  2.9  3.1  3.3  3.5  3.7  3.9\n#&gt;  [16]  4.1  4.3  4.5  4.7  4.9  5.1  5.3  5.5  5.7  5.9  6.1  6.3  6.5  6.7  6.9\n#&gt;  [31]  7.1  7.3  7.5  7.7  7.9  8.1  8.3  8.5  8.7  8.9  9.1  9.3  9.5  9.7  9.9\n#&gt;  [46] 10.1 10.3 10.5 10.7 10.9 11.1 11.3 11.5 11.7 11.9 12.1 12.3 12.5 12.7 12.9\n#&gt;  [61] 13.1 13.3 13.5 13.7 13.9 14.1 14.3 14.5 14.7 14.9 15.1 15.3 15.5 15.7 15.9\n#&gt;  [76] 16.1 16.3 16.5 16.7 16.9 17.1 17.3 17.5 17.7 17.9 18.1 18.3 18.5 18.7 18.9\n#&gt;  [91] 19.1 19.3 19.5 19.7 19.9 20.1 20.3 20.5 20.7 20.9\n\n\n\n\n\n\n\nFind out how to use the colon operator : to create the vector vec2 with values below.\n\n#&gt;  [1]  8.5  7.5  6.5  5.5  4.5  3.5  2.5  1.5  0.5 -0.5 -1.5 -2.5 -3.5 -4.5 -5.5\n#&gt; [16] -6.5 -7.5 -8.5\n\n\n\n\n\n\n\nFind out how to use the function rep() and the input vector 1:3 to create the vector vec3 with the values below, which has twenty 1, ten 2, and forty 3.\n\n#&gt;  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3\n#&gt; [39] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n\n\n\n\n\n\n\nUse the function sum() to show that \\(1 + 2 + \\cdots + 1000 = 500500.\\) That is, create vector vec4 with values \\(1, 2, \\cdots, 1000\\). Then calculate the sum.\n\n\n\n\n\n\nLoad the R package MASS and use the data frame cats. Obtain vectors sex and bwt from the data frame with sex &lt;- cats$Sex, bwt &lt;- cats$Bwt. Show the body weights of female cats by creating vector bwtF. How many female cats are there in the data set? Please save the length value in object len.\n\n\n\nlibrary(MASS)\nsex &lt;- cats$Sex\nbwt &lt;- cats$Bwt\nbwtF&lt;- bwt[sex==\"F\"]\nbwtF\n#&gt;  [1] 2.0 2.0 2.0 2.1 2.1 2.1 2.1 2.1 2.1 2.1 2.1 2.1 2.2 2.2 2.2 2.2 2.2 2.2 2.3\n#&gt; [20] 2.3 2.3 2.3 2.3 2.3 2.3 2.3 2.3 2.3 2.3 2.3 2.4 2.4 2.4 2.4 2.5 2.5 2.6 2.6\n#&gt; [39] 2.6 2.7 2.7 2.7 2.9 2.9 2.9 3.0 3.0\nlen &lt;- length(bwtF)\nlen &lt;- sum(sex==\"F\")\nlen\n#&gt; [1] 47"
  },
  {
    "objectID": "Quiz5/Quiz5.html",
    "href": "Quiz5/Quiz5.html",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz5.R to Gradescope.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz5.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz5/Quiz5.html#quiz-5-instructions",
    "href": "Quiz5/Quiz5.html#quiz-5-instructions",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz5.R to Gradescope.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz5.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz5/Quiz5.html#question-1",
    "href": "Quiz5/Quiz5.html#question-1",
    "title": "",
    "section": "Question 1",
    "text": "Question 1\n[4pts] Use matrix() to create a matrix mat1 (see below) from the R built-in constant vector month.abb. Use the function colnames() to add the standard calendar quarters that make up the year, that is, add the column names Q1, Q2, Q3, Q4. Add 1st, 2nd, 3rd as row names.\n\n#&gt;     Q1    Q2    Q3    Q4   \n#&gt; 1st \"Jan\" \"Apr\" \"Jul\" \"Oct\"\n#&gt; 2nd \"Feb\" \"May\" \"Aug\" \"Nov\"\n#&gt; 3rd \"Mar\" \"Jun\" \"Sep\" \"Dec\""
  },
  {
    "objectID": "Quiz5/Quiz5.html#question-2",
    "href": "Quiz5/Quiz5.html#question-2",
    "title": "",
    "section": "Question 2",
    "text": "Question 2\n[3pts] Create a matrix as below and denote it as mat2.\n\n#&gt;      [,1] [,2]\n#&gt; [1,]    1    1\n#&gt; [2,]    1    2\n#&gt; [3,]    1    3\n#&gt; [4,]    2    1\n#&gt; [5,]    2    2\n#&gt; [6,]    2    3"
  },
  {
    "objectID": "Quiz5/Quiz5.html#question-3",
    "href": "Quiz5/Quiz5.html#question-3",
    "title": "",
    "section": "Question 3",
    "text": "Question 3\nAssume the matrix m is defined as follows. We find that m is a matrix, not a vector, as shown below.\n\nm &lt;- matrix(c(1,2,3,4,5,6), nrow=2)\nis.matrix(m) # is.matrix() tests if the object is a matrix\n#&gt; [1] TRUE\nis.vector(m) # is.vector() tests if the object is a vector\n#&gt; [1] FALSE\n\n\n[1pt] Check the dimension of m using dim() function. Save the result to object d.\n\n\n\n\n\n\n[1pt] Define m1 the same as m above. Then Remove the dimension attribute of m1 by using dim(m1) &lt;- NULL. Then check if m1 is a matrix? a vector?\n\n\n\n\n\n\n\n\n[1pt] Let m2 &lt;- c(1,2,3,4,5,6). Add the dimension attribute to m2 by using dim(m2) &lt;- c(2, 3). Then check if m2 is a matrix? a vector?"
  },
  {
    "objectID": "Quiz8/Quiz8.html",
    "href": "Quiz8/Quiz8.html",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz8.R.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz8.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz8/Quiz8.html#quiz-8-instructions",
    "href": "Quiz8/Quiz8.html#quiz-8-instructions",
    "title": "",
    "section": "",
    "text": "Please complete the following questions and submit a file named Quiz8.R.\nRemember:\n\n\nDo not use global paths in you script. Instead, use setwd() interactively in the console, but do not forget to remove or comment out this part of the code before you submit. The directory structure of your machine is not the same as the one on Gradescope’s virtual machines.\nDo not destroy or overwrite any variables in your program. I check them only after I have run your entire program from start to finish.\nCheck to make sure you do not have any syntax errors. Code that doesn’t run will get a very bad grade.\nMake sure to name your submission Quiz8.R\n\nTip: before submitting, it might help to clear all the objects from your workspace, and then source your file before you submit it. This will often uncover bugs."
  },
  {
    "objectID": "Quiz8/Quiz8.html#question-1",
    "href": "Quiz8/Quiz8.html#question-1",
    "title": "",
    "section": "Question 1",
    "text": "Question 1\n[2pts] Create a function to show welcome information.\n\nFunction Name: welcome\nFunction Input: Any string, like John Doe\nFunction Output: “Welcome to STAT 385,” and the input string, then the exclamation point. Example: “Welcome to STAT 385, John Doe!”\n\n[Hint: You may use paste0() function. Please make sure the number of spaces is correct, such as having a space after the comma.]"
  },
  {
    "objectID": "Quiz8/Quiz8.html#question-2",
    "href": "Quiz8/Quiz8.html#question-2",
    "title": "",
    "section": "Question 2",
    "text": "Question 2\n[2pts] Create a function to calculate the \\(t\\)-statistic for a given random sample \\(x\\) and the specified mu (defaulting to 0). Recall that \\(t = \\frac{\\bar{x} - \\mu}{s/\\sqrt n}\\), where \\(\\bar x\\) is the sample mean, \\(s\\) is the sample standard deviation of \\(x\\), and \\(n\\) is the sample size.\n\nFunction Name: t.statistic\nFunction Input: x, mu. Please set mu = 0 as the default value.\nFunction Output: The t-statistic value."
  },
  {
    "objectID": "Quiz8/Quiz8.html#question-3",
    "href": "Quiz8/Quiz8.html#question-3",
    "title": "",
    "section": "Question 3",
    "text": "Question 3\n[2pts] Create a function to calculate the squared sum of a vector.\n\nFunction Name: squared_sum\nFunction Input: Any numeric vector (may contains missing values).\nFunction Output: The squared sum of the input vector excluding the missing values.\n\n[Hint: You may use na.rm = TRUE within sum() to remove the missing values from calculation.]"
  },
  {
    "objectID": "Quiz8/Quiz8.html#question-4",
    "href": "Quiz8/Quiz8.html#question-4",
    "title": "",
    "section": "Question 4",
    "text": "Question 4\n[4pts] Create a function to return the list of summary statistics: the input vector itself vector, vector length n, vector mean mean, vector median value median, standard deviation sd, minimum min, maximum max, first quartile Q1, third quartile Q3, the squared sum sq.sum (please use the function defined in Question 3), the number of missing values num.missing.\n\nFunction Name: summary_stats\nFunction Input: Any numeric vector (may contains missing values).\nFunction Output: A list with values vector, n, mean, median, sd, min, max, Q1, Q3, sq.sum, num.missing. Please make sure the statistics follows the order specified."
  },
  {
    "objectID": "Tibble/Tibble.html",
    "href": "Tibble/Tibble.html",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "",
    "text": "Tidyverse is an collection of R packages designed for data science, including ggplot2, tibble, dplyr, tidyr, readr, stringr, etc.\nggplot2 \\(\\rightarrow\\) for data visualization\ndplyr, tidyr \\(\\rightarrow\\) for data wrangling and data preparation\n\n\n\n\n\nWorkflow in data science, with Tidyverse – https://oliviergimenez.github.io/intro_tidyverse/#1\n\n\n\n\nData preparation can take up to \\(70\\%\\)–\\(80\\%\\) of your project time.\n\nSo wouldn’t it be nice if there were an intuitive and idiomatic way to wrangle data?"
  },
  {
    "objectID": "Tibble/Tibble.html#introduction-to-tidyverse",
    "href": "Tibble/Tibble.html#introduction-to-tidyverse",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "",
    "text": "Tidyverse is an collection of R packages designed for data science, including ggplot2, tibble, dplyr, tidyr, readr, stringr, etc.\nggplot2 \\(\\rightarrow\\) for data visualization\ndplyr, tidyr \\(\\rightarrow\\) for data wrangling and data preparation\n\n\n\n\n\nWorkflow in data science, with Tidyverse – https://oliviergimenez.github.io/intro_tidyverse/#1\n\n\n\n\nData preparation can take up to \\(70\\%\\)–\\(80\\%\\) of your project time.\n\nSo wouldn’t it be nice if there were an intuitive and idiomatic way to wrangle data?"
  },
  {
    "objectID": "Tibble/Tibble.html#install-and-load-tidyverse",
    "href": "Tibble/Tibble.html#install-and-load-tidyverse",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "Install and Load Tidyverse",
    "text": "Install and Load Tidyverse\nPlease install and load the tidyverse.\n\n\ninstall.packages(\"tidyverse\") # Remember, you ONLY need to install it once\n\nlibrary(tidyverse) # but you'll need to load it every session you use it\n\n\n\n\nOnce you’re done, let’s start the journey!"
  },
  {
    "objectID": "Tibble/Tibble.html#syntax-comparison-base-r-vs-tidyverse",
    "href": "Tibble/Tibble.html#syntax-comparison-base-r-vs-tidyverse",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "Syntax Comparison: Base R vs Tidyverse",
    "text": "Syntax Comparison: Base R vs Tidyverse\nLet’s use the mpg tibble in ggplot2. Please refer to help(mpg) for the variable definitions.\n\nlibrary(tidyverse) \n#&gt; Warning: package 'tidyverse' was built under R version 4.3.3\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nstr(mpg)\n#&gt; tibble [234 × 11] (S3: tbl_df/tbl/data.frame)\n#&gt;  $ manufacturer: chr [1:234] \"audi\" \"audi\" \"audi\" \"audi\" ...\n#&gt;  $ model       : chr [1:234] \"a4\" \"a4\" \"a4\" \"a4\" ...\n#&gt;  $ displ       : num [1:234] 1.8 1.8 2 2 2.8 2.8 3.1 1.8 1.8 2 ...\n#&gt;  $ year        : int [1:234] 1999 1999 2008 2008 1999 1999 2008 1999 1999 2008 ...\n#&gt;  $ cyl         : int [1:234] 4 4 4 4 6 6 6 4 4 4 ...\n#&gt;  $ trans       : chr [1:234] \"auto(l5)\" \"manual(m5)\" \"manual(m6)\" \"auto(av)\" ...\n#&gt;  $ drv         : chr [1:234] \"f\" \"f\" \"f\" \"f\" ...\n#&gt;  $ cty         : int [1:234] 18 21 20 21 16 18 18 18 16 20 ...\n#&gt;  $ hwy         : int [1:234] 29 29 31 30 26 26 27 26 25 28 ...\n#&gt;  $ fl          : chr [1:234] \"p\" \"p\" \"p\" \"p\" ...\n#&gt;  $ class       : chr [1:234] \"compact\" \"compact\" \"compact\" \"compact\" ...\nglimpse(mpg) # glimpse() is the counterpart in dplyr of str()\n#&gt; Rows: 234\n#&gt; Columns: 11\n#&gt; $ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n#&gt; $ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n#&gt; $ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n#&gt; $ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n#&gt; $ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n#&gt; $ trans        &lt;chr&gt; \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n#&gt; $ drv          &lt;chr&gt; \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n#&gt; $ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n#&gt; $ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n#&gt; $ fl           &lt;chr&gt; \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n#&gt; $ class        &lt;chr&gt; \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\nExample 1 What types of vehicles did dodge produce from the mpg data?"
  },
  {
    "objectID": "Tibble/Tibble.html#syntax-comparison-base-r-vs-tidyverse-1",
    "href": "Tibble/Tibble.html#syntax-comparison-base-r-vs-tidyverse-1",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "Syntax Comparison: Base R vs Tidyverse",
    "text": "Syntax Comparison: Base R vs Tidyverse\nExample 1 What types of vehicles did dodge produce from the mpg data?\n\nBase R syntax\n\nunique(mpg[mpg$manufacturer == \"dodge\", \"class\"])\n#&gt; # A tibble: 3 × 1\n#&gt;   class  \n#&gt;   &lt;chr&gt;  \n#&gt; 1 minivan\n#&gt; 2 pickup \n#&gt; 3 suv\n\nFine, but a little awkward.\n\n\nTidyverse syntax\n\nmpg %&gt;%\n filter(manufacturer == \"dodge\") %&gt;%\n distinct(class) \n#&gt; # A tibble: 3 × 1\n#&gt;   class  \n#&gt;   &lt;chr&gt;  \n#&gt; 1 minivan\n#&gt; 2 pickup \n#&gt; 3 suv\n\nMuch, much nicer."
  },
  {
    "objectID": "Tibble/Tibble.html#tidyverse-syntax-and-pipe-operator",
    "href": "Tibble/Tibble.html#tidyverse-syntax-and-pipe-operator",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "Tidyverse Syntax and Pipe Operator",
    "text": "Tidyverse Syntax and Pipe Operator\nThe pipe operator %&gt;% is used to build the pipeline.\n\nYou could interpret %&gt;% as then\nPasses result on left into first argument of function on right.\n\n\n\nShortcut to type %&gt;%\n\n\n\n%&gt;% has to come at the end of the line, not the start."
  },
  {
    "objectID": "Tibble/Tibble.html#check-missing-values",
    "href": "Tibble/Tibble.html#check-missing-values",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "Check Missing Values",
    "text": "Check Missing Values\n\nmpg %&gt;% \n  dplyr::select(everything()) %&gt;% # use everything() to select all variables\n  summarize_all(~sum(is.na(.))) # summarize_all() affects every variable\n#&gt; # A tibble: 1 × 11\n#&gt;   manufacturer model displ  year   cyl trans   drv   cty   hwy    fl class\n#&gt;          &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n#&gt; 1            0     0     0     0     0     0     0     0     0     0     0"
  },
  {
    "objectID": "Tibble/Tibble.html#wrangling-graphing-in-tidyverse",
    "href": "Tibble/Tibble.html#wrangling-graphing-in-tidyverse",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "Wrangling & Graphing in Tidyverse",
    "text": "Wrangling & Graphing in Tidyverse\nChain the tidyverse pipeline into the ggplot function.\n\n\n\nExample 2\nDraw boxplots of engine displacement (variable displ in mpg) for three vehicle types of dodge.\n\nmpg %&gt;% ### Data wrangling part\n filter(manufacturer == \"dodge\") %&gt;%\n ggplot(aes(x = class, y = displ)) + ### Data visualization part\n geom_boxplot() \n\n\n\n\n\n\n\n\n\nOr equivalently,\n\n### Data wrangling part \nmpg_dodge &lt;- mpg %&gt;% \n  filter(manufacturer == \"dodge\")\n\n### Data visualization part \n  ggplot(mpg_dodge, aes(x = class, y = displ)) + \n  geom_boxplot()"
  },
  {
    "objectID": "Tibble/Tibble.html#tibbles",
    "href": "Tibble/Tibble.html#tibbles",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "Tibbles",
    "text": "Tibbles\ntidyverse mainly deals with tibble instead of data.frame. Therefore this is where we start.\ntibble is a data.frame with different attributes and requirements. The package tibble provides support for tibble. It is included in tidyverse."
  },
  {
    "objectID": "Tibble/Tibble.html#tibble-vs-data-frame",
    "href": "Tibble/Tibble.html#tibble-vs-data-frame",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "Tibble vs Data Frame",
    "text": "Tibble vs Data Frame\n\nTibbles are enhanced data frames.\nTibbles are a table format provided by the tibble package, part of the core tidyverse.\nMake working in the tidyverse a little easier.\nWe will compare tibble and data frame on the following aspects:\n\nCreating\nCoercion (i.e. data frame \\(\\longleftrightarrow\\) tibble)\nDifference in printing\nDifference in subsetting\nDifference in recycling rules\nDifference in accepting row names"
  },
  {
    "objectID": "Tibble/Tibble.html#tibble-vs-data-frame-creating-import-a-csv-file",
    "href": "Tibble/Tibble.html#tibble-vs-data-frame-creating-import-a-csv-file",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "Tibble vs Data Frame – Creating (Import a CSV File)",
    "text": "Tibble vs Data Frame – Creating (Import a CSV File)\n\nImport Data as a Data frame\nRecall: use read.csv() to read the data frame.\n\ndf_workshop &lt;- read.csv(\"DS Workshop Participants List.csv\")\nclass(df_workshop)\n#&gt; [1] \"data.frame\"\nstr(df_workshop)\n#&gt; 'data.frame':    16 obs. of  11 variables:\n#&gt;  $ Name                           : chr  \"Dwayne Johnson\" \"Rihanna\" \"Ellen DeGeneres\" \"Will Smith\" ...\n#&gt;  $ Gender                         : chr  \"M\" \"F\" \"F\" \"M\" ...\n#&gt;  $ Email.Address                  : chr  \"Djohnson@illinois.edu\" \"Rihanna@illinois.edu\" \"Edegeneres@illinois.edu\" \"Wsmith@illinois.edu\" ...\n#&gt;  $ Department                     : chr  \"Statistics\" \"Economics\" \"Biology\" \"Electrical and Computer Engineering\" ...\n#&gt;  $ Info.Source                    : chr  \"Email\" \"Class\" \"Email\" \"Email\" ...\n#&gt;  $ Class.Year                     : chr  \"Undergraduate\" \"Graduate\" \"Undergraduate\" \"Undergraduate\" ...\n#&gt;  $ Major                          : chr  \"Statistics\" \"ECON\" \"Biology\" \"Electrical Engineering\" ...\n#&gt;  $ Related.Courses.Taken          : chr  \"STAT 207, MATH 220\" \"BUS 201, MATH 426\" \"STAT 207\" \"MATH 221, MATH 220\" ...\n#&gt;  $ Programming.Language.Known     : chr  \"R, SAS, Matlab\" \"Python, SAS\" \"R, Python\" \"R, Python, SQL\" ...\n#&gt;  $ Willingness.to.be.the.Presenter: chr  \"Y\" \"N\" \"N\" \"Y\" ...\n#&gt;  $ DS.Years.of.Experience         : num  1 1 0 0 1 NA 2 0.5 0.5 NA ...\n\n\n\nImport Data as a Tibble\n\nUse read_csv() (from readr package) to read the tibble.\n\n\ntbl_workshop &lt;- read_csv(\"DS Workshop Participants List.csv\")\n#&gt; Rows: 16 Columns: 11\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr (10): Name, Gender, Email Address, Department, Info Source, Class Year, ...\n#&gt; dbl  (1): DS Years of Experience\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nclass(tbl_workshop)\n#&gt; [1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"\nglimpse(tbl_workshop) \n#&gt; Rows: 16\n#&gt; Columns: 11\n#&gt; $ Name                              &lt;chr&gt; \"Dwayne Johnson\", \"Rihanna\", \"Ellen …\n#&gt; $ Gender                            &lt;chr&gt; \"M\", \"F\", \"F\", \"M\", \"F\", \"M\", \"M\", \"…\n#&gt; $ `Email Address`                   &lt;chr&gt; \"Djohnson@illinois.edu\", \"Rihanna@il…\n#&gt; $ Department                        &lt;chr&gt; \"Statistics\", \"Economics\", \"Biology\"…\n#&gt; $ `Info Source`                     &lt;chr&gt; \"Email\", \"Class\", \"Email\", \"Email\", …\n#&gt; $ `Class Year`                      &lt;chr&gt; \"Undergraduate\", \"Graduate\", \"Underg…\n#&gt; $ Major                             &lt;chr&gt; \"Statistics\", \"ECON\", \"Biology\", \"El…\n#&gt; $ `Related Courses Taken`           &lt;chr&gt; \"STAT 207, MATH 220\", \"BUS 201, MATH…\n#&gt; $ `Programming Language Known`      &lt;chr&gt; \"R, SAS, Matlab\", \"Python, SAS\", \"R,…\n#&gt; $ `Willingness to be the Presenter` &lt;chr&gt; \"Y\", \"N\", \"N\", \"Y\", \"Y\", NA, \"N\", \"N…\n#&gt; $ `DS Years of Experience`          &lt;dbl&gt; 1.0, 1.0, 0.0, 0.0, 1.0, NA, 2.0, 0.…"
  },
  {
    "objectID": "Tibble/Tibble.html#tibble-vs-data-frame-creating-construct-a-data-frame-by-columns",
    "href": "Tibble/Tibble.html#tibble-vs-data-frame-creating-construct-a-data-frame-by-columns",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "Tibble vs Data Frame – Creating (Construct a Data Frame by Columns)",
    "text": "Tibble vs Data Frame – Creating (Construct a Data Frame by Columns)\n\nData frame\n\n\ndata.frame('crazy name' = 1:3, 'not so crazy & name' = c(\"a\", \"b\", \"c\"))\n#&gt;   crazy.name not.so.crazy...name\n#&gt; 1          1                   a\n#&gt; 2          2                   b\n#&gt; 3          3                   c\n\ndata.frame(x = 1:3, y = x + 2)\n#&gt; Error in eval(expr, envir, enclos): object 'x' not found\n\n\n\nTibble\n\n\ntibble('crazy name' = 1:3, 'not so crazy & name' = c(\"a\", \"b\", \"c\")) \n#&gt; # A tibble: 3 × 2\n#&gt;   `crazy name` `not so crazy & name`\n#&gt;          &lt;int&gt; &lt;chr&gt;                \n#&gt; 1            1 a                    \n#&gt; 2            2 b                    \n#&gt; 3            3 c\n# Tibble allows  non-syntactic variable names. To refer to these variables, please surround them with backticks.\n\ntibble(x = 1:3, y = x + 2) # Tibble allows referring to variables just created\n#&gt; # A tibble: 3 × 2\n#&gt;       x     y\n#&gt;   &lt;int&gt; &lt;dbl&gt;\n#&gt; 1     1     3\n#&gt; 2     2     4\n#&gt; 3     3     5"
  },
  {
    "objectID": "Tibble/Tibble.html#tibble-vs-data-frame-coercion",
    "href": "Tibble/Tibble.html#tibble-vs-data-frame-coercion",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "Tibble vs Data Frame – Coercion",
    "text": "Tibble vs Data Frame – Coercion\n\nData Frame to Tibble\n\nclass(df_workshop)\n#&gt; [1] \"data.frame\"\n\nclass(as_tibble(df_workshop))\n#&gt; [1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\nTibble to Data Frame\n\nclass(tbl_workshop) \n#&gt; [1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"\n\nclass(as.data.frame(tbl_workshop))\n#&gt; [1] \"data.frame\""
  },
  {
    "objectID": "Tibble/Tibble.html#tibble-vs-data-frame-printing",
    "href": "Tibble/Tibble.html#tibble-vs-data-frame-printing",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "Tibble vs Data Frame – printing",
    "text": "Tibble vs Data Frame – printing\n\nData Frame\n\ndf_workshop\n#&gt;                 Name Gender           Email.Address\n#&gt; 1     Dwayne Johnson      M   Djohnson@illinois.edu\n#&gt; 2            Rihanna      F    Rihanna@illinois.edu\n#&gt; 3    Ellen DeGeneres      F Edegeneres@illinois.edu\n#&gt; 4         Will Smith      M     Wsmith@illinois.edu\n#&gt; 5     Angelina Jolie      F     Ajolie@illinois.edu\n#&gt; 6  Cristiano Ronaldo      M   Cronaldo@illinois.edu\n#&gt; 7  Leonardo DiCaprio      M  Ldicaprio@illinois.edu\n#&gt; 8         Tom Cruise      M    Tcruise@illinois.edu\n#&gt; 9  Robert Downey Jr.      M  RDowneyJr@illinois.edu\n#&gt; 10       Celine Dion      F      Cdion@illinois.edu\n#&gt; 11             Adele      F      Adele@illinois.edu\n#&gt; 12   Serena Williams      F  Swilliams@illinois.edu\n#&gt; 13      Lionel Messi      M     Lmessi@illinois.edu\n#&gt; 14      Taylor Swift      F     Tswift@illinois.edu\n#&gt; 15     J. K. Rowling      F  JKRowling@illinois.edu\n#&gt; 16      LeBron James      M     Ljames@illinois.edu\n#&gt;                             Department        Info.Source        Class.Year\n#&gt; 1                           Statistics              Email     Undergraduate\n#&gt; 2                            Economics              Class          Graduate\n#&gt; 3                              Biology              Email     Undergraduate\n#&gt; 4  Electrical and Computer Engineering              Email     Undergraduate\n#&gt; 5                     Computer Science              Class     Undergraduate\n#&gt; 6                            Economics Friends/Colleagues Faculty and staff\n#&gt; 7                            Economics              Email     Undergraduate\n#&gt; 8                          Mathematics              Class     Undergraduate\n#&gt; 9   mechanical Science and Engineering              Class     Undergraduate\n#&gt; 10                             Biology Friends/Colleagues Faculty and staff\n#&gt; 11                          Statistics              Class     Undergraduate\n#&gt; 12                    Computer Science              Email     Undergraduate\n#&gt; 13                             Biology          Professor          Graduate\n#&gt; 14                             BIology              Flyer     Undergraduate\n#&gt; 15                             Finance              Email     Undergraduate\n#&gt; 16 Electrical and Computer Engineering              Flyer     Undergraduate\n#&gt;                     Major        Related.Courses.Taken\n#&gt; 1              Statistics           STAT 207, MATH 220\n#&gt; 2                    ECON            BUS 201, MATH 426\n#&gt; 3                 Biology                     STAT 207\n#&gt; 4  Electrical Engineering           MATH 221, MATH 220\n#&gt; 5        Computer Science      CS 173, CS 411, CS 210 \n#&gt; 6                    &lt;NA&gt;                         &lt;NA&gt;\n#&gt; 7               Economics  BUS 201, MATH 426, STAT 425\n#&gt; 8             Mathematics MATH 227, STAT 207, STAT 425\n#&gt; 9  Mechanical Engineering           MATH 220, STAT 425\n#&gt; 10                   &lt;NA&gt;                         &lt;NA&gt;\n#&gt; 11             Statistics MATH 220, MATH 426, STAT 425\n#&gt; 12       Computer Science               CS 225, CS 173\n#&gt; 13                Biology                     MATH 257\n#&gt; 14                Biology           MATH 257, MATH 426\n#&gt; 15                Finance             BUS 302, BUS 201\n#&gt; 16                     EE           MATH 227, STAT 425\n#&gt;    Programming.Language.Known Willingness.to.be.the.Presenter\n#&gt; 1              R, SAS, Matlab                               Y\n#&gt; 2                 Python, SAS                               N\n#&gt; 3                   R, Python                               N\n#&gt; 4              R, Python, SQL                               Y\n#&gt; 5                 Python, SAS                               Y\n#&gt; 6                        &lt;NA&gt;                            &lt;NA&gt;\n#&gt; 7     Java, C++, HTML, Matlab                               N\n#&gt; 8                      Matlab                               N\n#&gt; 9              Matlab, Python                               Y\n#&gt; 10                       &lt;NA&gt;                            &lt;NA&gt;\n#&gt; 11          R, Python, Matlab                               Y\n#&gt; 12                  R, Python                               Y\n#&gt; 13                  C++, JAVA                               N\n#&gt; 14                     Python                               Y\n#&gt; 15             R, Hadoop, SAS                               N\n#&gt; 16                     Matlab                               N\n#&gt;    DS.Years.of.Experience\n#&gt; 1                     1.0\n#&gt; 2                     1.0\n#&gt; 3                     0.0\n#&gt; 4                     0.0\n#&gt; 5                     1.0\n#&gt; 6                      NA\n#&gt; 7                     2.0\n#&gt; 8                     0.5\n#&gt; 9                     0.5\n#&gt; 10                     NA\n#&gt; 11                    1.0\n#&gt; 12                    0.5\n#&gt; 13                    2.0\n#&gt; 14                    0.0\n#&gt; 15                    1.5\n#&gt; 16                    0.5\n\n\n\nTibble\n\ntbl_workshop\n#&gt; # A tibble: 16 × 11\n#&gt;    Name       Gender `Email Address` Department `Info Source` `Class Year` Major\n#&gt;    &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;      &lt;chr&gt;         &lt;chr&gt;        &lt;chr&gt;\n#&gt;  1 Dwayne Jo… M      Djohnson@illin… Statistics Email         Undergradua… Stat…\n#&gt;  2 Rihanna    F      Rihanna@illino… Economics  Class         Graduate     ECON \n#&gt;  3 Ellen DeG… F      Edegeneres@ill… Biology    Email         Undergradua… Biol…\n#&gt;  4 Will Smith M      Wsmith@illinoi… Electrica… Email         Undergradua… Elec…\n#&gt;  5 Angelina … F      Ajolie@illinoi… Computer … Class         Undergradua… Comp…\n#&gt;  6 Cristiano… M      Cronaldo@illin… Economics  Friends/Coll… Faculty and… &lt;NA&gt; \n#&gt;  7 Leonardo … M      Ldicaprio@illi… Economics  Email         Undergradua… Econ…\n#&gt;  8 Tom Cruise M      Tcruise@illino… Mathemati… Class         Undergradua… Math…\n#&gt;  9 Robert Do… M      RDowneyJr@illi… mechanica… Class         Undergradua… Mech…\n#&gt; 10 Celine Di… F      Cdion@illinois… Biology    Friends/Coll… Faculty and… &lt;NA&gt; \n#&gt; 11 Adele      F      Adele@illinois… Statistics Class         Undergradua… Stat…\n#&gt; 12 Serena Wi… F      Swilliams@illi… Computer … Email         Undergradua… Comp…\n#&gt; 13 Lionel Me… M      Lmessi@illinoi… Biology    Professor     Graduate     Biol…\n#&gt; 14 Taylor Sw… F      Tswift@illinoi… BIology    Flyer         Undergradua… Biol…\n#&gt; 15 J. K. Row… F      JKRowling@illi… Finance    Email         Undergradua… Fina…\n#&gt; 16 LeBron Ja… M      Ljames@illinoi… Electrica… Flyer         Undergradua… EE   \n#&gt; # ℹ 4 more variables: `Related Courses Taken` &lt;chr&gt;,\n#&gt; #   `Programming Language Known` &lt;chr&gt;,\n#&gt; #   `Willingness to be the Presenter` &lt;chr&gt;, `DS Years of Experience` &lt;dbl&gt;"
  },
  {
    "objectID": "Tibble/Tibble.html#tibble-vs-data-frame-subsetting",
    "href": "Tibble/Tibble.html#tibble-vs-data-frame-subsetting",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "Tibble vs Data Frame – Subsetting",
    "text": "Tibble vs Data Frame – Subsetting\n\nRecall Subsetting in Data Frame\n\ndf_workshop$Major # Returns a vector\n#&gt;  [1] \"Statistics\"             \"ECON\"                   \"Biology\"               \n#&gt;  [4] \"Electrical Engineering\" \"Computer Science\"       NA                      \n#&gt;  [7] \"Economics\"              \"Mathematics\"            \"Mechanical Engineering\"\n#&gt; [10] NA                       \"Statistics\"             \"Computer Science\"      \n#&gt; [13] \"Biology\"                \"Biology\"                \"Finance\"               \n#&gt; [16] \"EE\"\ndf_workshop[, \"Major\"] # Returns a vector\n#&gt;  [1] \"Statistics\"             \"ECON\"                   \"Biology\"               \n#&gt;  [4] \"Electrical Engineering\" \"Computer Science\"       NA                      \n#&gt;  [7] \"Economics\"              \"Mathematics\"            \"Mechanical Engineering\"\n#&gt; [10] NA                       \"Statistics\"             \"Computer Science\"      \n#&gt; [13] \"Biology\"                \"Biology\"                \"Finance\"               \n#&gt; [16] \"EE\"\n\n\n\nSubsetting in tibble – distinguish [] and [[]] in tibble\n\nUsing [] returns a tibble\n\n\ntbl_workshop[,'Major'] \n#&gt; # A tibble: 16 × 1\n#&gt;    Major                 \n#&gt;    &lt;chr&gt;                 \n#&gt;  1 Statistics            \n#&gt;  2 ECON                  \n#&gt;  3 Biology               \n#&gt;  4 Electrical Engineering\n#&gt;  5 Computer Science      \n#&gt;  6 &lt;NA&gt;                  \n#&gt;  7 Economics             \n#&gt;  8 Mathematics           \n#&gt;  9 Mechanical Engineering\n#&gt; 10 &lt;NA&gt;                  \n#&gt; 11 Statistics            \n#&gt; 12 Computer Science      \n#&gt; 13 Biology               \n#&gt; 14 Biology               \n#&gt; 15 Finance               \n#&gt; 16 EE\ntbl_workshop['Major']\n#&gt; # A tibble: 16 × 1\n#&gt;    Major                 \n#&gt;    &lt;chr&gt;                 \n#&gt;  1 Statistics            \n#&gt;  2 ECON                  \n#&gt;  3 Biology               \n#&gt;  4 Electrical Engineering\n#&gt;  5 Computer Science      \n#&gt;  6 &lt;NA&gt;                  \n#&gt;  7 Economics             \n#&gt;  8 Mathematics           \n#&gt;  9 Mechanical Engineering\n#&gt; 10 &lt;NA&gt;                  \n#&gt; 11 Statistics            \n#&gt; 12 Computer Science      \n#&gt; 13 Biology               \n#&gt; 14 Biology               \n#&gt; 15 Finance               \n#&gt; 16 EE\n\n\nUsing [[]] or drop = TRUE returns a vector\n\n\ntbl_workshop[['Major']]\n#&gt;  [1] \"Statistics\"             \"ECON\"                   \"Biology\"               \n#&gt;  [4] \"Electrical Engineering\" \"Computer Science\"       NA                      \n#&gt;  [7] \"Economics\"              \"Mathematics\"            \"Mechanical Engineering\"\n#&gt; [10] NA                       \"Statistics\"             \"Computer Science\"      \n#&gt; [13] \"Biology\"                \"Biology\"                \"Finance\"               \n#&gt; [16] \"EE\"\ntbl_workshop[,'Major', drop = TRUE]\n#&gt;  [1] \"Statistics\"             \"ECON\"                   \"Biology\"               \n#&gt;  [4] \"Electrical Engineering\" \"Computer Science\"       NA                      \n#&gt;  [7] \"Economics\"              \"Mathematics\"            \"Mechanical Engineering\"\n#&gt; [10] NA                       \"Statistics\"             \"Computer Science\"      \n#&gt; [13] \"Biology\"                \"Biology\"                \"Finance\"               \n#&gt; [16] \"EE\""
  },
  {
    "objectID": "Tibble/Tibble.html#tibble-vs-data-frame-recycling",
    "href": "Tibble/Tibble.html#tibble-vs-data-frame-recycling",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "Tibble vs Data Frame – Recycling",
    "text": "Tibble vs Data Frame – Recycling\n\nData frames – recycling rule is applied automatically\n\ndata.frame(x = 1:6, y = \"STAT\")\n#&gt;   x    y\n#&gt; 1 1 STAT\n#&gt; 2 2 STAT\n#&gt; 3 3 STAT\n#&gt; 4 4 STAT\n#&gt; 5 5 STAT\n#&gt; 6 6 STAT\n\ndata.frame(x = 1:6, y = \"STAT\", z = c(\"Y\", \"N\"))\n#&gt;   x    y z\n#&gt; 1 1 STAT Y\n#&gt; 2 2 STAT N\n#&gt; 3 3 STAT Y\n#&gt; 4 4 STAT N\n#&gt; 5 5 STAT Y\n#&gt; 6 6 STAT N\n\n\n\nTibble – only values of length 1 are recycled\n\ntibble(x = 1:6, y = \"STAT\")\n#&gt; # A tibble: 6 × 2\n#&gt;       x y    \n#&gt;   &lt;int&gt; &lt;chr&gt;\n#&gt; 1     1 STAT \n#&gt; 2     2 STAT \n#&gt; 3     3 STAT \n#&gt; 4     4 STAT \n#&gt; 5     5 STAT \n#&gt; 6     6 STAT\n\ntibble(x = 1:6, y = \"STAT\", z = c(\"Y\", \"N\"))\n#&gt; Error in `tibble()`:\n#&gt; ! Tibble columns must have compatible sizes.\n#&gt; • Size 6: Existing data.\n#&gt; • Size 2: Column `z`.\n#&gt; ℹ Only values of size one are recycled.\n\n# Correction\ntibble(x = 1:6, y = \"STAT\", z = rep(c(\"Y\", \"N\"), times = 3))\n#&gt; # A tibble: 6 × 3\n#&gt;       x y     z    \n#&gt;   &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n#&gt; 1     1 STAT  Y    \n#&gt; 2     2 STAT  N    \n#&gt; 3     3 STAT  Y    \n#&gt; 4     4 STAT  N    \n#&gt; 5     5 STAT  Y    \n#&gt; 6     6 STAT  N"
  },
  {
    "objectID": "Tibble/Tibble.html#tibble-vs-data-frame-row-names",
    "href": "Tibble/Tibble.html#tibble-vs-data-frame-row-names",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "Tibble vs Data Frame – Row Names",
    "text": "Tibble vs Data Frame – Row Names\n\nData frames accept assigned row names\n\nrownames(df_workshop) &lt;- letters[1:16]\nhead(df_workshop)\n#&gt;                Name Gender           Email.Address\n#&gt; a    Dwayne Johnson      M   Djohnson@illinois.edu\n#&gt; b           Rihanna      F    Rihanna@illinois.edu\n#&gt; c   Ellen DeGeneres      F Edegeneres@illinois.edu\n#&gt; d        Will Smith      M     Wsmith@illinois.edu\n#&gt; e    Angelina Jolie      F     Ajolie@illinois.edu\n#&gt; f Cristiano Ronaldo      M   Cronaldo@illinois.edu\n#&gt;                            Department        Info.Source        Class.Year\n#&gt; a                          Statistics              Email     Undergraduate\n#&gt; b                           Economics              Class          Graduate\n#&gt; c                             Biology              Email     Undergraduate\n#&gt; d Electrical and Computer Engineering              Email     Undergraduate\n#&gt; e                    Computer Science              Class     Undergraduate\n#&gt; f                           Economics Friends/Colleagues Faculty and staff\n#&gt;                    Major   Related.Courses.Taken Programming.Language.Known\n#&gt; a             Statistics      STAT 207, MATH 220             R, SAS, Matlab\n#&gt; b                   ECON       BUS 201, MATH 426                Python, SAS\n#&gt; c                Biology                STAT 207                  R, Python\n#&gt; d Electrical Engineering      MATH 221, MATH 220             R, Python, SQL\n#&gt; e       Computer Science CS 173, CS 411, CS 210                 Python, SAS\n#&gt; f                   &lt;NA&gt;                    &lt;NA&gt;                       &lt;NA&gt;\n#&gt;   Willingness.to.be.the.Presenter DS.Years.of.Experience\n#&gt; a                               Y                      1\n#&gt; b                               N                      1\n#&gt; c                               N                      0\n#&gt; d                               Y                      0\n#&gt; e                               Y                      1\n#&gt; f                            &lt;NA&gt;                     NA\n\n\n\nTibbles don’t accept assigned row names\n\nrownames(tbl_workshop) &lt;- letters[1:16]\n#&gt; Warning: Setting row names on a tibble is deprecated."
  },
  {
    "objectID": "Tibble/Tibble.html#more-motivation",
    "href": "Tibble/Tibble.html#more-motivation",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "More motivation",
    "text": "More motivation\n\nThe tidyverse has become the industry-standard in the R-using data science community.\nThe tidyverse in R is comparable to the numpy and pandas packages in Python."
  },
  {
    "objectID": "Tibble/Tibble.html#reference",
    "href": "Tibble/Tibble.html#reference",
    "title": "Introduction to Tidyverse and Tibbles",
    "section": "Reference",
    "text": "Reference\n\nReference books\n\nR for Data Science: https://r4ds.hadley.nz/\nHands-on Programming with R: https://rstudio-education.github.io/hopr/\nR Graphics Cookbook: https://r-graphics.org/\nStatistical Inference via Data Science: A Modern Dive into R and the Tidyverse, by Chester Ismay, Albert Y. Kim\nvignette(\"tibble\") or https://tibble.tidyverse.org/articles/tibble.html#tibbles-vs-data-frames\nAnd some github resources: https://github.com/stmorse/intro-tidyverse\n\nhttps://github.com/rstudio-education/welcome-to-the-tidyverse"
  }
]